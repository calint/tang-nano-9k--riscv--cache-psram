
os:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
# # generated - do not edit (see `configuration.py`)
# .global _start
# _start:
#     li sp, 0x200000
       0:	00200137          	lui	sp,0x200
#     j run
       4:	0040006f          	j	8 <run>

00000008 <run>:
#     ++buf_ptr;
#   });
#   size_t const sector = string_to_uint32(w1.word);
#   sdcard_write_blocking(sector, buf);
# }
# 
       8:	f8010113          	addi	sp,sp,-128 # 1fff80 <__bss_end+0x1fdbe4>
       c:	06112e23          	sw	ra,124(sp)
      10:	06812c23          	sw	s0,120(sp)
      14:	07212823          	sw	s2,112(sp)
      18:	07312623          	sw	s3,108(sp)
      1c:	07412423          	sw	s4,104(sp)
      20:	07512223          	sw	s5,100(sp)
      24:	06912a23          	sw	s1,116(sp)
# static auto action_sdcard_status() -> void {
      28:	7bc010ef          	jal	17e4 <_ZL12initiate_bssv>
#   // initiate statics in freestanding build
# 
#   led_set(0b0000);
#   // turn on all leds
# 
#   uart_send_cstr(ascii_art);
      2c:	000027b7          	lui	a5,0x2
# static auto led_set(int32_t const bits) -> void { *LED = bits; }
      30:	fe002e23          	sw	zero,-4(zero) # fffffffc <__bss_end+0xffffdc60>
      34:	3907a503          	lw	a0,912(a5) # 2390 <_ZL9ascii_art>
#   uart_send_cstr(hello);
# 
#   mut active_entity = entity_id_t{1};
      38:	00100413          	li	s0,1
#   mut cmd_buf = command_buffer{};
# 
#   while (true) {
#     mut &ent = entities[active_entity];
#     print_location(ent.location, active_entity);
      3c:	00002ab7          	lui	s5,0x2
#   uart_send_cstr(ascii_art);
      40:	418010ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   uart_send_cstr(hello);
      44:	000027b7          	lui	a5,0x2
      48:	38c7a503          	lw	a0,908(a5) # 238c <_ZL5hello>
#     uart_send_cstr(ent.name);
#     uart_send_cstr(" > ");
      4c:	00002a37          	lui	s4,0x2
#     input(cmd_buf);
#     uart_send_cstr("\r\n");
      50:	000029b7          	lui	s3,0x2
#   uart_send_cstr(hello);
      54:	404010ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   mut cmd_buf = command_buffer{};
      58:	05200613          	li	a2,82
      5c:	00000593          	li	a1,0
      60:	00c10513          	addi	a0,sp,12
      64:	740010ef          	jal	17a4 <memset>
#     handle_input(active_entity, cmd_buf);
#     active_entity = active_entity == 1 ? 2 : 1;
      68:	00300913          	li	s2,3
#     print_location(ent.location, active_entity);
      6c:	00141793          	slli	a5,s0,0x1
      70:	008787b3          	add	a5,a5,s0
      74:	00279793          	slli	a5,a5,0x2
      78:	408787b3          	sub	a5,a5,s0
      7c:	00279793          	slli	a5,a5,0x2
      80:	fd0a8493          	addi	s1,s5,-48 # 1fd0 <_ZL8entities>
      84:	00f484b3          	add	s1,s1,a5
      88:	0044c503          	lbu	a0,4(s1)
      8c:	00040593          	mv	a1,s0
      90:	4b8000ef          	jal	548 <_ZL14print_locationhh>
#     uart_send_cstr(ent.name);
      94:	0004a503          	lw	a0,0(s1)
      98:	3c0010ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#     uart_send_cstr(" > ");
      9c:	c78a0513          	addi	a0,s4,-904 # 1c78 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x424>
      a0:	3b8010ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#     input(cmd_buf);
      a4:	00c10513          	addi	a0,sp,12
      a8:	739000ef          	jal	fe0 <_ZL5inputR14command_buffer>
#     uart_send_cstr("\r\n");
      ac:	c7c98513          	addi	a0,s3,-900 # 1c7c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x428>
      b0:	3a8010ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#     handle_input(active_entity, cmd_buf);
      b4:	00040513          	mv	a0,s0
      b8:	00c10593          	addi	a1,sp,12
#     active_entity = active_entity == 1 ? 2 : 1;
      bc:	40890433          	sub	s0,s2,s0
#     handle_input(active_entity, cmd_buf);
      c0:	124000ef          	jal	1e4 <_ZL12handle_inputhR14command_buffer>
#     active_entity = active_entity == 1 ? 2 : 1;
      c4:	0ff47413          	zext.b	s0,s0
      c8:	fa5ff06f          	j	6c <run+0x64>

000000cc <_ZL18string_equals_cstr4spanIcEPKc>:
#   }
# }
# 
# static auto string_equals_cstr(string const str, char const *cstr) -> bool {
      cc:	ff010113          	addi	sp,sp,-16
      d0:	00a12423          	sw	a0,8(sp)
      d4:	00b12623          	sw	a1,12(sp)
#   mut e = str.for_each_until_false([&cstr](char const ch) {
#     if (*cstr && *cstr == ch) {
      d8:	00064783          	lbu	a5,0(a2)
#   }
# 
#   auto
#   for_each_until_false(callable_returns_bool<Type> auto f) const -> position {
#     Type *it = begin_;
#     for (; it < end_; ++it) {
      dc:	00b56e63          	bltu	a0,a1,f8 <_ZL18string_equals_cstr4spanIcEPKc+0x2c>
#       ++cstr;
#       return true;
#     }
#     return false;
#   });
#   return *cstr == '\0' && str.is_at_end(e);
      e0:	40b50533          	sub	a0,a0,a1
      e4:	00153593          	seqz	a1,a0
      e8:	0017b513          	seqz	a0,a5
# }
      ec:	00a5f533          	and	a0,a1,a0
      f0:	01010113          	addi	sp,sp,16
      f4:	00008067          	ret
#     if (*cstr && *cstr == ch) {
      f8:	fe0784e3          	beqz	a5,e0 <_ZL18string_equals_cstr4spanIcEPKc+0x14>
      fc:	00054703          	lbu	a4,0(a0)
     100:	fef710e3          	bne	a4,a5,e0 <_ZL18string_equals_cstr4spanIcEPKc+0x14>
#       ++cstr;
     104:	00160613          	addi	a2,a2,1
     108:	00150513          	addi	a0,a0,1
     10c:	fcdff06f          	j	d8 <_ZL18string_equals_cstr4spanIcEPKc+0xc>

00000110 <_ZL12string_print4spanIcE>:
# 
# static auto string_print(string const str) -> void {
     110:	fe010113          	addi	sp,sp,-32
     114:	00a12423          	sw	a0,8(sp)
#   str.for_each([](char const ch) { uart_send_char(ch); });
     118:	00810513          	addi	a0,sp,8
# static auto string_print(string const str) -> void {
     11c:	00112e23          	sw	ra,28(sp)
     120:	00b12623          	sw	a1,12(sp)
#   str.for_each([](char const ch) { uart_send_char(ch); });
     124:	730010ef          	jal	1854 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0>
# }
     128:	01c12083          	lw	ra,28(sp)
     12c:	02010113          	addi	sp,sp,32
     130:	00008067          	ret

00000134 <_ZL16string_next_word4spanIcE>:
#   string word{};
#   string rem{};
# };
# 
# static auto
# string_next_word(string const str) -> struct string_next_word_return {
     134:	fe010113          	addi	sp,sp,-32
     138:	00b12423          	sw	a1,8(sp)
     13c:	00c12623          	sw	a2,12(sp)
#     Type *it = begin_;
     140:	00058713          	mv	a4,a1
#     for (; it < end_; ++it) {
     144:	02c76e63          	bltu	a4,a2,180 <_ZL16string_next_word4spanIcE+0x4c>
#         return {};
     148:	00000793          	li	a5,0
     14c:	00000693          	li	a3,0
#       if (pos.ptr > end_ || pos.ptr < begin_) {
     150:	02e67e63          	bgeu	a2,a4,18c <_ZL16string_next_word4spanIcE+0x58>
     154:	00d12823          	sw	a3,16(sp)
     158:	00f12a23          	sw	a5,20(sp)
#       if (pos.ptr > end_ || pos.ptr < begin_) {
     15c:	00e66c63          	bltu	a2,a4,174 <_ZL16string_next_word4spanIcE+0x40>
     160:	00b76a63          	bltu	a4,a1,174 <_ZL16string_next_word4spanIcE+0x40>
#     Type *it = begin_;
     164:	00070793          	mv	a5,a4
#       if (!f(*it)) {
     168:	02000693          	li	a3,32
#     for (; it < end_; ++it) {
     16c:	04c7e263          	bltu	a5,a2,1b0 <_ZL16string_next_word4spanIcE+0x7c>
#       if (pos.ptr > end_ || pos.ptr < begin_) {
     170:	04f67463          	bgeu	a2,a5,1b8 <_ZL16string_next_word4spanIcE+0x84>
#         return {};
     174:	00000613          	li	a2,0
     178:	00000793          	li	a5,0
     17c:	0400006f          	j	1bc <_ZL16string_next_word4spanIcE+0x88>
#   mut ce = str.for_each_until_false(
#       [](char const ch) { return ch != ' ' && ch != '\0'; });
     180:	00074783          	lbu	a5,0(a4)
     184:	0df7f793          	andi	a5,a5,223
     188:	00079a63          	bnez	a5,19c <_ZL16string_next_word4spanIcE+0x68>
#       if (pos.ptr > end_ || pos.ptr < begin_) {
     18c:	00b76c63          	bltu	a4,a1,1a4 <_ZL16string_next_word4spanIcE+0x70>
#     return {begin_, pos.ptr};
     190:	00070793          	mv	a5,a4
     194:	00058693          	mv	a3,a1
     198:	fbdff06f          	j	154 <_ZL16string_next_word4spanIcE+0x20>
#     for (; it < end_; ++it) {
     19c:	00170713          	addi	a4,a4,1
     1a0:	fa5ff06f          	j	144 <_ZL16string_next_word4spanIcE+0x10>
#         return {};
     1a4:	00000793          	li	a5,0
     1a8:	00000693          	li	a3,0
     1ac:	fa9ff06f          	j	154 <_ZL16string_next_word4spanIcE+0x20>
#       if (!f(*it)) {
     1b0:	0007c583          	lbu	a1,0(a5)
     1b4:	02d58463          	beq	a1,a3,1dc <_ZL16string_next_word4spanIcE+0xa8>
#       if (pos.ptr > end_ || pos.ptr < begin_) {
     1b8:	fae7eee3          	bltu	a5,a4,174 <_ZL16string_next_word4spanIcE+0x40>
#   let word = str.subspan_ending_at(ce);
#   let rem = str.subspan_starting_at(ce);
#   let rem_trimmed = rem.subspan_starting_at(
#       rem.for_each_until_false([](char const ch) { return ch == ' '; }));
#   return {word, rem_trimmed};
     1bc:	01012703          	lw	a4,16(sp)
     1c0:	00f52423          	sw	a5,8(a0)
     1c4:	00c52623          	sw	a2,12(a0)
     1c8:	00e52023          	sw	a4,0(a0)
     1cc:	01412703          	lw	a4,20(sp)
     1d0:	00e52223          	sw	a4,4(a0)
# }
     1d4:	02010113          	addi	sp,sp,32
     1d8:	00008067          	ret
#     for (; it < end_; ++it) {
     1dc:	00178793          	addi	a5,a5,1
     1e0:	f8dff06f          	j	16c <_ZL16string_next_word4spanIcE+0x38>

000001e4 <_ZL12handle_inputhR14command_buffer>:
# 
# static auto
# handle_input(entity_id_t const eid, command_buffer &cmd_buf) -> void {
     1e4:	fb010113          	addi	sp,sp,-80
     1e8:	04812423          	sw	s0,72(sp)
     1ec:	04912223          	sw	s1,68(sp)
     1f0:	05212023          	sw	s2,64(sp)
     1f4:	03312e23          	sw	s3,60(sp)
     1f8:	03412c23          	sw	s4,56(sp)
     1fc:	04112623          	sw	ra,76(sp)
#     }
#   }
# 
#   auto characters_after_cursor() const -> size_t { return end_ - cursor_; }
# 
#   auto input_length() const -> size_t { return end_; }
     200:	0515c603          	lbu	a2,81(a1)
     204:	00050913          	mv	s2,a0
# 
#   let line = cmd_buf.string();
#   let w1 = string_next_word(line);
     208:	02010513          	addi	a0,sp,32
     20c:	00c58633          	add	a2,a1,a2
     210:	f25ff0ef          	jal	134 <_ZL16string_next_word4spanIcE>
#   let cmd = w1.word;
     214:	02012483          	lw	s1,32(sp)
     218:	02412403          	lw	s0,36(sp)
#   let args = w1.rem;
     21c:	02812a03          	lw	s4,40(sp)
     220:	02c12983          	lw	s3,44(sp)
# 
#   if (string_equals_cstr(cmd, "help")) {
     224:	00002637          	lui	a2,0x2
     228:	c8060613          	addi	a2,a2,-896 # 1c80 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x42c>
     22c:	00048513          	mv	a0,s1
     230:	00040593          	mv	a1,s0
#   let cmd = w1.word;
     234:	00912823          	sw	s1,16(sp)
     238:	00812a23          	sw	s0,20(sp)
#   let args = w1.rem;
     23c:	01412c23          	sw	s4,24(sp)
     240:	01312e23          	sw	s3,28(sp)
#   if (string_equals_cstr(cmd, "help")) {
     244:	e89ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     248:	02050263          	beqz	a0,26c <_ZL12handle_inputhR14command_buffer+0x88>
#   } else if (string_equals_cstr(cmd, "q")) {
#     exit(0);
#   } else {
#     uart_send_cstr("not understood\r\n\r\n");
#   }
# }
     24c:	04812403          	lw	s0,72(sp)
     250:	04c12083          	lw	ra,76(sp)
     254:	04412483          	lw	s1,68(sp)
     258:	04012903          	lw	s2,64(sp)
     25c:	03c12983          	lw	s3,60(sp)
     260:	03812a03          	lw	s4,56(sp)
     264:	05010113          	addi	sp,sp,80
#     print_help();
     268:	5590006f          	j	fc0 <_ZL10print_helpv>
#   } else if (string_equals_cstr(cmd, "i")) {
     26c:	00002637          	lui	a2,0x2
     270:	c8860613          	addi	a2,a2,-888 # 1c88 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x434>
     274:	00048513          	mv	a0,s1
     278:	00040593          	mv	a1,s0
     27c:	e51ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     280:	02050a63          	beqz	a0,2b4 <_ZL12handle_inputhR14command_buffer+0xd0>
#     action_inventory(eid);
     284:	00090513          	mv	a0,s2
     288:	4e8000ef          	jal	770 <_ZL16action_inventoryh>
#     uart_send_cstr("\r\n");
     28c:	00002537          	lui	a0,0x2
     290:	c7c50513          	addi	a0,a0,-900 # 1c7c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x428>
# }
     294:	04812403          	lw	s0,72(sp)
     298:	04c12083          	lw	ra,76(sp)
     29c:	04412483          	lw	s1,68(sp)
     2a0:	04012903          	lw	s2,64(sp)
     2a4:	03c12983          	lw	s3,60(sp)
     2a8:	03812a03          	lw	s4,56(sp)
     2ac:	05010113          	addi	sp,sp,80
#     uart_send_cstr("not understood\r\n\r\n");
     2b0:	1a80106f          	j	1458 <_ZL14uart_send_cstrPKc>
#   } else if (string_equals_cstr(cmd, "t")) {
     2b4:	00002637          	lui	a2,0x2
     2b8:	c8c60613          	addi	a2,a2,-884 # 1c8c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x438>
     2bc:	00048513          	mv	a0,s1
     2c0:	00040593          	mv	a1,s0
     2c4:	e09ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     2c8:	02050863          	beqz	a0,2f8 <_ZL12handle_inputhR14command_buffer+0x114>
# }
     2cc:	04812403          	lw	s0,72(sp)
     2d0:	04c12083          	lw	ra,76(sp)
     2d4:	04412483          	lw	s1,68(sp)
#     action_take(eid, args);
     2d8:	000a0593          	mv	a1,s4
     2dc:	00098613          	mv	a2,s3
# }
     2e0:	03812a03          	lw	s4,56(sp)
     2e4:	03c12983          	lw	s3,60(sp)
#     action_take(eid, args);
     2e8:	00090513          	mv	a0,s2
# }
     2ec:	04012903          	lw	s2,64(sp)
     2f0:	05010113          	addi	sp,sp,80
#     action_take(eid, args);
     2f4:	5500006f          	j	844 <_ZL11action_takeh4spanIcE>
#   } else if (string_equals_cstr(cmd, "d")) {
     2f8:	00002637          	lui	a2,0x2
     2fc:	c9060613          	addi	a2,a2,-880 # 1c90 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x43c>
     300:	00048513          	mv	a0,s1
     304:	00040593          	mv	a1,s0
     308:	dc5ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     30c:	02050863          	beqz	a0,33c <_ZL12handle_inputhR14command_buffer+0x158>
# }
     310:	04812403          	lw	s0,72(sp)
     314:	04c12083          	lw	ra,76(sp)
     318:	04412483          	lw	s1,68(sp)
#     action_drop(eid, args);
     31c:	000a0593          	mv	a1,s4
     320:	00098613          	mv	a2,s3
# }
     324:	03812a03          	lw	s4,56(sp)
     328:	03c12983          	lw	s3,60(sp)
#     action_drop(eid, args);
     32c:	00090513          	mv	a0,s2
# }
     330:	04012903          	lw	s2,64(sp)
     334:	05010113          	addi	sp,sp,80
#     action_drop(eid, args);
     338:	7000006f          	j	a38 <_ZL11action_droph4spanIcE>
#   } else if (string_equals_cstr(cmd, "n")) {
     33c:	00002637          	lui	a2,0x2
     340:	00040593          	mv	a1,s0
     344:	c9460613          	addi	a2,a2,-876 # 1c94 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x440>
     348:	00048513          	mv	a0,s1
     34c:	d81ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
#     action_go(eid, 0);
     350:	00000593          	li	a1,0
#   } else if (string_equals_cstr(cmd, "n")) {
     354:	02051063          	bnez	a0,374 <_ZL12handle_inputhR14command_buffer+0x190>
#   } else if (string_equals_cstr(cmd, "e")) {
     358:	00002637          	lui	a2,0x2
     35c:	c9860613          	addi	a2,a2,-872 # 1c98 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x444>
     360:	00048513          	mv	a0,s1
     364:	00040593          	mv	a1,s0
     368:	d65ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     36c:	02050663          	beqz	a0,398 <_ZL12handle_inputhR14command_buffer+0x1b4>
#     action_go(eid, 1);
     370:	00100593          	li	a1,1
# }
     374:	04812403          	lw	s0,72(sp)
     378:	04c12083          	lw	ra,76(sp)
     37c:	04412483          	lw	s1,68(sp)
     380:	03c12983          	lw	s3,60(sp)
     384:	03812a03          	lw	s4,56(sp)
#     action_go(eid, 1);
     388:	00090513          	mv	a0,s2
# }
     38c:	04012903          	lw	s2,64(sp)
     390:	05010113          	addi	sp,sp,80
#     action_go(eid, 1);
     394:	0850006f          	j	c18 <_ZL9action_gohh>
#   } else if (string_equals_cstr(cmd, "s")) {
     398:	00002637          	lui	a2,0x2
     39c:	00040593          	mv	a1,s0
     3a0:	c9c60613          	addi	a2,a2,-868 # 1c9c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x448>
     3a4:	00048513          	mv	a0,s1
     3a8:	d25ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
#     action_go(eid, 2);
     3ac:	00200593          	li	a1,2
#   } else if (string_equals_cstr(cmd, "s")) {
     3b0:	fc0512e3          	bnez	a0,374 <_ZL12handle_inputhR14command_buffer+0x190>
#   } else if (string_equals_cstr(cmd, "w")) {
     3b4:	00002637          	lui	a2,0x2
     3b8:	00040593          	mv	a1,s0
     3bc:	ca060613          	addi	a2,a2,-864 # 1ca0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x44c>
     3c0:	00048513          	mv	a0,s1
     3c4:	d09ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
#     action_go(eid, 3);
     3c8:	00300593          	li	a1,3
#   } else if (string_equals_cstr(cmd, "w")) {
     3cc:	fa0514e3          	bnez	a0,374 <_ZL12handle_inputhR14command_buffer+0x190>
#   } else if (string_equals_cstr(cmd, "g")) {
     3d0:	00002637          	lui	a2,0x2
     3d4:	ca460613          	addi	a2,a2,-860 # 1ca4 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x450>
     3d8:	00048513          	mv	a0,s1
     3dc:	00040593          	mv	a1,s0
     3e0:	cedff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     3e4:	02050863          	beqz	a0,414 <_ZL12handle_inputhR14command_buffer+0x230>
# }
     3e8:	04812403          	lw	s0,72(sp)
     3ec:	04c12083          	lw	ra,76(sp)
     3f0:	04412483          	lw	s1,68(sp)
#     action_give(eid, args);
     3f4:	000a0593          	mv	a1,s4
     3f8:	00098613          	mv	a2,s3
# }
     3fc:	03812a03          	lw	s4,56(sp)
     400:	03c12983          	lw	s3,60(sp)
#     action_give(eid, args);
     404:	00090513          	mv	a0,s2
# }
     408:	04012903          	lw	s2,64(sp)
     40c:	05010113          	addi	sp,sp,80
#     action_give(eid, args);
     410:	1090006f          	j	d18 <_ZL11action_giveh4spanIcE>
#   } else if (string_equals_cstr(cmd, "m")) {
     414:	00002637          	lui	a2,0x2
     418:	ca860613          	addi	a2,a2,-856 # 1ca8 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x454>
     41c:	00048513          	mv	a0,s1
     420:	00040593          	mv	a1,s0
     424:	ca9ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     428:	02050263          	beqz	a0,44c <_ZL12handle_inputhR14command_buffer+0x268>
# }
     42c:	04812403          	lw	s0,72(sp)
     430:	04c12083          	lw	ra,76(sp)
     434:	04412483          	lw	s1,68(sp)
     438:	04012903          	lw	s2,64(sp)
     43c:	03c12983          	lw	s3,60(sp)
     440:	03812a03          	lw	s4,56(sp)
     444:	05010113          	addi	sp,sp,80
#     action_mem_test();
     448:	05c0106f          	j	14a4 <_ZL15action_mem_testv>
#   } else if (string_equals_cstr(cmd, "sds")) {
     44c:	01012503          	lw	a0,16(sp)
     450:	01412583          	lw	a1,20(sp)
     454:	00002637          	lui	a2,0x2
     458:	cac60613          	addi	a2,a2,-852 # 1cac <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x458>
     45c:	c71ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     460:	02050263          	beqz	a0,484 <_ZL12handle_inputhR14command_buffer+0x2a0>
# }
     464:	04812403          	lw	s0,72(sp)
     468:	04c12083          	lw	ra,76(sp)
     46c:	04412483          	lw	s1,68(sp)
     470:	04012903          	lw	s2,64(sp)
     474:	03c12983          	lw	s3,60(sp)
     478:	03812a03          	lw	s4,56(sp)
     47c:	05010113          	addi	sp,sp,80
#     action_sdcard_status();
     480:	2680106f          	j	16e8 <_ZL20action_sdcard_statusv>
#   } else if (string_equals_cstr(cmd, "sdr")) {
     484:	01012503          	lw	a0,16(sp)
     488:	01412583          	lw	a1,20(sp)
     48c:	00002637          	lui	a2,0x2
     490:	cb060613          	addi	a2,a2,-848 # 1cb0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x45c>
     494:	c39ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     498:	02050663          	beqz	a0,4c4 <_ZL12handle_inputhR14command_buffer+0x2e0>
# }
     49c:	04812403          	lw	s0,72(sp)
#     action_sdcard_test_read(args);
     4a0:	01812503          	lw	a0,24(sp)
     4a4:	01c12583          	lw	a1,28(sp)
# }
     4a8:	04c12083          	lw	ra,76(sp)
     4ac:	04412483          	lw	s1,68(sp)
     4b0:	04012903          	lw	s2,64(sp)
     4b4:	03c12983          	lw	s3,60(sp)
     4b8:	03812a03          	lw	s4,56(sp)
     4bc:	05010113          	addi	sp,sp,80
#     action_sdcard_test_read(args);
     4c0:	1040106f          	j	15c4 <_ZL23action_sdcard_test_read4spanIcE>
#   } else if (string_equals_cstr(cmd, "sdw")) {
     4c4:	01012503          	lw	a0,16(sp)
     4c8:	01412583          	lw	a1,20(sp)
     4cc:	00002637          	lui	a2,0x2
     4d0:	cb460613          	addi	a2,a2,-844 # 1cb4 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x460>
     4d4:	bf9ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     4d8:	02050663          	beqz	a0,504 <_ZL12handle_inputhR14command_buffer+0x320>
# }
     4dc:	04812403          	lw	s0,72(sp)
#     action_sdcard_test_write(args);
     4e0:	01812503          	lw	a0,24(sp)
     4e4:	01c12583          	lw	a1,28(sp)
# }
     4e8:	04c12083          	lw	ra,76(sp)
     4ec:	04412483          	lw	s1,68(sp)
     4f0:	04012903          	lw	s2,64(sp)
     4f4:	03c12983          	lw	s3,60(sp)
     4f8:	03812a03          	lw	s4,56(sp)
     4fc:	05010113          	addi	sp,sp,80
#     action_sdcard_test_write(args);
     500:	1540106f          	j	1654 <_ZL24action_sdcard_test_write4spanIcE>
#   } else if (string_equals_cstr(cmd, "q")) {
     504:	01012503          	lw	a0,16(sp)
     508:	01412583          	lw	a1,20(sp)
     50c:	00002637          	lui	a2,0x2
     510:	cb860613          	addi	a2,a2,-840 # 1cb8 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x464>
     514:	bb9ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     518:	00051863          	bnez	a0,528 <_ZL12handle_inputhR14command_buffer+0x344>
#     uart_send_cstr("not understood\r\n\r\n");
     51c:	00002537          	lui	a0,0x2
     520:	cbc50513          	addi	a0,a0,-836 # 1cbc <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x468>
     524:	d71ff06f          	j	294 <_ZL12handle_inputhR14command_buffer+0xb0>
# }
     528:	04c12083          	lw	ra,76(sp)
     52c:	04812403          	lw	s0,72(sp)
     530:	04412483          	lw	s1,68(sp)
     534:	04012903          	lw	s2,64(sp)
     538:	03c12983          	lw	s3,60(sp)
     53c:	03812a03          	lw	s4,56(sp)
     540:	05010113          	addi	sp,sp,80
     544:	00008067          	ret

00000548 <_ZL14print_locationhh>:
# 
# static auto print_location(location_id_t const lid,
#                            entity_id_t const eid_exclude_from_output) -> void {
     548:	fb010113          	addi	sp,sp,-80
     54c:	03312e23          	sw	s3,60(sp)
     550:	00050993          	mv	s3,a0
#   mut &loc = locations[lid];
#   uart_send_cstr("u r in ");
     554:	00002537          	lui	a0,0x2
     558:	cd050513          	addi	a0,a0,-816 # 1cd0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x47c>
#                            entity_id_t const eid_exclude_from_output) -> void {
     55c:	04112623          	sw	ra,76(sp)
     560:	00b12623          	sw	a1,12(sp)
     564:	04812423          	sw	s0,72(sp)
     568:	04912223          	sw	s1,68(sp)
     56c:	05212023          	sw	s2,64(sp)
     570:	03412c23          	sw	s4,56(sp)
     574:	03512a23          	sw	s5,52(sp)
     578:	03712623          	sw	s7,44(sp)
     57c:	03812423          	sw	s8,40(sp)
     580:	03912223          	sw	s9,36(sp)
     584:	03612823          	sw	s6,48(sp)
     588:	03a12023          	sw	s10,32(sp)
     58c:	01b12e23          	sw	s11,28(sp)
#   uart_send_cstr(loc.name);
     590:	00299913          	slli	s2,s3,0x2
#   uart_send_cstr("u r in ");
     594:	6c5000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   uart_send_cstr(loc.name);
     598:	000024b7          	lui	s1,0x2
     59c:	013907b3          	add	a5,s2,s3
     5a0:	00579793          	slli	a5,a5,0x5
     5a4:	05448413          	addi	s0,s1,84 # 2054 <_ZL9locations>
     5a8:	00f40433          	add	s0,s0,a5
     5ac:	00042503          	lw	a0,0(s0)
     5b0:	00040a93          	mv	s5,s0
#     }
#     return {i};
#   }
# 
#   auto for_each(callable_returns_void<Type> auto f) const -> void {
#     for (size_t i = 0; i < len; ++i) {
     5b4:	00040b93          	mv	s7,s0
     5b8:	6a1000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   uart_send_cstr("\r\nu c: ");
     5bc:	00002537          	lui	a0,0x2
     5c0:	cd850513          	addi	a0,a0,-808 # 1cd8 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x484>
     5c4:	695000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
     5c8:	00000a13          	li	s4,0
     5cc:	05448493          	addi	s1,s1,84
#   // print objects at location
#   {
#     mut counter = 0;
#     loc.objects.for_each([&counter](let id) {
#       if (counter++) {
#         uart_send_cstr(", ");
     5d0:	00002c37          	lui	s8,0x2
#       }
#       uart_send_cstr(objects[id].name);
     5d4:	00002cb7          	lui	s9,0x2
     5d8:	08442783          	lw	a5,132(s0)
     5dc:	0cfa6a63          	bltu	s4,a5,6b0 <_ZL14print_locationhh+0x168>
#     });
#     if (!counter) {
     5e0:	000a1863          	bnez	s4,5f0 <_ZL14print_locationhh+0xa8>
#       uart_send_cstr("nothing");
     5e4:	00002537          	lui	a0,0x2
     5e8:	ce450513          	addi	a0,a0,-796 # 1ce4 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x490>
     5ec:	66d000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#     }
#     uart_send_cstr("\r\n");
     5f0:	00002bb7          	lui	s7,0x2
     5f4:	c7cb8513          	addi	a0,s7,-900 # 1c7c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x428>
     5f8:	01390a33          	add	s4,s2,s3
     5fc:	65d000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
     600:	005a1a13          	slli	s4,s4,0x5
#   }
# 
#   // print entities in location
#   {
#     mut counter = 0;
     604:	00000793          	li	a5,0
     608:	00000b13          	li	s6,0
     60c:	01448a33          	add	s4,s1,s4
#         return;
#       }
#       if (counter++) {
#         uart_send_cstr(", ");
#       }
#       uart_send_cstr(entities[id].name);
     610:	00002c37          	lui	s8,0x2
#         uart_send_cstr(", ");
     614:	00002cb7          	lui	s9,0x2
     618:	090a2683          	lw	a3,144(s4)
     61c:	0cdb6263          	bltu	s6,a3,6e0 <_ZL14print_locationhh+0x198>
#     });
#     if (counter != 0) {
     620:	00078863          	beqz	a5,630 <_ZL14print_locationhh+0xe8>
#       uart_send_cstr(" is here\r\n");
     624:	00002537          	lui	a0,0x2
     628:	cec50513          	addi	a0,a0,-788 # 1cec <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x498>
     62c:	62d000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   auto length() const -> size_t { return len; }
     630:	01390933          	add	s2,s2,s3
     634:	00591913          	slli	s2,s2,0x5
#   }
# 
#   // print exits from location
#   {
#     mut counter = 0;
#     uart_send_cstr("exits: ");
     638:	00002537          	lui	a0,0x2
     63c:	012484b3          	add	s1,s1,s2
     640:	cf850513          	addi	a0,a0,-776 # 1cf8 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x4a4>
     644:	615000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
     648:	09c4a983          	lw	s3,156(s1)
#     mut &lse = loc.exits;
#     let n = lse.length();
#     for (mut i = 0u; i < n; ++i) {
     64c:	00002437          	lui	s0,0x2
     650:	37440413          	addi	s0,s0,884 # 2374 <_ZL10exit_names>
     654:	00000913          	li	s2,0
#     mut counter = 0;
     658:	00000793          	li	a5,0
#     for (mut i = 0u; i < n; ++i) {
     65c:	0d391a63          	bne	s2,s3,730 <_ZL14print_locationhh+0x1e8>
#       if (counter++) {
#         uart_send_cstr(", ");
#       }
#       uart_send_cstr(exit_names[i]);
#     }
#     if (counter == 0) {
     660:	00079863          	bnez	a5,670 <_ZL14print_locationhh+0x128>
#       uart_send_cstr("none");
     664:	00002537          	lui	a0,0x2
     668:	d0050513          	addi	a0,a0,-768 # 1d00 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x4ac>
     66c:	5ed000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#     }
#     uart_send_cstr("\r\n");
#   }
# }
     670:	04812403          	lw	s0,72(sp)
     674:	04c12083          	lw	ra,76(sp)
     678:	04412483          	lw	s1,68(sp)
     67c:	04012903          	lw	s2,64(sp)
     680:	03c12983          	lw	s3,60(sp)
     684:	03812a03          	lw	s4,56(sp)
     688:	03412a83          	lw	s5,52(sp)
     68c:	03012b03          	lw	s6,48(sp)
     690:	02812c03          	lw	s8,40(sp)
     694:	02412c83          	lw	s9,36(sp)
     698:	02012d03          	lw	s10,32(sp)
     69c:	01c12d83          	lw	s11,28(sp)
#     uart_send_cstr("\r\n");
     6a0:	c7cb8513          	addi	a0,s7,-900
# }
     6a4:	02c12b83          	lw	s7,44(sp)
     6a8:	05010113          	addi	sp,sp,80
#     uart_send_cstr("\r\n");
     6ac:	5ad0006f          	j	1458 <_ZL14uart_send_cstrPKc>
#       f(data[i]);
     6b0:	004bcd03          	lbu	s10,4(s7)
#       if (counter++) {
     6b4:	000a0663          	beqz	s4,6c0 <_ZL14print_locationhh+0x178>
#         uart_send_cstr(", ");
     6b8:	ce0c0513          	addi	a0,s8,-800 # 1ce0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x48c>
     6bc:	59d000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       uart_send_cstr(objects[id].name);
     6c0:	fc0c8793          	addi	a5,s9,-64 # 1fc0 <_ZL7objects>
     6c4:	002d1d13          	slli	s10,s10,0x2
     6c8:	01a787b3          	add	a5,a5,s10
     6cc:	0007a503          	lw	a0,0(a5)
#     for (size_t i = 0; i < len; ++i) {
     6d0:	001a0a13          	addi	s4,s4,1
     6d4:	001b8b93          	addi	s7,s7,1
     6d8:	581000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
     6dc:	efdff06f          	j	5d8 <_ZL14print_locationhh+0x90>
#       f(data[i]);
     6e0:	08844d83          	lbu	s11,136(s0)
#       if (id == eid_exclude_from_output) {
     6e4:	00c12703          	lw	a4,12(sp)
     6e8:	03b70e63          	beq	a4,s11,724 <_ZL14print_locationhh+0x1dc>
#       if (counter++) {
     6ec:	00178d13          	addi	s10,a5,1
     6f0:	00078663          	beqz	a5,6fc <_ZL14print_locationhh+0x1b4>
#         uart_send_cstr(", ");
     6f4:	ce0c8513          	addi	a0,s9,-800
     6f8:	561000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       uart_send_cstr(entities[id].name);
     6fc:	001d9793          	slli	a5,s11,0x1
     700:	01b787b3          	add	a5,a5,s11
     704:	00279793          	slli	a5,a5,0x2
     708:	41b787b3          	sub	a5,a5,s11
     70c:	fd0c0693          	addi	a3,s8,-48
     710:	00279793          	slli	a5,a5,0x2
     714:	00f687b3          	add	a5,a3,a5
     718:	0007a503          	lw	a0,0(a5)
     71c:	53d000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       if (counter++) {
     720:	000d0793          	mv	a5,s10
#     for (size_t i = 0; i < len; ++i) {
     724:	001b0b13          	addi	s6,s6,1
     728:	00140413          	addi	s0,s0,1
     72c:	eedff06f          	j	618 <_ZL14print_locationhh+0xd0>
#     if (ix < len) {
     730:	09c4a703          	lw	a4,156(s1)
     734:	02e97663          	bgeu	s2,a4,760 <_ZL14print_locationhh+0x218>
#       if (!lse.at(i)) {
     738:	094ac703          	lbu	a4,148(s5)
     73c:	02070263          	beqz	a4,760 <_ZL14print_locationhh+0x218>
#       if (counter++) {
     740:	00178a13          	addi	s4,a5,1
     744:	00078863          	beqz	a5,754 <_ZL14print_locationhh+0x20c>
#         uart_send_cstr(", ");
     748:	00002537          	lui	a0,0x2
     74c:	ce050513          	addi	a0,a0,-800 # 1ce0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x48c>
     750:	509000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       uart_send_cstr(exit_names[i]);
     754:	00042503          	lw	a0,0(s0)
     758:	501000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       if (counter++) {
     75c:	000a0793          	mv	a5,s4
#     for (mut i = 0u; i < n; ++i) {
     760:	00190913          	addi	s2,s2,1
     764:	00440413          	addi	s0,s0,4
     768:	001a8a93          	addi	s5,s5,1
     76c:	ef1ff06f          	j	65c <_ZL14print_locationhh+0x114>

00000770 <_ZL16action_inventoryh>:
# 
# static auto action_inventory(entity_id_t const eid) -> void {
     770:	fe010113          	addi	sp,sp,-32
     774:	00912a23          	sw	s1,20(sp)
     778:	00050493          	mv	s1,a0
     77c:	00812c23          	sw	s0,24(sp)
#   uart_send_cstr("u have: ");
     780:	00002537          	lui	a0,0x2
     784:	00149413          	slli	s0,s1,0x1
     788:	00940433          	add	s0,s0,s1
     78c:	d0850513          	addi	a0,a0,-760 # 1d08 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x4b4>
# static auto action_inventory(entity_id_t const eid) -> void {
     790:	01312623          	sw	s3,12(sp)
     794:	01412423          	sw	s4,8(sp)
     798:	01512223          	sw	s5,4(sp)
     79c:	00112e23          	sw	ra,28(sp)
     7a0:	01212823          	sw	s2,16(sp)
     7a4:	00241413          	slli	s0,s0,0x2
#   uart_send_cstr("u have: ");
     7a8:	4b1000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   mut counter = 0;
#   entities[eid].objects.for_each([&counter](let id) {
     7ac:	40940433          	sub	s0,s0,s1
     7b0:	000027b7          	lui	a5,0x2
     7b4:	00241413          	slli	s0,s0,0x2
     7b8:	fd078793          	addi	a5,a5,-48 # 1fd0 <_ZL8entities>
     7bc:	00f40433          	add	s0,s0,a5
#     for (size_t i = 0; i < len; ++i) {
     7c0:	00000493          	li	s1,0
     7c4:	00040993          	mv	s3,s0
#     if (counter++) {
#       uart_send_cstr(", ");
     7c8:	00002a37          	lui	s4,0x2
#     }
#     uart_send_cstr(objects[id].name);
     7cc:	00002ab7          	lui	s5,0x2
     7d0:	0289a783          	lw	a5,40(s3)
     7d4:	04f4e063          	bltu	s1,a5,814 <_ZL16action_inventoryh+0xa4>
#   });
#   if (counter == 0) {
     7d8:	00049863          	bnez	s1,7e8 <_ZL16action_inventoryh+0x78>
#     uart_send_cstr("nothing");
     7dc:	00002537          	lui	a0,0x2
     7e0:	ce450513          	addi	a0,a0,-796 # 1ce4 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x490>
     7e4:	475000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   }
#   uart_send_cstr("\r\n");
# }
     7e8:	01812403          	lw	s0,24(sp)
     7ec:	01c12083          	lw	ra,28(sp)
     7f0:	01412483          	lw	s1,20(sp)
     7f4:	01012903          	lw	s2,16(sp)
     7f8:	00c12983          	lw	s3,12(sp)
     7fc:	00812a03          	lw	s4,8(sp)
     800:	00412a83          	lw	s5,4(sp)
#   uart_send_cstr("\r\n");
     804:	00002537          	lui	a0,0x2
     808:	c7c50513          	addi	a0,a0,-900 # 1c7c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x428>
# }
     80c:	02010113          	addi	sp,sp,32
#   uart_send_cstr("\r\n");
     810:	4490006f          	j	1458 <_ZL14uart_send_cstrPKc>
#       f(data[i]);
     814:	00844903          	lbu	s2,8(s0)
#     if (counter++) {
     818:	00048663          	beqz	s1,824 <_ZL16action_inventoryh+0xb4>
#       uart_send_cstr(", ");
     81c:	ce0a0513          	addi	a0,s4,-800 # 1ce0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x48c>
     820:	439000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#     uart_send_cstr(objects[id].name);
     824:	fc0a8793          	addi	a5,s5,-64 # 1fc0 <_ZL7objects>
     828:	00291913          	slli	s2,s2,0x2
     82c:	012787b3          	add	a5,a5,s2
     830:	0007a503          	lw	a0,0(a5)
#     for (size_t i = 0; i < len; ++i) {
     834:	00148493          	addi	s1,s1,1
     838:	00140413          	addi	s0,s0,1
     83c:	41d000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
     840:	f91ff06f          	j	7d0 <_ZL16action_inventoryh+0x60>

00000844 <_ZL11action_takeh4spanIcE>:
# 
# static auto action_take(entity_id_t const eid, string const args) -> void {
     844:	fa010113          	addi	sp,sp,-96
     848:	04112e23          	sw	ra,92(sp)
     84c:	04812c23          	sw	s0,88(sp)
     850:	04912a23          	sw	s1,84(sp)
     854:	05212823          	sw	s2,80(sp)
     858:	05312623          	sw	s3,76(sp)
     85c:	05412423          	sw	s4,72(sp)
     860:	05512223          	sw	s5,68(sp)
     864:	05612023          	sw	s6,64(sp)
     868:	03712e23          	sw	s7,60(sp)
     86c:	03812c23          	sw	s8,56(sp)
     870:	03912a23          	sw	s9,52(sp)
     874:	03a12823          	sw	s10,48(sp)
     878:	03b12623          	sw	s11,44(sp)
     87c:	00b12423          	sw	a1,8(sp)
     880:	00c12623          	sw	a2,12(sp)
#   if (args.is_empty()) {
     884:	04b61463          	bne	a2,a1,8cc <_ZL11action_takeh4spanIcE+0x88>
#     uart_send_cstr("take what\r\n\r\n");
     888:	00002537          	lui	a0,0x2
     88c:	d1450513          	addi	a0,a0,-748 # 1d14 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x4c0>
#   }
# 
#   if (ent.objects.add(lso.at(pos))) {
#     lso.remove_at(pos);
#   }
# }
     890:	05812403          	lw	s0,88(sp)
     894:	05c12083          	lw	ra,92(sp)
     898:	05412483          	lw	s1,84(sp)
     89c:	05012903          	lw	s2,80(sp)
     8a0:	04c12983          	lw	s3,76(sp)
     8a4:	04812a03          	lw	s4,72(sp)
     8a8:	04412a83          	lw	s5,68(sp)
     8ac:	04012b03          	lw	s6,64(sp)
     8b0:	03c12b83          	lw	s7,60(sp)
     8b4:	03812c03          	lw	s8,56(sp)
     8b8:	03412c83          	lw	s9,52(sp)
     8bc:	03012d03          	lw	s10,48(sp)
     8c0:	02c12d83          	lw	s11,44(sp)
     8c4:	06010113          	addi	sp,sp,96
#     uart_send_cstr(" not here\r\n\r\n");
     8c8:	3910006f          	j	1458 <_ZL14uart_send_cstrPKc>
#   mut &lso = locations[ent.location].objects;
     8cc:	00151493          	slli	s1,a0,0x1
     8d0:	00a487b3          	add	a5,s1,a0
     8d4:	00279793          	slli	a5,a5,0x2
     8d8:	000026b7          	lui	a3,0x2
     8dc:	40a787b3          	sub	a5,a5,a0
     8e0:	fd068713          	addi	a4,a3,-48 # 1fd0 <_ZL8entities>
     8e4:	00279793          	slli	a5,a5,0x2
     8e8:	00f707b3          	add	a5,a4,a5
     8ec:	0047cc03          	lbu	s8,4(a5)
#     for (; i < len; ++i) {
     8f0:	00002ab7          	lui	s5,0x2
     8f4:	054a8793          	addi	a5,s5,84 # 2054 <_ZL9locations>
     8f8:	002c1b13          	slli	s6,s8,0x2
     8fc:	018b0733          	add	a4,s6,s8
     900:	00571713          	slli	a4,a4,0x5
     904:	00e78933          	add	s2,a5,a4
     908:	08492a03          	lw	s4,132(s2)
     90c:	00050b93          	mv	s7,a0
     910:	00058d13          	mv	s10,a1
     914:	00060c93          	mv	s9,a2
     918:	00090d93          	mv	s11,s2
#     size_t i = 0;
     91c:	00000413          	li	s0,0
     920:	fd068993          	addi	s3,a3,-48
     924:	054a8a93          	addi	s5,s5,84
#     for (; i < len; ++i) {
     928:	000026b7          	lui	a3,0x2
     92c:	03441063          	bne	s0,s4,94c <_ZL11action_takeh4spanIcE+0x108>
#   str.for_each([](char const ch) { uart_send_char(ch); });
     930:	01810513          	addi	a0,sp,24
     934:	01a12c23          	sw	s10,24(sp)
     938:	01912e23          	sw	s9,28(sp)
     93c:	719000ef          	jal	1854 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0>
#     uart_send_cstr(" not here\r\n\r\n");
     940:	00002537          	lui	a0,0x2
     944:	d2450513          	addi	a0,a0,-732 # 1d24 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x4d0>
     948:	f49ff06f          	j	890 <_ZL11action_takeh4spanIcE+0x4c>
#     if (string_equals_cstr(args, objects[oid].name)) {
     94c:	004dc703          	lbu	a4,4(s11)
     950:	fc068793          	addi	a5,a3,-64 # 1fc0 <_ZL7objects>
     954:	00812503          	lw	a0,8(sp)
     958:	00271713          	slli	a4,a4,0x2
     95c:	00e787b3          	add	a5,a5,a4
     960:	0007a603          	lw	a2,0(a5)
     964:	00c12583          	lw	a1,12(sp)
     968:	001d8d93          	addi	s11,s11,1
     96c:	f60ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     970:	00051663          	bnez	a0,97c <_ZL11action_takeh4spanIcE+0x138>
     974:	00140413          	addi	s0,s0,1
     978:	fb1ff06f          	j	928 <_ZL11action_takeh4spanIcE+0xe4>
#     return {};
     97c:	00000713          	li	a4,0
#     if (pos.index < len) {
     980:	01447c63          	bgeu	s0,s4,998 <_ZL11action_takeh4spanIcE+0x154>
#       return data[pos.index];
     984:	018b06b3          	add	a3,s6,s8
     988:	00569693          	slli	a3,a3,0x5
     98c:	00da86b3          	add	a3,s5,a3
     990:	008686b3          	add	a3,a3,s0
     994:	0046c703          	lbu	a4,4(a3)
#     if (len == Size - 1) {
     998:	017484b3          	add	s1,s1,s7
     99c:	00249493          	slli	s1,s1,0x2
     9a0:	417484b3          	sub	s1,s1,s7
     9a4:	00249493          	slli	s1,s1,0x2
     9a8:	009986b3          	add	a3,s3,s1
     9ac:	0286a783          	lw	a5,40(a3)
     9b0:	01f00613          	li	a2,31
     9b4:	02c78c63          	beq	a5,a2,9ec <_ZL11action_takeh4spanIcE+0x1a8>
#     data[len] = elem;
     9b8:	00f68633          	add	a2,a3,a5
#     ++len;
     9bc:	00178793          	addi	a5,a5,1
#     data[len] = elem;
     9c0:	00e60423          	sb	a4,8(a2)
#     ++len;
     9c4:	02f6a423          	sw	a5,40(a3)
#     if (pos.index >= len) {
     9c8:	03447263          	bgeu	s0,s4,9ec <_ZL11action_takeh4spanIcE+0x1a8>
#     --len;
     9cc:	018b07b3          	add	a5,s6,s8
     9d0:	00579793          	slli	a5,a5,0x5
     9d4:	00fa8ab3          	add	s5,s5,a5
     9d8:	fffa0713          	addi	a4,s4,-1
     9dc:	08eaa223          	sw	a4,132(s5)
     9e0:	008907b3          	add	a5,s2,s0
#     for (size_t i = pos.index; i < len; ++i) {
     9e4:	00178793          	addi	a5,a5,1
     9e8:	04e46063          	bltu	s0,a4,a28 <_ZL11action_takeh4spanIcE+0x1e4>
# }
     9ec:	05c12083          	lw	ra,92(sp)
     9f0:	05812403          	lw	s0,88(sp)
     9f4:	05412483          	lw	s1,84(sp)
     9f8:	05012903          	lw	s2,80(sp)
     9fc:	04c12983          	lw	s3,76(sp)
     a00:	04812a03          	lw	s4,72(sp)
     a04:	04412a83          	lw	s5,68(sp)
     a08:	04012b03          	lw	s6,64(sp)
     a0c:	03c12b83          	lw	s7,60(sp)
     a10:	03812c03          	lw	s8,56(sp)
     a14:	03412c83          	lw	s9,52(sp)
     a18:	03012d03          	lw	s10,48(sp)
     a1c:	02c12d83          	lw	s11,44(sp)
     a20:	06010113          	addi	sp,sp,96
     a24:	00008067          	ret
#       data[i] = data[i + 1];
     a28:	0047c683          	lbu	a3,4(a5)
     a2c:	00140413          	addi	s0,s0,1
     a30:	00d781a3          	sb	a3,3(a5)
#     for (size_t i = pos.index; i < len; ++i) {
     a34:	fb1ff06f          	j	9e4 <_ZL11action_takeh4spanIcE+0x1a0>

00000a38 <_ZL11action_droph4spanIcE>:
# 
# static auto action_drop(entity_id_t const eid, string const args) -> void {
     a38:	fb010113          	addi	sp,sp,-80
     a3c:	04112623          	sw	ra,76(sp)
     a40:	04812423          	sw	s0,72(sp)
     a44:	04912223          	sw	s1,68(sp)
     a48:	05212023          	sw	s2,64(sp)
     a4c:	03312e23          	sw	s3,60(sp)
     a50:	03412c23          	sw	s4,56(sp)
     a54:	03512a23          	sw	s5,52(sp)
     a58:	03612823          	sw	s6,48(sp)
     a5c:	03712623          	sw	s7,44(sp)
     a60:	03812423          	sw	s8,40(sp)
     a64:	03912223          	sw	s9,36(sp)
     a68:	00b12423          	sw	a1,8(sp)
     a6c:	00c12623          	sw	a2,12(sp)
#   if (args.size() == 0) {
     a70:	04b61063          	bne	a2,a1,ab0 <_ZL11action_droph4spanIcE+0x78>
#     uart_send_cstr("drop what\r\n\r\n");
     a74:	00002537          	lui	a0,0x2
     a78:	d3450513          	addi	a0,a0,-716 # 1d34 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x4e0>
#   }
# 
#   if (locations[ent.location].objects.add(lso.at(pos))) {
#     lso.remove_at(pos);
#   }
# }
     a7c:	04812403          	lw	s0,72(sp)
     a80:	04c12083          	lw	ra,76(sp)
     a84:	04412483          	lw	s1,68(sp)
     a88:	04012903          	lw	s2,64(sp)
     a8c:	03c12983          	lw	s3,60(sp)
     a90:	03812a03          	lw	s4,56(sp)
     a94:	03412a83          	lw	s5,52(sp)
     a98:	03012b03          	lw	s6,48(sp)
     a9c:	02c12b83          	lw	s7,44(sp)
     aa0:	02812c03          	lw	s8,40(sp)
     aa4:	02412c83          	lw	s9,36(sp)
     aa8:	05010113          	addi	sp,sp,80
#     uart_send_cstr("\r\n\r\n");
     aac:	1ad0006f          	j	1458 <_ZL14uart_send_cstrPKc>
#     for (; i < len; ++i) {
     ab0:	00151413          	slli	s0,a0,0x1
     ab4:	00a40733          	add	a4,s0,a0
     ab8:	00271713          	slli	a4,a4,0x2
     abc:	00002ab7          	lui	s5,0x2
     ac0:	40a70733          	sub	a4,a4,a0
     ac4:	fd0a8793          	addi	a5,s5,-48 # 1fd0 <_ZL8entities>
     ac8:	00271713          	slli	a4,a4,0x2
     acc:	00e78933          	add	s2,a5,a4
     ad0:	02892a03          	lw	s4,40(s2)
     ad4:	00050993          	mv	s3,a0
     ad8:	00058b93          	mv	s7,a1
     adc:	00060b13          	mv	s6,a2
     ae0:	00090c13          	mv	s8,s2
#     size_t i = 0;
     ae4:	00000493          	li	s1,0
     ae8:	fd0a8a93          	addi	s5,s5,-48
#     if (string_equals_cstr(args, objects[oid].name)) {
     aec:	00002cb7          	lui	s9,0x2
#     for (; i < len; ++i) {
     af0:	03449663          	bne	s1,s4,b1c <_ZL11action_droph4spanIcE+0xe4>
#     uart_send_cstr("u don't have ");
     af4:	00002537          	lui	a0,0x2
     af8:	d4450513          	addi	a0,a0,-700 # 1d44 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x4f0>
     afc:	15d000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   str.for_each([](char const ch) { uart_send_char(ch); });
     b00:	01810513          	addi	a0,sp,24
     b04:	01712c23          	sw	s7,24(sp)
     b08:	01612e23          	sw	s6,28(sp)
     b0c:	549000ef          	jal	1854 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0>
#     uart_send_cstr("\r\n\r\n");
     b10:	00002537          	lui	a0,0x2
     b14:	8c050513          	addi	a0,a0,-1856 # 18c0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6c>
     b18:	f65ff06f          	j	a7c <_ZL11action_droph4spanIcE+0x44>
#     if (string_equals_cstr(args, objects[oid].name)) {
     b1c:	008c4703          	lbu	a4,8(s8)
     b20:	fc0c8793          	addi	a5,s9,-64 # 1fc0 <_ZL7objects>
     b24:	00812503          	lw	a0,8(sp)
     b28:	00271713          	slli	a4,a4,0x2
     b2c:	00e787b3          	add	a5,a5,a4
     b30:	0007a603          	lw	a2,0(a5)
     b34:	00c12583          	lw	a1,12(sp)
     b38:	001c0c13          	addi	s8,s8,1
     b3c:	d90ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     b40:	00051663          	bnez	a0,b4c <_ZL11action_droph4spanIcE+0x114>
     b44:	00148493          	addi	s1,s1,1
     b48:	fa9ff06f          	j	af0 <_ZL11action_droph4spanIcE+0xb8>
#   if (locations[ent.location].objects.add(lso.at(pos))) {
     b4c:	013407b3          	add	a5,s0,s3
     b50:	00279793          	slli	a5,a5,0x2
     b54:	413787b3          	sub	a5,a5,s3
     b58:	00279793          	slli	a5,a5,0x2
     b5c:	00fa87b3          	add	a5,s5,a5
     b60:	0047c603          	lbu	a2,4(a5)
#     return {};
     b64:	00000693          	li	a3,0
#     if (pos.index < len) {
     b68:	0144f663          	bgeu	s1,s4,b74 <_ZL11action_droph4spanIcE+0x13c>
#       return data[pos.index];
     b6c:	009787b3          	add	a5,a5,s1
     b70:	0087c683          	lbu	a3,8(a5)
#     if (len == Size - 1) {
     b74:	00261713          	slli	a4,a2,0x2
     b78:	00c70733          	add	a4,a4,a2
     b7c:	000027b7          	lui	a5,0x2
     b80:	00571713          	slli	a4,a4,0x5
     b84:	05478793          	addi	a5,a5,84 # 2054 <_ZL9locations>
     b88:	00e787b3          	add	a5,a5,a4
     b8c:	0847a703          	lw	a4,132(a5)
     b90:	07f00613          	li	a2,127
     b94:	04c70063          	beq	a4,a2,bd4 <_ZL11action_droph4spanIcE+0x19c>
#     data[len] = elem;
     b98:	00e78633          	add	a2,a5,a4
#     ++len;
     b9c:	00170713          	addi	a4,a4,1
#     data[len] = elem;
     ba0:	00d60223          	sb	a3,4(a2)
#     ++len;
     ba4:	08e7a223          	sw	a4,132(a5)
#     if (pos.index >= len) {
     ba8:	0344f663          	bgeu	s1,s4,bd4 <_ZL11action_droph4spanIcE+0x19c>
#     --len;
     bac:	01340433          	add	s0,s0,s3
     bb0:	00241413          	slli	s0,s0,0x2
     bb4:	41340433          	sub	s0,s0,s3
     bb8:	00241413          	slli	s0,s0,0x2
     bbc:	fffa0a13          	addi	s4,s4,-1
     bc0:	008a8ab3          	add	s5,s5,s0
     bc4:	034aa423          	sw	s4,40(s5)
     bc8:	009907b3          	add	a5,s2,s1
#     for (size_t i = pos.index; i < len; ++i) {
     bcc:	00178793          	addi	a5,a5,1
     bd0:	0344ec63          	bltu	s1,s4,c08 <_ZL11action_droph4spanIcE+0x1d0>
# }
     bd4:	04c12083          	lw	ra,76(sp)
     bd8:	04812403          	lw	s0,72(sp)
     bdc:	04412483          	lw	s1,68(sp)
     be0:	04012903          	lw	s2,64(sp)
     be4:	03c12983          	lw	s3,60(sp)
     be8:	03812a03          	lw	s4,56(sp)
     bec:	03412a83          	lw	s5,52(sp)
     bf0:	03012b03          	lw	s6,48(sp)
     bf4:	02c12b83          	lw	s7,44(sp)
     bf8:	02812c03          	lw	s8,40(sp)
     bfc:	02412c83          	lw	s9,36(sp)
     c00:	05010113          	addi	sp,sp,80
     c04:	00008067          	ret
#       data[i] = data[i + 1];
     c08:	0087c703          	lbu	a4,8(a5)
     c0c:	00148493          	addi	s1,s1,1
     c10:	00e783a3          	sb	a4,7(a5)
#     for (size_t i = pos.index; i < len; ++i) {
     c14:	fb9ff06f          	j	bcc <_ZL11action_droph4spanIcE+0x194>

00000c18 <_ZL9action_gohh>:
# 
# static auto action_go(entity_id_t const eid, exit_t const exit) -> void {
#   mut &ent = entities[eid];
#   mut &loc = locations[ent.location];
     c18:	00151793          	slli	a5,a0,0x1
     c1c:	00a78733          	add	a4,a5,a0
     c20:	00271713          	slli	a4,a4,0x2
     c24:	000028b7          	lui	a7,0x2
     c28:	40a70733          	sub	a4,a4,a0
     c2c:	fd088693          	addi	a3,a7,-48 # 1fd0 <_ZL8entities>
     c30:	00271713          	slli	a4,a4,0x2
     c34:	00e68733          	add	a4,a3,a4
     c38:	00474683          	lbu	a3,4(a4)
#     if (ix < len) {
     c3c:	00002637          	lui	a2,0x2
     c40:	05460713          	addi	a4,a2,84 # 2054 <_ZL9locations>
     c44:	00269813          	slli	a6,a3,0x2
     c48:	00d80833          	add	a6,a6,a3
     c4c:	00581693          	slli	a3,a6,0x5
     c50:	00d70733          	add	a4,a4,a3
     c54:	09c72683          	lw	a3,156(a4)
     c58:	fd088e13          	addi	t3,a7,-48
     c5c:	05460613          	addi	a2,a2,84
     c60:	00d5f863          	bgeu	a1,a3,c70 <_ZL9action_gohh+0x58>
#       return data[ix];
     c64:	00b705b3          	add	a1,a4,a1
     c68:	0945c883          	lbu	a7,148(a1)
#   let to = loc.exits.at(exit);
#   if (!to) {
     c6c:	00089863          	bnez	a7,c7c <_ZL9action_gohh+0x64>
#     uart_send_cstr("cannot go there\r\n\r\n");
     c70:	00002537          	lui	a0,0x2
     c74:	d5450513          	addi	a0,a0,-684 # 1d54 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x500>
     c78:	7e00006f          	j	1458 <_ZL14uart_send_cstrPKc>
#     if (len == Size - 1) {
     c7c:	00289693          	slli	a3,a7,0x2
     c80:	011686b3          	add	a3,a3,a7
     c84:	00569693          	slli	a3,a3,0x5
     c88:	00d606b3          	add	a3,a2,a3
     c8c:	0906a583          	lw	a1,144(a3)
     c90:	00700313          	li	t1,7
     c94:	08658063          	beq	a1,t1,d14 <_ZL9action_gohh+0xfc>
#     data[len] = elem;
     c98:	00b68333          	add	t1,a3,a1
#     ++len;
     c9c:	00158593          	addi	a1,a1,1
#     data[len] = elem;
     ca0:	08a30423          	sb	a0,136(t1)
#     ++len;
     ca4:	08b6a823          	sw	a1,144(a3)
     ca8:	00070313          	mv	t1,a4
#     for (size_t i = 0; i < len; ++i) {
     cac:	00000693          	li	a3,0
     cb0:	09072583          	lw	a1,144(a4)
     cb4:	02b6fa63          	bgeu	a3,a1,ce8 <_ZL9action_gohh+0xd0>
#       if (data[i] != elem) {
     cb8:	08834e83          	lbu	t4,136(t1)
     cbc:	00130313          	addi	t1,t1,1
     cc0:	00ae8663          	beq	t4,a0,ccc <_ZL9action_gohh+0xb4>
#     for (size_t i = 0; i < len; ++i) {
     cc4:	00168693          	addi	a3,a3,1
     cc8:	fe9ff06f          	j	cb0 <_ZL9action_gohh+0x98>
#       --len;
     ccc:	00581813          	slli	a6,a6,0x5
     cd0:	fff58593          	addi	a1,a1,-1
     cd4:	01060633          	add	a2,a2,a6
     cd8:	08b62823          	sw	a1,144(a2)
     cdc:	00d70733          	add	a4,a4,a3
#       for (size_t j = i; j < len; ++j) {
     ce0:	00170713          	addi	a4,a4,1
     ce4:	02b6e063          	bltu	a3,a1,d04 <_ZL9action_gohh+0xec>
#     return;
#   }
#   if (locations[to].entities.add(eid)) {
#     loc.entities.remove(eid);
#     ent.location = to;
     ce8:	00a787b3          	add	a5,a5,a0
     cec:	00279793          	slli	a5,a5,0x2
     cf0:	40a787b3          	sub	a5,a5,a0
     cf4:	00279793          	slli	a5,a5,0x2
     cf8:	00fe07b3          	add	a5,t3,a5
     cfc:	01178223          	sb	a7,4(a5)
     d00:	00008067          	ret
#         data[j] = data[j + 1];
     d04:	08874603          	lbu	a2,136(a4)
     d08:	00168693          	addi	a3,a3,1
     d0c:	08c703a3          	sb	a2,135(a4)
#       for (size_t j = i; j < len; ++j) {
     d10:	fd1ff06f          	j	ce0 <_ZL9action_gohh+0xc8>
#   }
# }
     d14:	00008067          	ret

00000d18 <_ZL11action_giveh4spanIcE>:
# 
# static auto action_give(entity_id_t const eid, string args) -> void {
     d18:	f7010113          	addi	sp,sp,-144
     d1c:	07412c23          	sw	s4,120(sp)
     d20:	00050a13          	mv	s4,a0
#   let w1 = string_next_word(args);
     d24:	03010513          	addi	a0,sp,48
# static auto action_give(entity_id_t const eid, string args) -> void {
     d28:	08912223          	sw	s1,132(sp)
     d2c:	09212023          	sw	s2,128(sp)
     d30:	08112623          	sw	ra,140(sp)
     d34:	08812423          	sw	s0,136(sp)
     d38:	07312e23          	sw	s3,124(sp)
     d3c:	07512a23          	sw	s5,116(sp)
     d40:	07612823          	sw	s6,112(sp)
     d44:	07712623          	sw	s7,108(sp)
     d48:	07812423          	sw	s8,104(sp)
     d4c:	07912223          	sw	s9,100(sp)
     d50:	07a12023          	sw	s10,96(sp)
     d54:	05b12e23          	sw	s11,92(sp)
     d58:	00b12423          	sw	a1,8(sp)
     d5c:	00c12623          	sw	a2,12(sp)
#   let w1 = string_next_word(args);
     d60:	bd4ff0ef          	jal	134 <_ZL16string_next_word4spanIcE>
#   let obj_nm = w1.word;
     d64:	03012483          	lw	s1,48(sp)
     d68:	03412903          	lw	s2,52(sp)
     d6c:	00912c23          	sw	s1,24(sp)
     d70:	01212e23          	sw	s2,28(sp)
#   if (obj_nm.is_empty()) {
     d74:	04991463          	bne	s2,s1,dbc <_ZL11action_giveh4spanIcE+0xa4>
#     uart_send_cstr("give what\r\n\r\n");
     d78:	00002537          	lui	a0,0x2
     d7c:	d6850513          	addi	a0,a0,-664 # 1d68 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x514>
#     uart_send_cstr(" not in inventory\r\n\r\n");
#     return;
#   }
#   string_print(to_ent_nm);
#   uart_send_cstr(" is not here\r\n\r\n");
# }
     d80:	08812403          	lw	s0,136(sp)
     d84:	08c12083          	lw	ra,140(sp)
     d88:	08412483          	lw	s1,132(sp)
     d8c:	08012903          	lw	s2,128(sp)
     d90:	07c12983          	lw	s3,124(sp)
     d94:	07812a03          	lw	s4,120(sp)
     d98:	07412a83          	lw	s5,116(sp)
     d9c:	07012b03          	lw	s6,112(sp)
     da0:	06c12b83          	lw	s7,108(sp)
     da4:	06812c03          	lw	s8,104(sp)
     da8:	06412c83          	lw	s9,100(sp)
     dac:	06012d03          	lw	s10,96(sp)
     db0:	05c12d83          	lw	s11,92(sp)
     db4:	09010113          	addi	sp,sp,144
#   uart_send_cstr(" is not here\r\n\r\n");
     db8:	6a00006f          	j	1458 <_ZL14uart_send_cstrPKc>
#   let w2 = string_next_word(w1.rem);
     dbc:	03812583          	lw	a1,56(sp)
     dc0:	03c12603          	lw	a2,60(sp)
     dc4:	04010513          	addi	a0,sp,64
     dc8:	b6cff0ef          	jal	134 <_ZL16string_next_word4spanIcE>
#   let to_ent_nm = w2.word;
     dcc:	04012c03          	lw	s8,64(sp)
     dd0:	04412b83          	lw	s7,68(sp)
     dd4:	03812023          	sw	s8,32(sp)
     dd8:	03712223          	sw	s7,36(sp)
#   if (to_ent_nm.is_empty()) {
     ddc:	018b9863          	bne	s7,s8,dec <_ZL11action_giveh4spanIcE+0xd4>
#     uart_send_cstr("give to whom\r\n\r\n");
     de0:	00002537          	lui	a0,0x2
     de4:	d7850513          	addi	a0,a0,-648 # 1d78 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x524>
     de8:	f99ff06f          	j	d80 <_ZL11action_giveh4spanIcE+0x68>
#   let &loc = locations[ent.location];
     dec:	001a1b13          	slli	s6,s4,0x1
     df0:	014b07b3          	add	a5,s6,s4
     df4:	00279793          	slli	a5,a5,0x2
     df8:	00002ab7          	lui	s5,0x2
     dfc:	414787b3          	sub	a5,a5,s4
     e00:	fd0a8713          	addi	a4,s5,-48 # 1fd0 <_ZL8entities>
     e04:	00279793          	slli	a5,a5,0x2
     e08:	00f707b3          	add	a5,a4,a5
     e0c:	0047c703          	lbu	a4,4(a5)
#   auto length() const -> size_t { return len; }
     e10:	00002437          	lui	s0,0x2
     e14:	05440413          	addi	s0,s0,84 # 2054 <_ZL9locations>
     e18:	00271793          	slli	a5,a4,0x2
     e1c:	00e787b3          	add	a5,a5,a4
     e20:	00579793          	slli	a5,a5,0x5
     e24:	00f40433          	add	s0,s0,a5
     e28:	09042d83          	lw	s11,144(s0)
#   for (mut i = 0u; i < n; ++i) {
     e2c:	00000d13          	li	s10,0
     e30:	fd0a8a93          	addi	s5,s5,-48
     e34:	03bd1063          	bne	s10,s11,e54 <_ZL11action_giveh4spanIcE+0x13c>
#   str.for_each([](char const ch) { uart_send_char(ch); });
     e38:	02810513          	addi	a0,sp,40
     e3c:	03812423          	sw	s8,40(sp)
     e40:	03712623          	sw	s7,44(sp)
     e44:	211000ef          	jal	1854 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0>
#   uart_send_cstr(" is not here\r\n\r\n");
     e48:	00002537          	lui	a0,0x2
     e4c:	da450513          	addi	a0,a0,-604 # 1da4 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x550>
     e50:	f31ff06f          	j	d80 <_ZL11action_giveh4spanIcE+0x68>
#     mut &to = entities[lse.at(i)];
     e54:	08844c83          	lbu	s9,136(s0)
#     if (!string_equals_cstr(to_ent_nm, to.name)) {
     e58:	000c0513          	mv	a0,s8
     e5c:	000b8593          	mv	a1,s7
     e60:	001c9993          	slli	s3,s9,0x1
     e64:	019987b3          	add	a5,s3,s9
     e68:	00279793          	slli	a5,a5,0x2
     e6c:	419787b3          	sub	a5,a5,s9
     e70:	00279793          	slli	a5,a5,0x2
     e74:	00fa87b3          	add	a5,s5,a5
     e78:	0007a603          	lw	a2,0(a5)
     e7c:	03812023          	sw	s8,32(sp)
     e80:	03712223          	sw	s7,36(sp)
     e84:	a48ff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     e88:	00051863          	bnez	a0,e98 <_ZL11action_giveh4spanIcE+0x180>
     e8c:	00140413          	addi	s0,s0,1
#   for (mut i = 0u; i < n; ++i) {
     e90:	001d0d13          	addi	s10,s10,1
     e94:	fa1ff06f          	j	e34 <_ZL11action_giveh4spanIcE+0x11c>
     e98:	014b07b3          	add	a5,s6,s4
     e9c:	00279793          	slli	a5,a5,0x2
     ea0:	414787b3          	sub	a5,a5,s4
     ea4:	00279793          	slli	a5,a5,0x2
     ea8:	00fa8433          	add	s0,s5,a5
     eac:	02842d83          	lw	s11,40(s0)
#     for (mut j = 0u; j < m; j++) {
     eb0:	00040c13          	mv	s8,s0
     eb4:	00000b93          	li	s7,0
     eb8:	00002737          	lui	a4,0x2
     ebc:	03bb9063          	bne	s7,s11,edc <_ZL11action_giveh4spanIcE+0x1c4>
#   str.for_each([](char const ch) { uart_send_char(ch); });
     ec0:	02810513          	addi	a0,sp,40
     ec4:	02912423          	sw	s1,40(sp)
     ec8:	03212623          	sw	s2,44(sp)
     ecc:	189000ef          	jal	1854 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0>
#     uart_send_cstr(" not in inventory\r\n\r\n");
     ed0:	00002537          	lui	a0,0x2
     ed4:	d8c50513          	addi	a0,a0,-628 # 1d8c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x538>
     ed8:	ea9ff06f          	j	d80 <_ZL11action_giveh4spanIcE+0x68>
#       return data[ix];
     edc:	008c4d03          	lbu	s10,8(s8)
#       if (!string_equals_cstr(obj_nm, objects[oid].name)) {
     ee0:	fc070793          	addi	a5,a4,-64 # 1fc0 <_ZL7objects>
     ee4:	00048513          	mv	a0,s1
     ee8:	002d1693          	slli	a3,s10,0x2
     eec:	00d787b3          	add	a5,a5,a3
     ef0:	0007a603          	lw	a2,0(a5)
     ef4:	00090593          	mv	a1,s2
     ef8:	00912c23          	sw	s1,24(sp)
     efc:	01212e23          	sw	s2,28(sp)
     f00:	9ccff0ef          	jal	cc <_ZL18string_equals_cstr4spanIcEPKc>
     f04:	00051863          	bnez	a0,f14 <_ZL11action_giveh4spanIcE+0x1fc>
     f08:	001c0c13          	addi	s8,s8,1
#     for (mut j = 0u; j < m; j++) {
     f0c:	001b8b93          	addi	s7,s7,1
     f10:	fa9ff06f          	j	eb8 <_ZL11action_giveh4spanIcE+0x1a0>
#     if (len == Size - 1) {
     f14:	019987b3          	add	a5,s3,s9
     f18:	00279793          	slli	a5,a5,0x2
     f1c:	419787b3          	sub	a5,a5,s9
     f20:	00279793          	slli	a5,a5,0x2
     f24:	00fa87b3          	add	a5,s5,a5
     f28:	0287a703          	lw	a4,40(a5)
     f2c:	01f00693          	li	a3,31
     f30:	04d70263          	beq	a4,a3,f74 <_ZL11action_giveh4spanIcE+0x25c>
#     if (ix >= len) {
     f34:	014b0533          	add	a0,s6,s4
     f38:	00251513          	slli	a0,a0,0x2
     f3c:	41450533          	sub	a0,a0,s4
#     data[len] = elem;
     f40:	00e786b3          	add	a3,a5,a4
#     if (ix >= len) {
     f44:	00251513          	slli	a0,a0,0x2
#     ++len;
     f48:	00170713          	addi	a4,a4,1
     f4c:	02e7a423          	sw	a4,40(a5)
#     if (ix >= len) {
     f50:	00aa8533          	add	a0,s5,a0
     f54:	02852703          	lw	a4,40(a0)
#     data[len] = elem;
     f58:	01a68423          	sb	s10,8(a3)
#     if (ix >= len) {
     f5c:	00ebfc63          	bgeu	s7,a4,f74 <_ZL11action_giveh4spanIcE+0x25c>
#     --len;
     f60:	fff70713          	addi	a4,a4,-1
     f64:	02e52423          	sw	a4,40(a0)
     f68:	017407b3          	add	a5,s0,s7
#     for (size_t i = ix; i < len; ++i) {
     f6c:	00178793          	addi	a5,a5,1
     f70:	04ebe063          	bltu	s7,a4,fb0 <_ZL11action_giveh4spanIcE+0x298>
# }
     f74:	08c12083          	lw	ra,140(sp)
     f78:	08812403          	lw	s0,136(sp)
     f7c:	08412483          	lw	s1,132(sp)
     f80:	08012903          	lw	s2,128(sp)
     f84:	07c12983          	lw	s3,124(sp)
     f88:	07812a03          	lw	s4,120(sp)
     f8c:	07412a83          	lw	s5,116(sp)
     f90:	07012b03          	lw	s6,112(sp)
     f94:	06c12b83          	lw	s7,108(sp)
     f98:	06812c03          	lw	s8,104(sp)
     f9c:	06412c83          	lw	s9,100(sp)
     fa0:	06012d03          	lw	s10,96(sp)
     fa4:	05c12d83          	lw	s11,92(sp)
     fa8:	09010113          	addi	sp,sp,144
     fac:	00008067          	ret
#       data[i] = data[i + 1];
     fb0:	0087c683          	lbu	a3,8(a5)
     fb4:	001b8b93          	addi	s7,s7,1
     fb8:	00d783a3          	sb	a3,7(a5)
#     for (size_t i = ix; i < len; ++i) {
     fbc:	fb1ff06f          	j	f6c <_ZL11action_giveh4spanIcE+0x254>

00000fc0 <_ZL10print_helpv>:
# 
# static auto print_help() -> void {
#   uart_send_cstr(
     fc0:	00002537          	lui	a0,0x2
     fc4:	db850513          	addi	a0,a0,-584 # 1db8 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x564>
     fc8:	4900006f          	j	1458 <_ZL14uart_send_cstrPKc>

00000fcc <_ZL27input_escape_sequence_clearv>:
# }
# 
# static char input_escape_sequence[8];
# static auto input_escape_sequence_clear() -> void {
#   for (mut i = 0u; i < sizeof(input_escape_sequence); ++i) {
#     input_escape_sequence[i] = '\0';
     fcc:	000027b7          	lui	a5,0x2
     fd0:	3807aa23          	sw	zero,916(a5) # 2394 <_ZL21input_escape_sequence>
     fd4:	39478793          	addi	a5,a5,916
     fd8:	0007a223          	sw	zero,4(a5)
#   }
# }
     fdc:	00008067          	ret

00000fe0 <_ZL5inputR14command_buffer>:
# 
# enum class input_state { NORMAL, ESCAPE, ESCAPE_BRACKET };
# 
# static auto input(command_buffer &cmd_buf) -> void {
     fe0:	fd010113          	addi	sp,sp,-48
     fe4:	02812423          	sw	s0,40(sp)
     fe8:	02912223          	sw	s1,36(sp)
     fec:	01312e23          	sw	s3,28(sp)
     ff0:	01412c23          	sw	s4,24(sp)
     ff4:	01512a23          	sw	s5,20(sp)
     ff8:	01612823          	sw	s6,16(sp)
     ffc:	01712623          	sw	s7,12(sp)
    1000:	01812423          	sw	s8,8(sp)
    1004:	01912223          	sw	s9,4(sp)
    1008:	01a12023          	sw	s10,0(sp)
    100c:	02112623          	sw	ra,44(sp)
    1010:	03212023          	sw	s2,32(sp)
    1014:	00050413          	mv	s0,a0
#   auto reset() -> void { cursor_ = end_ = 0; }
    1018:	040508a3          	sb	zero,81(a0)
    101c:	04050823          	sb	zero,80(a0)
#   cmd_buf.reset();
#   mut state = input_state::NORMAL;
#   mut escape_sequence_parameter = 0;
    1020:	00000d13          	li	s10,0
#   mut state = input_state::NORMAL;
    1024:	00000493          	li	s1,0
# 
#   while (true) {
#     let ch = uart_read_char();
#     led_set(~ch);
#     switch (state) {
    1028:	00100993          	li	s3,1
    102c:	00200a13          	li	s4,2
#         state = input_state::NORMAL;
#       }
#       break;
# 
#     case input_state::ESCAPE_BRACKET:
#       if (ch >= '0' && ch <= '9') {
    1030:	00900a93          	li	s5,9
#         escape_sequence_parameter = escape_sequence_parameter * 10 + (ch - '0');
#       } else {
#         switch (ch) {
    1034:	04400b13          	li	s6,68
#         case 'D': // arrow left
#           if (cmd_buf.move_cursor_left()) {
#             uart_send_cstr("\x1B[D");
    1038:	00002bb7          	lui	s7,0x2
#         switch (ch) {
    103c:	07e00c13          	li	s8,126
#             uart_send_cstr("\x1B[C");
#           }
#           break;
# 
#         case '~': // delete
#           if (escape_sequence_parameter == 3) {
    1040:	00300c93          	li	s9,3
#     let ch = uart_read_char();
    1044:	44c000ef          	jal	1490 <_ZL14uart_read_charv>
#     led_set(~ch);
    1048:	fff54793          	not	a5,a0
    104c:	fef02e23          	sw	a5,-4(zero) # fffffffc <__bss_end+0xffffdc60>
#     let ch = uart_read_char();
    1050:	00050913          	mv	s2,a0
#     switch (state) {
    1054:	17348863          	beq	s1,s3,11c4 <_ZL5inputR14command_buffer+0x1e4>
    1058:	17448e63          	beq	s1,s4,11d4 <_ZL5inputR14command_buffer+0x1f4>
#       if (ch == 0x1B) {
    105c:	01b00793          	li	a5,27
    1060:	06f50663          	beq	a0,a5,10cc <_ZL5inputR14command_buffer+0xec>
#       } else if (ch == char_backspace) {
    1064:	07f00793          	li	a5,127
    1068:	08f51863          	bne	a0,a5,10f8 <_ZL5inputR14command_buffer+0x118>
#     if (cursor_ == 0) {
    106c:	05044603          	lbu	a2,80(s0)
    1070:	00000493          	li	s1,0
    1074:	fc0608e3          	beqz	a2,1044 <_ZL5inputR14command_buffer+0x64>
#     if (cursor_ == end_) {
    1078:	05144583          	lbu	a1,81(s0)
#       --cursor_;
    107c:	fff60693          	addi	a3,a2,-1
    1080:	0ff6f693          	zext.b	a3,a3
#       --end_;
    1084:	fff58713          	addi	a4,a1,-1
    1088:	0ff77713          	zext.b	a4,a4
    108c:	00c407b3          	add	a5,s0,a2
#     if (cursor_ == end_) {
    1090:	04b61863          	bne	a2,a1,10e0 <_ZL5inputR14command_buffer+0x100>
#       --end_;
    1094:	04e408a3          	sb	a4,81(s0)
#       --cursor_;
    1098:	04d40823          	sb	a3,80(s0)
#           uart_send_char(ch);
    109c:	07f00513          	li	a0,127
    10a0:	3dc000ef          	jal	147c <_ZL14uart_send_charc>
#           cmd_buf.apply_on_chars_from_cursor_to_end(
    10a4:	00040513          	mv	a0,s0
    10a8:	764000ef          	jal	180c <_ZNK14command_buffer33apply_on_chars_from_cursor_to_endIZL5inputRS_EUlcE_EEvOT_.isra.0>
#           uart_send_char(' ');
    10ac:	02000513          	li	a0,32
    10b0:	3cc000ef          	jal	147c <_ZL14uart_send_charc>
#   auto characters_after_cursor() const -> size_t { return end_ - cursor_; }
    10b4:	05144503          	lbu	a0,81(s0)
    10b8:	05044783          	lbu	a5,80(s0)
    10bc:	40f50533          	sub	a0,a0,a5
#           uart_send_move_back(cmd_buf.characters_after_cursor() + 1);
    10c0:	00150513          	addi	a0,a0,1
#         uart_send_move_back(cmd_buf.characters_after_cursor());
    10c4:	34c000ef          	jal	1410 <_ZL19uart_send_move_backj>
    10c8:	1400006f          	j	1208 <_ZL5inputR14command_buffer+0x228>
#         state = input_state::ESCAPE;
    10cc:	00100493          	li	s1,1
    10d0:	f75ff06f          	j	1044 <_ZL5inputR14command_buffer+0x64>
#       line_[i] = line_[i + 1];
    10d4:	0007c603          	lbu	a2,0(a5)
    10d8:	00178793          	addi	a5,a5,1
    10dc:	fec78f23          	sb	a2,-2(a5)
#     for (size_t i = cursor_ - 1; i < end_; ++i) {
    10e0:	40878633          	sub	a2,a5,s0
    10e4:	fff60613          	addi	a2,a2,-1
    10e8:	feb666e3          	bltu	a2,a1,10d4 <_ZL5inputR14command_buffer+0xf4>
#     --cursor_;
    10ec:	04d40823          	sb	a3,80(s0)
#     --end_;
    10f0:	04e408a3          	sb	a4,81(s0)
#     return true;
    10f4:	fa9ff06f          	j	109c <_ZL5inputR14command_buffer+0xbc>
#       } else if (ch == CHAR_CARRIAGE_RETURN || cmd_buf.is_full()) {
    10f8:	00d00713          	li	a4,13
#     if (cursor_ == end_) {
    10fc:	05144783          	lbu	a5,81(s0)
    1100:	00e50663          	beq	a0,a4,110c <_ZL5inputR14command_buffer+0x12c>
    1104:	04f00493          	li	s1,79
    1108:	04979263          	bne	a5,s1,114c <_ZL5inputR14command_buffer+0x16c>
#   auto set_eos() -> void { line_[end_] = '\0'; }
    110c:	00f407b3          	add	a5,s0,a5
    1110:	00078023          	sb	zero,0(a5)
#         escape_sequence_parameter = 0;
#       }
#       break;
#     }
#   }
# }
    1114:	02c12083          	lw	ra,44(sp)
    1118:	02812403          	lw	s0,40(sp)
    111c:	02412483          	lw	s1,36(sp)
    1120:	02012903          	lw	s2,32(sp)
    1124:	01c12983          	lw	s3,28(sp)
    1128:	01812a03          	lw	s4,24(sp)
    112c:	01412a83          	lw	s5,20(sp)
    1130:	01012b03          	lw	s6,16(sp)
    1134:	00c12b83          	lw	s7,12(sp)
    1138:	00812c03          	lw	s8,8(sp)
    113c:	00412c83          	lw	s9,4(sp)
    1140:	00012d03          	lw	s10,0(sp)
    1144:	03010113          	addi	sp,sp,48
    1148:	00008067          	ret
#         uart_send_char(ch);
    114c:	330000ef          	jal	147c <_ZL14uart_send_charc>
#     if (end_ == sizeof(line_) - 1) {
    1150:	05144683          	lbu	a3,81(s0)
    1154:	02968663          	beq	a3,s1,1180 <_ZL5inputR14command_buffer+0x1a0>
#     if (cursor_ == end_) {
    1158:	05044703          	lbu	a4,80(s0)
#       ++end_;
    115c:	00168793          	addi	a5,a3,1
    1160:	0ff7f793          	zext.b	a5,a5
#       ++cursor_;
    1164:	00170613          	addi	a2,a4,1
    1168:	0ff67613          	zext.b	a2,a2
#     if (cursor_ == end_) {
    116c:	02e69663          	bne	a3,a4,1198 <_ZL5inputR14command_buffer+0x1b8>
#       line_[cursor_] = ch;
    1170:	00d406b3          	add	a3,s0,a3
    1174:	01268023          	sb	s2,0(a3)
#       ++cursor_;
    1178:	04c40823          	sb	a2,80(s0)
#       ++end_;
    117c:	04f408a3          	sb	a5,81(s0)
#         cmd_buf.apply_on_chars_from_cursor_to_end(
    1180:	00040513          	mv	a0,s0
    1184:	688000ef          	jal	180c <_ZNK14command_buffer33apply_on_chars_from_cursor_to_endIZL5inputRS_EUlcE_EEvOT_.isra.0>
#   auto characters_after_cursor() const -> size_t { return end_ - cursor_; }
    1188:	05144503          	lbu	a0,81(s0)
    118c:	05044783          	lbu	a5,80(s0)
#         uart_send_move_back(cmd_buf.characters_after_cursor());
    1190:	40f50533          	sub	a0,a0,a5
    1194:	f31ff06f          	j	10c4 <_ZL5inputR14command_buffer+0xe4>
#     ++end_;
    1198:	04f408a3          	sb	a5,81(s0)
#     for (size_t i = end_; i > cursor_; --i) {
    119c:	00f76a63          	bltu	a4,a5,11b0 <_ZL5inputR14command_buffer+0x1d0>
#     line_[cursor_] = ch;
    11a0:	00e40733          	add	a4,s0,a4
    11a4:	01270023          	sb	s2,0(a4)
#     ++cursor_;
    11a8:	04c40823          	sb	a2,80(s0)
#     return true;
    11ac:	fd5ff06f          	j	1180 <_ZL5inputR14command_buffer+0x1a0>
#       line_[i] = line_[i - 1];
    11b0:	fff78793          	addi	a5,a5,-1
    11b4:	00f406b3          	add	a3,s0,a5
    11b8:	0006c583          	lbu	a1,0(a3)
    11bc:	00b680a3          	sb	a1,1(a3)
#     for (size_t i = end_; i > cursor_; --i) {
    11c0:	fddff06f          	j	119c <_ZL5inputR14command_buffer+0x1bc>
#       if (ch == 0x5B) {
    11c4:	fa550493          	addi	s1,a0,-91
    11c8:	0014b493          	seqz	s1,s1
    11cc:	00149493          	slli	s1,s1,0x1
    11d0:	e75ff06f          	j	1044 <_ZL5inputR14command_buffer+0x64>
#       if (ch >= '0' && ch <= '9') {
    11d4:	fd050713          	addi	a4,a0,-48
    11d8:	0ff77793          	zext.b	a5,a4
    11dc:	00faec63          	bltu	s5,a5,11f4 <_ZL5inputR14command_buffer+0x214>
#         escape_sequence_parameter = escape_sequence_parameter * 10 + (ch - '0');
    11e0:	002d1793          	slli	a5,s10,0x2
    11e4:	01a787b3          	add	a5,a5,s10
    11e8:	00179793          	slli	a5,a5,0x1
    11ec:	00f70d33          	add	s10,a4,a5
    11f0:	e55ff06f          	j	1044 <_ZL5inputR14command_buffer+0x64>
#         switch (ch) {
    11f4:	01650e63          	beq	a0,s6,1210 <_ZL5inputR14command_buffer+0x230>
    11f8:	05850a63          	beq	a0,s8,124c <_ZL5inputR14command_buffer+0x26c>
    11fc:	04300793          	li	a5,67
    1200:	02f50663          	beq	a0,a5,122c <_ZL5inputR14command_buffer+0x24c>
#         escape_sequence_parameter = 0;
    1204:	00000d13          	li	s10,0
#         state = input_state::NORMAL;
    1208:	00000493          	li	s1,0
    120c:	e39ff06f          	j	1044 <_ZL5inputR14command_buffer+0x64>
#     if (cursor_ == 0) {
    1210:	05044783          	lbu	a5,80(s0)
    1214:	fe0788e3          	beqz	a5,1204 <_ZL5inputR14command_buffer+0x224>
#     --cursor_;
    1218:	fff78793          	addi	a5,a5,-1
    121c:	04f40823          	sb	a5,80(s0)
#             uart_send_cstr("\x1B[D");
    1220:	ef0b8513          	addi	a0,s7,-272 # 1ef0 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x69c>
#             uart_send_cstr("\x1B[C");
    1224:	234000ef          	jal	1458 <_ZL14uart_send_cstrPKc>
    1228:	fddff06f          	j	1204 <_ZL5inputR14command_buffer+0x224>
#     if (cursor_ == end_) {
    122c:	05044783          	lbu	a5,80(s0)
    1230:	05144703          	lbu	a4,81(s0)
    1234:	fcf708e3          	beq	a4,a5,1204 <_ZL5inputR14command_buffer+0x224>
#     ++cursor_;
    1238:	00178793          	addi	a5,a5,1
    123c:	00002537          	lui	a0,0x2
    1240:	04f40823          	sb	a5,80(s0)
    1244:	ef450513          	addi	a0,a0,-268 # 1ef4 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6a0>
    1248:	fddff06f          	j	1224 <_ZL5inputR14command_buffer+0x244>
#           if (escape_sequence_parameter == 3) {
    124c:	fb9d1ce3          	bne	s10,s9,1204 <_ZL5inputR14command_buffer+0x224>
#     if (cursor_ == end_) {
    1250:	05044783          	lbu	a5,80(s0)
    1254:	05144703          	lbu	a4,81(s0)
    1258:	00e78e63          	beq	a5,a4,1274 <_ZL5inputR14command_buffer+0x294>
#     for (size_t i = cursor_ + 1; i < end_; ++i) {
    125c:	00f407b3          	add	a5,s0,a5
    1260:	00178793          	addi	a5,a5,1
    1264:	408786b3          	sub	a3,a5,s0
    1268:	02e6ea63          	bltu	a3,a4,129c <_ZL5inputR14command_buffer+0x2bc>
#     --end_;
    126c:	fff70713          	addi	a4,a4,-1
    1270:	04e408a3          	sb	a4,81(s0)
#             cmd_buf.apply_on_chars_from_cursor_to_end(
    1274:	00040513          	mv	a0,s0
    1278:	594000ef          	jal	180c <_ZNK14command_buffer33apply_on_chars_from_cursor_to_endIZL5inputRS_EUlcE_EEvOT_.isra.0>
#             uart_send_char(' ');
    127c:	02000513          	li	a0,32
    1280:	1fc000ef          	jal	147c <_ZL14uart_send_charc>
#   auto characters_after_cursor() const -> size_t { return end_ - cursor_; }
    1284:	05144503          	lbu	a0,81(s0)
    1288:	05044783          	lbu	a5,80(s0)
    128c:	40f50533          	sub	a0,a0,a5
#             uart_send_move_back(cmd_buf.characters_after_cursor() + 1);
    1290:	00150513          	addi	a0,a0,1
    1294:	17c000ef          	jal	1410 <_ZL19uart_send_move_backj>
    1298:	f6dff06f          	j	1204 <_ZL5inputR14command_buffer+0x224>
#       line_[i - 1] = line_[i];
    129c:	0007c683          	lbu	a3,0(a5)
    12a0:	fed78fa3          	sb	a3,-1(a5)
#     for (size_t i = cursor_ + 1; i < end_; ++i) {
    12a4:	fbdff06f          	j	1260 <_ZL5inputR14command_buffer+0x280>

000012a8 <_ZL11cstr_equalsPKcS0_>:
# 
# static auto cstr_equals(char const *s1, char const *s2) -> bool {
#   while (true) {
#     if (*s1 != *s2) {
    12a8:	00054703          	lbu	a4,0(a0)
    12ac:	0005c783          	lbu	a5,0(a1)
    12b0:	00e79a63          	bne	a5,a4,12c4 <_ZL11cstr_equalsPKcS0_+0x1c>
#       return false;
#     }
#     if (*s1 == '\0' && *s2 == '\0') {
    12b4:	00078c63          	beqz	a5,12cc <_ZL11cstr_equalsPKcS0_+0x24>
#       return true;
#     }
#     ++s1;
    12b8:	00150513          	addi	a0,a0,1
#     ++s2;
    12bc:	00158593          	addi	a1,a1,1
#     if (*s1 != *s2) {
    12c0:	fe9ff06f          	j	12a8 <_ZL11cstr_equalsPKcS0_>
#       return false;
    12c4:	00000513          	li	a0,0
    12c8:	00008067          	ret
#       return true;
    12cc:	00100513          	li	a0,1
#   }
# }
    12d0:	00008067          	ret

000012d4 <_ZL9cstr_copyPKcjPc>:
# 
# static auto cstr_copy(char const *src, size_t src_len, char *dst) -> void {
#   while (src_len--) {
    12d4:	00000793          	li	a5,0
    12d8:	00f59463          	bne	a1,a5,12e0 <_ZL9cstr_copyPKcjPc+0xc>
#     *dst++ = *src++;
#   }
# }
    12dc:	00008067          	ret
#     *dst++ = *src++;
    12e0:	00f50733          	add	a4,a0,a5
    12e4:	00074683          	lbu	a3,0(a4)
    12e8:	00f60733          	add	a4,a2,a5
    12ec:	00178793          	addi	a5,a5,1
    12f0:	00d70023          	sb	a3,0(a4)
    12f4:	fe5ff06f          	j	12d8 <_ZL9cstr_copyPKcjPc+0x4>

000012f8 <_ZL9cstr_copyPKcPc>:
# 
# static auto cstr_copy(char const *cstr, char *buf) -> char * {
    12f8:	00050793          	mv	a5,a0
    12fc:	00058513          	mv	a0,a1
#   while (*cstr) {
    1300:	0007c703          	lbu	a4,0(a5)
    1304:	00071463          	bnez	a4,130c <_ZL9cstr_copyPKcPc+0x14>
#     *buf = *cstr;
#     ++buf;
#     ++cstr;
#   }
#   return buf;
# }
    1308:	00008067          	ret
#     *buf = *cstr;
    130c:	00e50023          	sb	a4,0(a0)
#     ++cstr;
    1310:	00178793          	addi	a5,a5,1
#     ++buf;
    1314:	00150513          	addi	a0,a0,1
#     ++cstr;
    1318:	fe9ff06f          	j	1300 <_ZL9cstr_copyPKcPc+0x8>

0000131c <_ZL16string_to_uint324spanIcE>:
# 
# static auto string_to_uint32(string str) -> uint32_t {
    131c:	ff010113          	addi	sp,sp,-16
    1320:	00a12423          	sw	a0,8(sp)
#     Type *it = begin_;
    1324:	00050713          	mv	a4,a0
    1328:	00b12623          	sw	a1,12(sp)
#   mut num = 0u;
    132c:	00000513          	li	a0,0
#   str.for_each_until_false([&num](char const ch) {
#     if (ch <= '0' || ch >= '9') {
    1330:	00700613          	li	a2,7
#     for (; it < end_; ++it) {
    1334:	00b76663          	bltu	a4,a1,1340 <_ZL16string_to_uint324spanIcE+0x24>
#     }
#     num = num * 10 + uint32_t(ch - '0');
#     return true;
#   });
#   return num;
# }
    1338:	01010113          	addi	sp,sp,16
    133c:	00008067          	ret
#       if (!f(*it)) {
    1340:	00074683          	lbu	a3,0(a4)
#     if (ch <= '0' || ch >= '9') {
    1344:	fcf68793          	addi	a5,a3,-49
    1348:	0ff7f793          	zext.b	a5,a5
    134c:	fef666e3          	bltu	a2,a5,1338 <_ZL16string_to_uint324spanIcE+0x1c>
#     num = num * 10 + uint32_t(ch - '0');
    1350:	00251793          	slli	a5,a0,0x2
    1354:	00a787b3          	add	a5,a5,a0
    1358:	00179793          	slli	a5,a5,0x1
    135c:	fd078793          	addi	a5,a5,-48
    1360:	00d78533          	add	a0,a5,a3
#     for (; it < end_; ++it) {
    1364:	00170713          	addi	a4,a4,1
    1368:	fcdff06f          	j	1334 <_ZL16string_to_uint324spanIcE+0x18>

0000136c <_ZL20uart_send_hex_uint32jb>:
# 
# static auto
# uart_send_hex_uint32(uint32_t const i,
#                      bool const separate_half_words = false) -> void {
    136c:	ff010113          	addi	sp,sp,-16
    1370:	00812423          	sw	s0,8(sp)
    1374:	00050413          	mv	s0,a0
#   uart_send_hex_byte(char(i >> 24));
    1378:	01855513          	srli	a0,a0,0x18
#                      bool const separate_half_words = false) -> void {
    137c:	00912223          	sw	s1,4(sp)
    1380:	00112623          	sw	ra,12(sp)
    1384:	00058493          	mv	s1,a1
#   uart_send_hex_byte(char(i >> 24));
    1388:	040000ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#   uart_send_hex_byte(char(i >> 16));
    138c:	01045513          	srli	a0,s0,0x10
    1390:	0ff57513          	zext.b	a0,a0
    1394:	034000ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#   if (separate_half_words) {
    1398:	00048663          	beqz	s1,13a4 <_ZL20uart_send_hex_uint32jb+0x38>
#     uart_send_char(':');
    139c:	03a00513          	li	a0,58
    13a0:	0dc000ef          	jal	147c <_ZL14uart_send_charc>
#   }
#   uart_send_hex_byte(char(i >> 8));
    13a4:	00845513          	srli	a0,s0,0x8
    13a8:	0ff57513          	zext.b	a0,a0
    13ac:	01c000ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#   uart_send_hex_byte(char(i));
    13b0:	0ff47513          	zext.b	a0,s0
# }
    13b4:	00812403          	lw	s0,8(sp)
    13b8:	00c12083          	lw	ra,12(sp)
    13bc:	00412483          	lw	s1,4(sp)
    13c0:	01010113          	addi	sp,sp,16
#   uart_send_hex_byte(char(i));
    13c4:	0040006f          	j	13c8 <_ZL18uart_send_hex_bytec>

000013c8 <_ZL18uart_send_hex_bytec>:
# 
# static auto uart_send_hex_byte(char const ch) -> void {
    13c8:	ff010113          	addi	sp,sp,-16
    13cc:	00812423          	sw	s0,8(sp)
    13d0:	00050413          	mv	s0,a0
#   uart_send_hex_nibble(ch >> 4);
    13d4:	00455513          	srli	a0,a0,0x4
# static auto uart_send_hex_byte(char const ch) -> void {
    13d8:	00112623          	sw	ra,12(sp)
#   uart_send_hex_nibble(ch >> 4);
    13dc:	018000ef          	jal	13f4 <_ZL20uart_send_hex_nibblec>
#   uart_send_hex_nibble(ch & 0x0f);
    13e0:	00f47513          	andi	a0,s0,15
# }
    13e4:	00812403          	lw	s0,8(sp)
    13e8:	00c12083          	lw	ra,12(sp)
    13ec:	01010113          	addi	sp,sp,16
#   uart_send_hex_nibble(ch & 0x0f);
    13f0:	0040006f          	j	13f4 <_ZL20uart_send_hex_nibblec>

000013f4 <_ZL20uart_send_hex_nibblec>:
# 
# static auto uart_send_hex_nibble(char const nibble) -> void {
#   if (nibble < 10) {
    13f4:	00900793          	li	a5,9
    13f8:	00a7e863          	bltu	a5,a0,1408 <_ZL20uart_send_hex_nibblec+0x14>
#     uart_send_char('0' + nibble);
    13fc:	03050513          	addi	a0,a0,48
#   } else {
#     uart_send_char('A' + (nibble - 10));
    1400:	0ff57513          	zext.b	a0,a0
    1404:	0780006f          	j	147c <_ZL14uart_send_charc>
    1408:	03750513          	addi	a0,a0,55
    140c:	ff5ff06f          	j	1400 <_ZL20uart_send_hex_nibblec+0xc>

00001410 <_ZL19uart_send_move_backj>:
#   }
# }
# 
# static auto uart_send_move_back(size_t const n) -> void {
    1410:	ff010113          	addi	sp,sp,-16
    1414:	00812423          	sw	s0,8(sp)
    1418:	00912223          	sw	s1,4(sp)
    141c:	00112623          	sw	ra,12(sp)
    1420:	00050413          	mv	s0,a0
#   for (mut i = 0u; i < n; ++i) {
    1424:	00000493          	li	s1,0
    1428:	00849c63          	bne	s1,s0,1440 <_ZL19uart_send_move_backj+0x30>
#     uart_send_char('\b');
#   }
# }
    142c:	00c12083          	lw	ra,12(sp)
    1430:	00812403          	lw	s0,8(sp)
    1434:	00412483          	lw	s1,4(sp)
    1438:	01010113          	addi	sp,sp,16
    143c:	00008067          	ret
#     uart_send_char('\b');
    1440:	00800513          	li	a0,8
    1444:	038000ef          	jal	147c <_ZL14uart_send_charc>
#   for (mut i = 0u; i < n; ++i) {
    1448:	00148493          	addi	s1,s1,1
    144c:	fddff06f          	j	1428 <_ZL19uart_send_move_backj+0x18>

00001450 <_ZL7led_seti>:
    1450:	fea02e23          	sw	a0,-4(zero) # fffffffc <__bss_end+0xffffdc60>
    1454:	00008067          	ret

00001458 <_ZL14uart_send_cstrPKc>:
#     while (*UART_OUT != -1)
    1458:	fff00713          	li	a4,-1
#   while (*str) {
    145c:	00054783          	lbu	a5,0(a0)
    1460:	00079463          	bnez	a5,1468 <_ZL14uart_send_cstrPKc+0x10>
# }
    1464:	00008067          	ret
#     while (*UART_OUT != -1)
    1468:	ff802683          	lw	a3,-8(zero) # fffffff8 <__bss_end+0xffffdc5c>
    146c:	fee69ee3          	bne	a3,a4,1468 <_ZL14uart_send_cstrPKc+0x10>
#     *UART_OUT = *str++;
    1470:	00150513          	addi	a0,a0,1
    1474:	fef02c23          	sw	a5,-8(zero) # fffffff8 <__bss_end+0xffffdc5c>
    1478:	fe5ff06f          	j	145c <_ZL14uart_send_cstrPKc+0x4>

0000147c <_ZL14uart_send_charc>:
#   while (*UART_OUT != -1)
    147c:	fff00793          	li	a5,-1
    1480:	ff802703          	lw	a4,-8(zero) # fffffff8 <__bss_end+0xffffdc5c>
    1484:	fef71ee3          	bne	a4,a5,1480 <_ZL14uart_send_charc+0x4>
#   *UART_OUT = ch;
    1488:	fea02c23          	sw	a0,-8(zero) # fffffff8 <__bss_end+0xffffdc5c>
# }
    148c:	00008067          	ret

00001490 <_ZL14uart_read_charv>:
#   while ((ch = *UART_IN) == -1)
    1490:	fff00793          	li	a5,-1
    1494:	ff402503          	lw	a0,-12(zero) # fffffff4 <__bss_end+0xffffdc58>
    1498:	fef50ee3          	beq	a0,a5,1494 <_ZL14uart_read_charv+0x4>
# }
    149c:	0ff57513          	zext.b	a0,a0
    14a0:	00008067          	ret

000014a4 <_ZL15action_mem_testv>:
#   uart_send_cstr("testing memory (write)\r\n");
    14a4:	00002537          	lui	a0,0x2
# static auto action_mem_test() -> void {
    14a8:	fe010113          	addi	sp,sp,-32
#   uart_send_cstr("testing memory (write)\r\n");
    14ac:	ef850513          	addi	a0,a0,-264 # 1ef8 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6a4>
# static auto action_mem_test() -> void {
    14b0:	00812c23          	sw	s0,24(sp)
    14b4:	00112e23          	sw	ra,28(sp)
#   char *ptr = &__heap_start;
    14b8:	00002437          	lui	s0,0x2
# static auto action_mem_test() -> void {
    14bc:	00912a23          	sw	s1,20(sp)
    14c0:	01212823          	sw	s2,16(sp)
    14c4:	01312623          	sw	s3,12(sp)
    14c8:	01412423          	sw	s4,8(sp)
    14cc:	01512223          	sw	s5,4(sp)
    14d0:	01612023          	sw	s6,0(sp)
#   uart_send_cstr("testing memory (write)\r\n");
    14d4:	f85ff0ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   char *ptr = &__heap_start;
    14d8:	39c40713          	addi	a4,s0,924 # 239c <__bss_end>
#   char ch = 0;
    14dc:	00000793          	li	a5,0
    14e0:	39c40413          	addi	s0,s0,924
#   while (ptr < end) {
    14e4:	001f06b7          	lui	a3,0x1f0
    14e8:	06d76263          	bltu	a4,a3,154c <_ZL15action_mem_testv+0xa8>
#   uart_send_cstr("testing memory (read)\r\n");
    14ec:	00002537          	lui	a0,0x2
    14f0:	f1450513          	addi	a0,a0,-236 # 1f14 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6c0>
    14f4:	f65ff0ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   bool failed = false;
    14f8:	00000793          	li	a5,0
#   ch = 0;
    14fc:	00000493          	li	s1,0
#   while (ptr < end) {
    1500:	001f0937          	lui	s2,0x1f0
#       uart_send_cstr("at ");
    1504:	000029b7          	lui	s3,0x2
#       uart_send_cstr(" expected ");
    1508:	00002a37          	lui	s4,0x2
#       uart_send_cstr(" got ");
    150c:	00002ab7          	lui	s5,0x2
#       uart_send_cstr("\r\n");
    1510:	00002b37          	lui	s6,0x2
#   while (ptr < end) {
    1514:	05246663          	bltu	s0,s2,1560 <_ZL15action_mem_testv+0xbc>
#   if (failed) {
    1518:	0a078063          	beqz	a5,15b8 <_ZL15action_mem_testv+0x114>
#     uart_send_cstr("testing memory FAILED\r\n");
    151c:	00002537          	lui	a0,0x2
    1520:	f4450513          	addi	a0,a0,-188 # 1f44 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6f0>
# }
    1524:	01812403          	lw	s0,24(sp)
    1528:	01c12083          	lw	ra,28(sp)
    152c:	01412483          	lw	s1,20(sp)
    1530:	01012903          	lw	s2,16(sp)
    1534:	00c12983          	lw	s3,12(sp)
    1538:	00812a03          	lw	s4,8(sp)
    153c:	00412a83          	lw	s5,4(sp)
    1540:	00012b03          	lw	s6,0(sp)
    1544:	02010113          	addi	sp,sp,32
#     uart_send_cstr("testing memory succeeded\r\n");
    1548:	f11ff06f          	j	1458 <_ZL14uart_send_cstrPKc>
#     *ptr = ch;
    154c:	00f70023          	sb	a5,0(a4)
#     ++ch;
    1550:	00178793          	addi	a5,a5,1
#     ++ptr;
    1554:	00170713          	addi	a4,a4,1
#     ++ch;
    1558:	0ff7f793          	zext.b	a5,a5
    155c:	f8dff06f          	j	14e8 <_ZL15action_mem_testv+0x44>
#     if (*ptr != ch) {
    1560:	00044703          	lbu	a4,0(s0)
    1564:	04970263          	beq	a4,s1,15a8 <_ZL15action_mem_testv+0x104>
#       uart_send_cstr("at ");
    1568:	f2c98513          	addi	a0,s3,-212 # 1f2c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6d8>
    156c:	eedff0ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       uart_send_hex_uint32(uint32_t(ptr), true);
    1570:	00100593          	li	a1,1
    1574:	00040513          	mv	a0,s0
    1578:	df5ff0ef          	jal	136c <_ZL20uart_send_hex_uint32jb>
#       uart_send_cstr(" expected ");
    157c:	f30a0513          	addi	a0,s4,-208 # 1f30 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6dc>
    1580:	ed9ff0ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       uart_send_hex_byte(ch);
    1584:	00048513          	mv	a0,s1
    1588:	e41ff0ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#       uart_send_cstr(" got ");
    158c:	f3ca8513          	addi	a0,s5,-196 # 1f3c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x6e8>
    1590:	ec9ff0ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       uart_send_hex_byte(*ptr);
    1594:	00044503          	lbu	a0,0(s0)
    1598:	e31ff0ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#       uart_send_cstr("\r\n");
    159c:	c7cb0513          	addi	a0,s6,-900 # 1c7c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x428>
    15a0:	eb9ff0ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#       failed = true;
    15a4:	00100793          	li	a5,1
#     ++ch;
    15a8:	00148493          	addi	s1,s1,1
#     ++ptr;
    15ac:	00140413          	addi	s0,s0,1
#     ++ch;
    15b0:	0ff4f493          	zext.b	s1,s1
    15b4:	f61ff06f          	j	1514 <_ZL15action_mem_testv+0x70>
#     uart_send_cstr("testing memory succeeded\r\n");
    15b8:	00002537          	lui	a0,0x2
    15bc:	f5c50513          	addi	a0,a0,-164 # 1f5c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x708>
    15c0:	f65ff06f          	j	1524 <_ZL15action_mem_testv+0x80>

000015c4 <_ZL23action_sdcard_test_read4spanIcE>:
# static auto action_sdcard_test_read(string const args) -> void {
    15c4:	dd010113          	addi	sp,sp,-560
    15c8:	00a12423          	sw	a0,8(sp)
    15cc:	00058613          	mv	a2,a1
    15d0:	00b12623          	sw	a1,12(sp)
#   let w1 = string_next_word(args);
    15d4:	00050593          	mv	a1,a0
    15d8:	01010513          	addi	a0,sp,16
# static auto action_sdcard_test_read(string const args) -> void {
    15dc:	22112623          	sw	ra,556(sp)
    15e0:	22812423          	sw	s0,552(sp)
    15e4:	22912223          	sw	s1,548(sp)
    15e8:	23212023          	sw	s2,544(sp)
#   let w1 = string_next_word(args);
    15ec:	b49fe0ef          	jal	134 <_ZL16string_next_word4spanIcE>
#   if (w1.word.is_empty()) {
    15f0:	01012503          	lw	a0,16(sp)
    15f4:	01412583          	lw	a1,20(sp)
    15f8:	02b51263          	bne	a0,a1,161c <_ZL23action_sdcard_test_read4spanIcE+0x58>
#     uart_send_cstr("<sector>\r\n");
    15fc:	00002537          	lui	a0,0x2
    1600:	f7850513          	addi	a0,a0,-136 # 1f78 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x724>
# }
    1604:	22812403          	lw	s0,552(sp)
    1608:	22c12083          	lw	ra,556(sp)
    160c:	22412483          	lw	s1,548(sp)
    1610:	22012903          	lw	s2,544(sp)
    1614:	23010113          	addi	sp,sp,560
#   uart_send_cstr("\r\n");
    1618:	e41ff06f          	j	1458 <_ZL14uart_send_cstrPKc>
#   let sector = string_to_uint32(w1.word);
    161c:	d01ff0ef          	jal	131c <_ZL16string_to_uint324spanIcE>
#   sdcard_read_blocking(sector, buf);
    1620:	02010493          	addi	s1,sp,32
    1624:	00048593          	mv	a1,s1
    1628:	124000ef          	jal	174c <_ZL20sdcard_read_blockingjPc>
#   for (mut i = 0u; i < sizeof(buf); ++i) {
    162c:	00000413          	li	s0,0
    1630:	20000913          	li	s2,512
#     uart_send_char(buf[i]);
    1634:	008487b3          	add	a5,s1,s0
    1638:	0007c503          	lbu	a0,0(a5)
#   for (mut i = 0u; i < sizeof(buf); ++i) {
    163c:	00140413          	addi	s0,s0,1
#     uart_send_char(buf[i]);
    1640:	e3dff0ef          	jal	147c <_ZL14uart_send_charc>
#   for (mut i = 0u; i < sizeof(buf); ++i) {
    1644:	ff2418e3          	bne	s0,s2,1634 <_ZL23action_sdcard_test_read4spanIcE+0x70>
#   uart_send_cstr("\r\n");
    1648:	00002537          	lui	a0,0x2
    164c:	c7c50513          	addi	a0,a0,-900 # 1c7c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x428>
    1650:	fb5ff06f          	j	1604 <_ZL23action_sdcard_test_read4spanIcE+0x40>

00001654 <_ZL24action_sdcard_test_write4spanIcE>:
# static auto action_sdcard_test_write(string const args) -> void {
    1654:	dd010113          	addi	sp,sp,-560
    1658:	00a12423          	sw	a0,8(sp)
    165c:	00058613          	mv	a2,a1
    1660:	00b12623          	sw	a1,12(sp)
#   let w1 = string_next_word(args);
    1664:	00050593          	mv	a1,a0
    1668:	01010513          	addi	a0,sp,16
# static auto action_sdcard_test_write(string const args) -> void {
    166c:	22112623          	sw	ra,556(sp)
#   let w1 = string_next_word(args);
    1670:	ac5fe0ef          	jal	134 <_ZL16string_next_word4spanIcE>
#   if (w1.word.is_empty()) {
    1674:	01012703          	lw	a4,16(sp)
    1678:	01412783          	lw	a5,20(sp)
    167c:	00f71c63          	bne	a4,a5,1694 <_ZL24action_sdcard_test_write4spanIcE+0x40>
# }
    1680:	22c12083          	lw	ra,556(sp)
#     uart_send_cstr("<sector> <text>\r\n");
    1684:	00002537          	lui	a0,0x2
    1688:	f8450513          	addi	a0,a0,-124 # 1f84 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x730>
# }
    168c:	23010113          	addi	sp,sp,560
#     uart_send_cstr("<sector> <text>\r\n");
    1690:	dc9ff06f          	j	1458 <_ZL14uart_send_cstrPKc>
#   char buf[512]{};
    1694:	20000613          	li	a2,512
    1698:	00000593          	li	a1,0
    169c:	02010513          	addi	a0,sp,32
    16a0:	104000ef          	jal	17a4 <memset>
#     for (Type *it = begin_; it < end_; ++it) {
    16a4:	01812783          	lw	a5,24(sp)
    16a8:	01c12683          	lw	a3,28(sp)
#   mut *buf_ptr = buf;
    16ac:	02010713          	addi	a4,sp,32
    16b0:	02d7e263          	bltu	a5,a3,16d4 <_ZL24action_sdcard_test_write4spanIcE+0x80>
#   size_t const sector = string_to_uint32(w1.word);
    16b4:	01412583          	lw	a1,20(sp)
    16b8:	01012503          	lw	a0,16(sp)
    16bc:	c61ff0ef          	jal	131c <_ZL16string_to_uint324spanIcE>
#   sdcard_write_blocking(sector, buf);
    16c0:	02010593          	addi	a1,sp,32
    16c4:	0b4000ef          	jal	1778 <_ZL21sdcard_write_blockingjPKc>
# }
    16c8:	22c12083          	lw	ra,556(sp)
    16cc:	23010113          	addi	sp,sp,560
    16d0:	00008067          	ret
#     *buf_ptr = ch;
    16d4:	0007c603          	lbu	a2,0(a5)
#     ++buf_ptr;
    16d8:	00170713          	addi	a4,a4,1
    16dc:	00178793          	addi	a5,a5,1
#     *buf_ptr = ch;
    16e0:	fec70fa3          	sb	a2,-1(a4)
    16e4:	fcdff06f          	j	16b0 <_ZL24action_sdcard_test_write4spanIcE+0x5c>

000016e8 <_ZL20action_sdcard_statusv>:
# static auto action_sdcard_status() -> void {
    16e8:	ff010113          	addi	sp,sp,-16
    16ec:	00812423          	sw	s0,8(sp)
#   uint32_t const status = *SDCARD_STATUS;
#   uart_send_cstr("SDCARD_STATUS: 0x");
    16f0:	00002537          	lui	a0,0x2
#   uint32_t const status = *SDCARD_STATUS;
    16f4:	fe402403          	lw	s0,-28(zero) # ffffffe4 <__bss_end+0xffffdc48>
#   uart_send_cstr("SDCARD_STATUS: 0x");
    16f8:	f9850513          	addi	a0,a0,-104 # 1f98 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x744>
# static auto action_sdcard_status() -> void {
    16fc:	00112623          	sw	ra,12(sp)
#   uart_send_cstr("SDCARD_STATUS: 0x");
    1700:	d59ff0ef          	jal	1458 <_ZL14uart_send_cstrPKc>
#   uart_send_hex_byte(char(status >> 24));
    1704:	01845513          	srli	a0,s0,0x18
    1708:	cc1ff0ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#   uart_send_hex_byte(char(status >> 16));
    170c:	01045513          	srli	a0,s0,0x10
    1710:	0ff57513          	zext.b	a0,a0
    1714:	cb5ff0ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#   uart_send_char(':');
    1718:	03a00513          	li	a0,58
    171c:	d61ff0ef          	jal	147c <_ZL14uart_send_charc>
#   uart_send_hex_byte(char(status >> 8));
    1720:	00845513          	srli	a0,s0,0x8
    1724:	0ff57513          	zext.b	a0,a0
    1728:	ca1ff0ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#   uart_send_hex_byte(char(status));
    172c:	0ff47513          	zext.b	a0,s0
    1730:	c99ff0ef          	jal	13c8 <_ZL18uart_send_hex_bytec>
#   uart_send_cstr("\r\n");
# }
    1734:	00812403          	lw	s0,8(sp)
    1738:	00c12083          	lw	ra,12(sp)
#   uart_send_cstr("\r\n");
    173c:	00002537          	lui	a0,0x2
    1740:	c7c50513          	addi	a0,a0,-900 # 1c7c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x428>
# }
    1744:	01010113          	addi	sp,sp,16
#   uart_send_cstr("\r\n");
    1748:	d11ff06f          	j	1458 <_ZL14uart_send_cstrPKc>

0000174c <_ZL20sdcard_read_blockingjPc>:
# 
# static auto sdcard_read_blocking(size_t const sector,
#                                  int8_t *buffer512B) -> void {
#   while (*SDCARD_BUSY)
    174c:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdc54>
    1750:	fe079ee3          	bnez	a5,174c <_ZL20sdcard_read_blockingjPc>
#     ;
#   *SDCARD_READ_SECTOR = sector;
    1754:	fea02623          	sw	a0,-20(zero) # ffffffec <__bss_end+0xffffdc50>
#   while (*SDCARD_BUSY)
    1758:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdc54>
    175c:	fe079ee3          	bnez	a5,1758 <_ZL20sdcard_read_blockingjPc+0xc>
    1760:	20058793          	addi	a5,a1,512
#     ;
#   for (size_t i = 0; i < 512; ++i) {
#     *buffer512B = char(*SDCARD_NEXT_BYTE);
    1764:	fe802703          	lw	a4,-24(zero) # ffffffe8 <__bss_end+0xffffdc4c>
#     ++buffer512B;
    1768:	00158593          	addi	a1,a1,1
#     *buffer512B = char(*SDCARD_NEXT_BYTE);
    176c:	fee58fa3          	sb	a4,-1(a1)
#   for (size_t i = 0; i < 512; ++i) {
    1770:	feb79ae3          	bne	a5,a1,1764 <_ZL20sdcard_read_blockingjPc+0x18>
#   }
# }
    1774:	00008067          	ret

00001778 <_ZL21sdcard_write_blockingjPKc>:
# 
# static auto sdcard_write_blocking(size_t const sector,
#                                   int8_t const *buffer512B) -> void {
#   while (*SDCARD_BUSY)
    1778:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdc54>
    177c:	fe079ee3          	bnez	a5,1778 <_ZL21sdcard_write_blockingjPKc>
    1780:	20058793          	addi	a5,a1,512
#     ;
#   for (size_t i = 0; i < 512; ++i) {
#     *SDCARD_NEXT_BYTE = *buffer512B;
    1784:	0005c703          	lbu	a4,0(a1)
#     ++buffer512B;
    1788:	00158593          	addi	a1,a1,1
#     *SDCARD_NEXT_BYTE = *buffer512B;
    178c:	fee02423          	sw	a4,-24(zero) # ffffffe8 <__bss_end+0xffffdc4c>
#   for (size_t i = 0; i < 512; ++i) {
    1790:	feb79ae3          	bne	a5,a1,1784 <_ZL21sdcard_write_blockingjPKc+0xc>
#   }
#   *SDCARD_WRITE_SECTOR = sector;
    1794:	fea02023          	sw	a0,-32(zero) # ffffffe0 <__bss_end+0xffffdc44>
#   while (*SDCARD_BUSY)
    1798:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdc54>
    179c:	fe079ee3          	bnez	a5,1798 <_ZL21sdcard_write_blockingjPKc+0x20>
#     ;
# }
    17a0:	00008067          	ret

000017a4 <memset>:
# 
# // built-in function called by compiler
# extern "C" auto memset(void *str, int ch, int n) -> void * {
#   char *ptr = reinterpret_cast<char *>(str);
#   while (n--) {
    17a4:	00c50633          	add	a2,a0,a2
#   char *ptr = reinterpret_cast<char *>(str);
    17a8:	00050793          	mv	a5,a0
#   while (n--) {
    17ac:	00c79463          	bne	a5,a2,17b4 <memset+0x10>
#     *ptr = char(ch);
#     ++ptr;
#   }
#   return str;
# }
    17b0:	00008067          	ret
#     *ptr = char(ch);
    17b4:	00b78023          	sb	a1,0(a5)
#     ++ptr;
    17b8:	00178793          	addi	a5,a5,1
    17bc:	ff1ff06f          	j	17ac <memset+0x8>

000017c0 <memcpy>:
# 
# // built-in function called by compiler
# extern "C" auto memcpy(void *dst, void const *src, size_t n) -> void * {
#   char *p1 = reinterpret_cast<char *>(dst);
#   char const *p2 = reinterpret_cast<char const *>(src);
#   while (n--) {
    17c0:	00000793          	li	a5,0
    17c4:	00f61463          	bne	a2,a5,17cc <memcpy+0xc>
#     *p1 = *p2;
#     ++p1;
#     ++p2;
#   }
#   return dst;
# }
    17c8:	00008067          	ret
#     *p1 = *p2;
    17cc:	00f58733          	add	a4,a1,a5
    17d0:	00074683          	lbu	a3,0(a4)
    17d4:	00f50733          	add	a4,a0,a5
    17d8:	00178793          	addi	a5,a5,1
    17dc:	00d70023          	sb	a3,0(a4)
#     ++p2;
    17e0:	fe5ff06f          	j	17c4 <memcpy+0x4>

000017e4 <_ZL12initiate_bssv>:
# 
# // zero bss section
# static auto initiate_bss() -> void {
#   memset(&__bss_start, 0, &__bss_end - &__bss_start);
    17e4:	00002537          	lui	a0,0x2
    17e8:	000027b7          	lui	a5,0x2
    17ec:	39450613          	addi	a2,a0,916 # 2394 <_ZL21input_escape_sequence>
    17f0:	39c78793          	addi	a5,a5,924 # 239c <__bss_end>
    17f4:	40c78633          	sub	a2,a5,a2
    17f8:	00000593          	li	a1,0
    17fc:	39450513          	addi	a0,a0,916
    1800:	fa5ff06f          	j	17a4 <memset>

00001804 <_ZL16initiate_staticsv>:
# }
# 
# static auto initiate_statics() -> void {}
    1804:	00008067          	ret

00001808 <_ZL4exiti>:
# 
    1808:	00008067          	ret

0000180c <_ZNK14command_buffer33apply_on_chars_from_cursor_to_endIZL5inputRS_EUlcE_EEvOT_.isra.0>:
#   auto apply_on_chars_from_cursor_to_end(
    180c:	ff010113          	addi	sp,sp,-16
    1810:	00812423          	sw	s0,8(sp)
    1814:	00112623          	sw	ra,12(sp)
    1818:	00912223          	sw	s1,4(sp)
#     for (size_t i = cursor_; i < end_; ++i) {
    181c:	05054483          	lbu	s1,80(a0)
#   auto apply_on_chars_from_cursor_to_end(
    1820:	00050413          	mv	s0,a0
#     for (size_t i = cursor_; i < end_; ++i) {
    1824:	05144783          	lbu	a5,81(s0)
    1828:	00f4ec63          	bltu	s1,a5,1840 <_ZNK14command_buffer33apply_on_chars_from_cursor_to_endIZL5inputRS_EUlcE_EEvOT_.isra.0+0x34>
#   }
    182c:	00c12083          	lw	ra,12(sp)
    1830:	00812403          	lw	s0,8(sp)
    1834:	00412483          	lw	s1,4(sp)
    1838:	01010113          	addi	sp,sp,16
    183c:	00008067          	ret
#       f(line_[i]);
    1840:	009407b3          	add	a5,s0,s1
#               [](char const c) { uart_send_char(c); });
    1844:	0007c503          	lbu	a0,0(a5)
#     for (size_t i = cursor_; i < end_; ++i) {
    1848:	00148493          	addi	s1,s1,1
    184c:	c31ff0ef          	jal	147c <_ZL14uart_send_charc>
    1850:	fd5ff06f          	j	1824 <_ZNK14command_buffer33apply_on_chars_from_cursor_to_endIZL5inputRS_EUlcE_EEvOT_.isra.0+0x18>

00001854 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0>:
#   auto for_each(callable_returns_void<Type> auto f) const -> void {
    1854:	ff010113          	addi	sp,sp,-16
    1858:	00812423          	sw	s0,8(sp)
#     for (Type *it = begin_; it < end_; ++it) {
    185c:	00052403          	lw	s0,0(a0)
#   auto for_each(callable_returns_void<Type> auto f) const -> void {
    1860:	00912223          	sw	s1,4(sp)
    1864:	00112623          	sw	ra,12(sp)
    1868:	00050493          	mv	s1,a0
#     for (Type *it = begin_; it < end_; ++it) {
    186c:	0044a783          	lw	a5,4(s1)
    1870:	00f46c63          	bltu	s0,a5,1888 <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x34>
#   }
    1874:	00c12083          	lw	ra,12(sp)
    1878:	00812403          	lw	s0,8(sp)
    187c:	00412483          	lw	s1,4(sp)
    1880:	01010113          	addi	sp,sp,16
    1884:	00008067          	ret
#   str.for_each([](char const ch) { uart_send_char(ch); });
    1888:	00044503          	lbu	a0,0(s0)
#     for (Type *it = begin_; it < end_; ++it) {
    188c:	00140413          	addi	s0,s0,1
    1890:	bedff0ef          	jal	147c <_ZL14uart_send_charc>
    1894:	fd9ff06f          	j	186c <_ZNK4spanIcE8for_eachIZL12string_printS0_EUlcE_EEvT_.isra.0+0x18>
