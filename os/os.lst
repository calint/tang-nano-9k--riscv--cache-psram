
os:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
# # generated - do not edit (see `configuration.py`)
# .global _start
# _start:
#     li sp, 0x800000
       0:	00800137          	lui	sp,0x800
#     j run
       4:	0040006f          	j	8 <run>

00000008 <run>:
#         ++ptr;
#     }
#     return str;
# }
# 
# // built-in function called by compiler
       8:	f3010113          	addi	sp,sp,-208 # 7fff30 <__bss_end+0x7fdbe4>
       c:	0c112623          	sw	ra,204(sp)
      10:	0c812423          	sw	s0,200(sp)
      14:	0d212023          	sw	s2,192(sp)
      18:	0b312e23          	sw	s3,188(sp)
      1c:	0b412c23          	sw	s4,184(sp)
      20:	0b512a23          	sw	s5,180(sp)
      24:	0c912223          	sw	s1,196(sp)
# extern "C" auto memcpy(void* dst, void const* src, size_t n) -> void* {
      28:	75c010ef          	jal	1784 <initiate_bss()>
#     // initiate statics in freestanding build
# 
#     led_set(0b0000);
#     // turn on all leds
# 
#     uart_send_cstr(ascii_art);
      2c:	00002537          	lui	a0,0x2
      30:	86850513          	addi	a0,a0,-1944 # 1868 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x74>
# static auto led_set(uint32_t const bits) -> void { *LED = bits; }
      34:	fe002e23          	sw	zero,-4(zero) # fffffffc <__bss_end+0xffffdcb0>
      38:	528010ef          	jal	1560 <uart_send_cstr(char const*)>
#     uart_send_cstr(hello);
      3c:	00002537          	lui	a0,0x2
      40:	83850513          	addi	a0,a0,-1992 # 1838 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x44>
      44:	51c010ef          	jal	1560 <uart_send_cstr(char const*)>
# 
#     mut active_entity = entity_id_t{1};
#     mut cmd_buf = command_buffer{};
      48:	0a800613          	li	a2,168
      4c:	00000593          	li	a1,0
      50:	00810513          	addi	a0,sp,8
      54:	6f0010ef          	jal	1744 <memset>
#     mut active_entity = entity_id_t{1};
      58:	00100413          	li	s0,1
# 
#     while (true) {
#         mut& ent = entity_by_id(active_entity);
#         print_location(ent.location, active_entity);
      5c:	00002ab7          	lui	s5,0x2
#         uart_send_cstr(ent.name);
#         uart_send_cstr(" > ");
      60:	00002a37          	lui	s4,0x2
#         input(cmd_buf);
#         uart_send_cstr("\r\n");
      64:	000029b7          	lui	s3,0x2
#         handle_input(active_entity, cmd_buf);
#         active_entity = active_entity == 1 ? 2 : 1;
      68:	00300913          	li	s2,3
#         print_location(ent.location, active_entity);
      6c:	00141793          	slli	a5,s0,0x1
      70:	008787b3          	add	a5,a5,s0
      74:	00279793          	slli	a5,a5,0x2
      78:	408787b3          	sub	a5,a5,s0
      7c:	00279793          	slli	a5,a5,0x2
      80:	f78a8493          	addi	s1,s5,-136 # 1f78 <entities>
      84:	00f484b3          	add	s1,s1,a5
      88:	0044c503          	lbu	a0,4(s1)
      8c:	00040593          	mv	a1,s0
      90:	494000ef          	jal	524 <print_location(unsigned char, unsigned char)>
#         uart_send_cstr(ent.name);
      94:	0004a503          	lw	a0,0(s1)
      98:	4c8010ef          	jal	1560 <uart_send_cstr(char const*)>
#         uart_send_cstr(" > ");
      9c:	c18a0513          	addi	a0,s4,-1000 # 1c18 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x424>
      a0:	4c0010ef          	jal	1560 <uart_send_cstr(char const*)>
#         input(cmd_buf);
      a4:	00810513          	addi	a0,sp,8
      a8:	00c010ef          	jal	10b4 <input(cursor_buffer<char, 160u>&)>
#         uart_send_cstr("\r\n");
      ac:	c6498513          	addi	a0,s3,-924 # 1c64 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x470>
      b0:	4b0010ef          	jal	1560 <uart_send_cstr(char const*)>
#         handle_input(active_entity, cmd_buf);
      b4:	00040513          	mv	a0,s0
      b8:	00810593          	addi	a1,sp,8
#         active_entity = active_entity == 1 ? 2 : 1;
      bc:	40890433          	sub	s0,s2,s0
#         handle_input(active_entity, cmd_buf);
      c0:	100000ef          	jal	1c0 <handle_input(unsigned char, cursor_buffer<char, 160u>&)>
#         active_entity = active_entity == 1 ? 2 : 1;
      c4:	0ff47413          	zext.b	s0,s0
      c8:	fa5ff06f          	j	6c <run+0x64>

000000cc <string_equals_cstr(span<char>, char const*)>:
#     }
# }
# 
# static auto string_equals_cstr(string const str, cstr s) -> bool {
      cc:	ff010113          	addi	sp,sp,-16
      d0:	00a12423          	sw	a0,8(sp)
      d4:	00b12623          	sw	a1,12(sp)
#     mut e = str.for_each_until_false([&s](let ch) {
#         if (*s != '\0' && *s == ch) {
      d8:	00064783          	lbu	a5,0(a2)
#     }
# 
#     auto for_each_until_false(callable_returns_bool<Type> auto&& f) const
#         -> position {
#         Type* it = begin_;
#         for (; it < end_; ++it) {
      dc:	00b56e63          	bltu	a0,a1,f8 <string_equals_cstr(span<char>, char const*)+0x2c>
#             ++s;
#             return true;
#         }
#         return false;
#     });
#     return *s == '\0' && str.is_at_end(e);
      e0:	40b50533          	sub	a0,a0,a1
      e4:	00153593          	seqz	a1,a0
      e8:	0017b513          	seqz	a0,a5
# }
      ec:	00a5f533          	and	a0,a1,a0
      f0:	01010113          	addi	sp,sp,16
      f4:	00008067          	ret
#         if (*s != '\0' && *s == ch) {
      f8:	fe0784e3          	beqz	a5,e0 <string_equals_cstr(span<char>, char const*)+0x14>
      fc:	00054703          	lbu	a4,0(a0)
     100:	fef710e3          	bne	a4,a5,e0 <string_equals_cstr(span<char>, char const*)+0x14>
#             ++s;
     104:	00160613          	addi	a2,a2,1
     108:	00150513          	addi	a0,a0,1
     10c:	fcdff06f          	j	d8 <string_equals_cstr(span<char>, char const*)+0xc>

00000110 <string_print(span<char>)>:
# 
# static auto string_print(string const str) -> void {
     110:	fe010113          	addi	sp,sp,-32
     114:	00a12423          	sw	a0,8(sp)
#     str.for_each([](let ch) { uart_send_char(ch); });
     118:	00810513          	addi	a0,sp,8
# static auto string_print(string const str) -> void {
     11c:	00112e23          	sw	ra,28(sp)
     120:	00b12623          	sw	a1,12(sp)
#     str.for_each([](let ch) { uart_send_char(ch); });
     124:	6d0010ef          	jal	17f4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
# }
     128:	01c12083          	lw	ra,28(sp)
     12c:	02010113          	addi	sp,sp,32
     130:	00008067          	ret

00000134 <string_next_word(span<char>)>:
#     string word;
#     string rem;
# };
# 
# static auto string_next_word(string const str)
#     -> struct string_next_word_return {
     134:	fe010113          	addi	sp,sp,-32
     138:	00b12423          	sw	a1,8(sp)
     13c:	00c12623          	sw	a2,12(sp)
#         Type* it = begin_;
     140:	00058793          	mv	a5,a1
#             if (!f(*it)) {
     144:	02000713          	li	a4,32
#         for (; it < end_; ++it) {
     148:	00c7f663          	bgeu	a5,a2,154 <string_next_word(span<char>)+0x20>
#             if (!f(*it)) {
     14c:	0007c683          	lbu	a3,0(a5)
     150:	06e69063          	bne	a3,a4,1b0 <string_next_word(span<char>)+0x7c>
#     mut ce = str.for_each_until_false([](let ch) { return ch != ' '; });
#     let word = str.subspan_ending_at(ce);
     154:	00b12823          	sw	a1,16(sp)
#             if (begin_ > end_) {
     158:	00f5f463          	bgeu	a1,a5,160 <string_next_word(span<char>)+0x2c>
     15c:	00078593          	mv	a1,a5
     160:	00b12a23          	sw	a1,20(sp)
     164:	00078713          	mv	a4,a5
     168:	00c7f463          	bgeu	a5,a2,170 <string_next_word(span<char>)+0x3c>
     16c:	00060713          	mv	a4,a2
#             if (!f(*it)) {
     170:	02000693          	li	a3,32
#         for (; it < end_; ++it) {
     174:	00e7f663          	bgeu	a5,a4,180 <string_next_word(span<char>)+0x4c>
#             if (!f(*it)) {
     178:	0007c603          	lbu	a2,0(a5)
     17c:	02d60e63          	beq	a2,a3,1b8 <string_next_word(span<char>)+0x84>
     180:	00f12c23          	sw	a5,24(sp)
#             if (begin_ > end_) {
     184:	00f77463          	bgeu	a4,a5,18c <string_next_word(span<char>)+0x58>
     188:	00078713          	mv	a4,a5
#     let rem = str.subspan_starting_at(ce);
#     let rem_trimmed = rem.subspan_starting_at(
#         rem.for_each_until_false([](let ch) { return ch == ' '; }));
#     return {word, rem_trimmed};
     18c:	01012783          	lw	a5,16(sp)
     190:	00e52623          	sw	a4,12(a0)
     194:	00f52023          	sw	a5,0(a0)
     198:	01412783          	lw	a5,20(sp)
     19c:	00f52223          	sw	a5,4(a0)
     1a0:	01812783          	lw	a5,24(sp)
     1a4:	00f52423          	sw	a5,8(a0)
# }
     1a8:	02010113          	addi	sp,sp,32
     1ac:	00008067          	ret
#         for (; it < end_; ++it) {
     1b0:	00178793          	addi	a5,a5,1
     1b4:	f95ff06f          	j	148 <string_next_word(span<char>)+0x14>
     1b8:	00178793          	addi	a5,a5,1
     1bc:	fb9ff06f          	j	174 <string_next_word(span<char>)+0x40>

000001c0 <handle_input(unsigned char, cursor_buffer<char, 160u>&)>:
#         : begin_{begin}, end_{begin + size} {}
     1c0:	0a45a783          	lw	a5,164(a1)
# 
# static auto
# handle_input(entity_id_t const eid, command_buffer& cmd_buf) -> void {
     1c4:	fb010113          	addi	sp,sp,-80
     1c8:	05212023          	sw	s2,64(sp)
# 
#     let line = cmd_buf.span();
#     let w1 = string_next_word(line);
     1cc:	00f58633          	add	a2,a1,a5
# handle_input(entity_id_t const eid, command_buffer& cmd_buf) -> void {
     1d0:	00050913          	mv	s2,a0
#     let w1 = string_next_word(line);
     1d4:	02010513          	addi	a0,sp,32
# handle_input(entity_id_t const eid, command_buffer& cmd_buf) -> void {
     1d8:	04812423          	sw	s0,72(sp)
     1dc:	04912223          	sw	s1,68(sp)
     1e0:	03312e23          	sw	s3,60(sp)
     1e4:	03412c23          	sw	s4,56(sp)
     1e8:	04112623          	sw	ra,76(sp)
#     let w1 = string_next_word(line);
     1ec:	f49ff0ef          	jal	134 <string_next_word(span<char>)>
#     let cmd = w1.word;
     1f0:	02012483          	lw	s1,32(sp)
     1f4:	02412403          	lw	s0,36(sp)
#     let args = w1.rem;
     1f8:	02812a03          	lw	s4,40(sp)
     1fc:	02c12983          	lw	s3,44(sp)
# 
#     if (string_equals_cstr(cmd, "help")) {
     200:	00002637          	lui	a2,0x2
     204:	c1c60613          	addi	a2,a2,-996 # 1c1c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x428>
     208:	00048513          	mv	a0,s1
     20c:	00040593          	mv	a1,s0
#     let cmd = w1.word;
     210:	00912823          	sw	s1,16(sp)
     214:	00812a23          	sw	s0,20(sp)
#     let args = w1.rem;
     218:	01412c23          	sw	s4,24(sp)
     21c:	01312e23          	sw	s3,28(sp)
#     if (string_equals_cstr(cmd, "help")) {
     220:	eadff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     224:	02050263          	beqz	a0,248 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x88>
#     } else if (string_equals_cstr(cmd, "q")) {
#         exit(0);
#     } else {
#         uart_send_cstr("not understood\r\n\r\n");
#     }
# }
     228:	04812403          	lw	s0,72(sp)
     22c:	04c12083          	lw	ra,76(sp)
     230:	04412483          	lw	s1,68(sp)
     234:	04012903          	lw	s2,64(sp)
     238:	03c12983          	lw	s3,60(sp)
     23c:	03812a03          	lw	s4,56(sp)
     240:	05010113          	addi	sp,sp,80
#         print_help();
     244:	6650006f          	j	10a8 <print_help()>
#     } else if (string_equals_cstr(cmd, "i")) {
     248:	00002637          	lui	a2,0x2
     24c:	c2460613          	addi	a2,a2,-988 # 1c24 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x430>
     250:	00048513          	mv	a0,s1
     254:	00040593          	mv	a1,s0
     258:	e75ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     25c:	02050a63          	beqz	a0,290 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0xd0>
#         action_inventory(eid);
     260:	00090513          	mv	a0,s2
     264:	4b8000ef          	jal	71c <action_inventory(unsigned char)>
#         uart_send_cstr("\r\n");
     268:	00002537          	lui	a0,0x2
     26c:	c6450513          	addi	a0,a0,-924 # 1c64 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x470>
# }
     270:	04812403          	lw	s0,72(sp)
     274:	04c12083          	lw	ra,76(sp)
     278:	04412483          	lw	s1,68(sp)
     27c:	04012903          	lw	s2,64(sp)
     280:	03c12983          	lw	s3,60(sp)
     284:	03812a03          	lw	s4,56(sp)
     288:	05010113          	addi	sp,sp,80
#         uart_send_cstr("not understood\r\n\r\n");
     28c:	2d40106f          	j	1560 <uart_send_cstr(char const*)>
#     } else if (string_equals_cstr(cmd, "t")) {
     290:	00002637          	lui	a2,0x2
     294:	c2860613          	addi	a2,a2,-984 # 1c28 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x434>
     298:	00048513          	mv	a0,s1
     29c:	00040593          	mv	a1,s0
     2a0:	e2dff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     2a4:	02050863          	beqz	a0,2d4 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x114>
# }
     2a8:	04812403          	lw	s0,72(sp)
     2ac:	04c12083          	lw	ra,76(sp)
     2b0:	04412483          	lw	s1,68(sp)
#         action_take(eid, args);
     2b4:	000a0593          	mv	a1,s4
     2b8:	00098613          	mv	a2,s3
# }
     2bc:	03812a03          	lw	s4,56(sp)
     2c0:	03c12983          	lw	s3,60(sp)
#         action_take(eid, args);
     2c4:	00090513          	mv	a0,s2
# }
     2c8:	04012903          	lw	s2,64(sp)
     2cc:	05010113          	addi	sp,sp,80
#         action_take(eid, args);
     2d0:	5380006f          	j	808 <action_take(unsigned char, span<char>)>
#     } else if (string_equals_cstr(cmd, "d")) {
     2d4:	00002637          	lui	a2,0x2
     2d8:	c2c60613          	addi	a2,a2,-980 # 1c2c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x438>
     2dc:	00048513          	mv	a0,s1
     2e0:	00040593          	mv	a1,s0
     2e4:	de9ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     2e8:	02050863          	beqz	a0,318 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x158>
# }
     2ec:	04812403          	lw	s0,72(sp)
     2f0:	04c12083          	lw	ra,76(sp)
     2f4:	04412483          	lw	s1,68(sp)
#         action_drop(eid, args);
     2f8:	000a0593          	mv	a1,s4
     2fc:	00098613          	mv	a2,s3
# }
     300:	03812a03          	lw	s4,56(sp)
     304:	03c12983          	lw	s3,60(sp)
#         action_drop(eid, args);
     308:	00090513          	mv	a0,s2
# }
     30c:	04012903          	lw	s2,64(sp)
     310:	05010113          	addi	sp,sp,80
#         action_drop(eid, args);
     314:	6b00006f          	j	9c4 <action_drop(unsigned char, span<char>)>
#     } else if (string_equals_cstr(cmd, "n")) {
     318:	00002637          	lui	a2,0x2
     31c:	00040593          	mv	a1,s0
     320:	c3060613          	addi	a2,a2,-976 # 1c30 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x43c>
     324:	00048513          	mv	a0,s1
     328:	da5ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
#         action_go(eid, 1);
     32c:	00100593          	li	a1,1
#     } else if (string_equals_cstr(cmd, "n")) {
     330:	02051063          	bnez	a0,350 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x190>
#     } else if (string_equals_cstr(cmd, "e")) {
     334:	00002637          	lui	a2,0x2
     338:	bcc60613          	addi	a2,a2,-1076 # 1bcc <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x3d8>
     33c:	00048513          	mv	a0,s1
     340:	00040593          	mv	a1,s0
     344:	d89ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     348:	02050663          	beqz	a0,374 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x1b4>
#         action_go(eid, 2);
     34c:	00200593          	li	a1,2
# }
     350:	04812403          	lw	s0,72(sp)
     354:	04c12083          	lw	ra,76(sp)
     358:	04412483          	lw	s1,68(sp)
     35c:	03c12983          	lw	s3,60(sp)
     360:	03812a03          	lw	s4,56(sp)
#         action_go(eid, 2);
     364:	00090513          	mv	a0,s2
# }
     368:	04012903          	lw	s2,64(sp)
     36c:	05010113          	addi	sp,sp,80
#         action_go(eid, 2);
     370:	0110006f          	j	b80 <action_go(unsigned char, unsigned char)>
#     } else if (string_equals_cstr(cmd, "s")) {
     374:	00002637          	lui	a2,0x2
     378:	00040593          	mv	a1,s0
     37c:	c3460613          	addi	a2,a2,-972 # 1c34 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x440>
     380:	00048513          	mv	a0,s1
     384:	d49ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
#         action_go(eid, 3);
     388:	00300593          	li	a1,3
#     } else if (string_equals_cstr(cmd, "s")) {
     38c:	fc0512e3          	bnez	a0,350 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x190>
#     } else if (string_equals_cstr(cmd, "w")) {
     390:	00002637          	lui	a2,0x2
     394:	00040593          	mv	a1,s0
     398:	c3860613          	addi	a2,a2,-968 # 1c38 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x444>
     39c:	00048513          	mv	a0,s1
     3a0:	d2dff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
#         action_go(eid, 4);
     3a4:	00400593          	li	a1,4
#     } else if (string_equals_cstr(cmd, "w")) {
     3a8:	fa0514e3          	bnez	a0,350 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x190>
#     } else if (string_equals_cstr(cmd, "g")) {
     3ac:	00002637          	lui	a2,0x2
     3b0:	c3c60613          	addi	a2,a2,-964 # 1c3c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x448>
     3b4:	00048513          	mv	a0,s1
     3b8:	00040593          	mv	a1,s0
     3bc:	d11ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     3c0:	02050863          	beqz	a0,3f0 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x230>
# }
     3c4:	04812403          	lw	s0,72(sp)
     3c8:	04c12083          	lw	ra,76(sp)
     3cc:	04412483          	lw	s1,68(sp)
#         action_give(eid, args);
     3d0:	000a0593          	mv	a1,s4
     3d4:	00098613          	mv	a2,s3
# }
     3d8:	03812a03          	lw	s4,56(sp)
     3dc:	03c12983          	lw	s3,60(sp)
#         action_give(eid, args);
     3e0:	00090513          	mv	a0,s2
# }
     3e4:	04012903          	lw	s2,64(sp)
     3e8:	05010113          	addi	sp,sp,80
#         action_give(eid, args);
     3ec:	0c90006f          	j	cb4 <action_give(unsigned char, span<char>)>
#     } else if (string_equals_cstr(cmd, "m")) {
     3f0:	00002637          	lui	a2,0x2
     3f4:	c4060613          	addi	a2,a2,-960 # 1c40 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x44c>
     3f8:	00048513          	mv	a0,s1
     3fc:	00040593          	mv	a1,s0
     400:	ccdff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     404:	02050263          	beqz	a0,428 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x268>
# }
     408:	04812403          	lw	s0,72(sp)
     40c:	04c12083          	lw	ra,76(sp)
     410:	04412483          	lw	s1,68(sp)
     414:	04012903          	lw	s2,64(sp)
     418:	03c12983          	lw	s3,60(sp)
     41c:	03812a03          	lw	s4,56(sp)
     420:	05010113          	addi	sp,sp,80
#         action_mem_test();
     424:	1880106f          	j	15ac <action_mem_test()>
#     } else if (string_equals_cstr(cmd, "sds")) {
     428:	01012503          	lw	a0,16(sp)
     42c:	01412583          	lw	a1,20(sp)
     430:	00002637          	lui	a2,0x2
     434:	c4460613          	addi	a2,a2,-956 # 1c44 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x450>
     438:	c95ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     43c:	02050263          	beqz	a0,460 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x2a0>
# }
     440:	04812403          	lw	s0,72(sp)
     444:	04c12083          	lw	ra,76(sp)
     448:	04412483          	lw	s1,68(sp)
     44c:	04012903          	lw	s2,64(sp)
     450:	03c12983          	lw	s3,60(sp)
     454:	03812a03          	lw	s4,56(sp)
     458:	05010113          	addi	sp,sp,80
#         action_sdcard_status();
     45c:	2500106f          	j	16ac <action_sdcard_status()>
#     } else if (string_equals_cstr(cmd, "sdr")) {
     460:	01012503          	lw	a0,16(sp)
     464:	01412583          	lw	a1,20(sp)
     468:	00002637          	lui	a2,0x2
     46c:	c4860613          	addi	a2,a2,-952 # 1c48 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x454>
     470:	c5dff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     474:	02050663          	beqz	a0,4a0 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x2e0>
# }
     478:	04812403          	lw	s0,72(sp)
#         action_sdcard_read(args);
     47c:	01812503          	lw	a0,24(sp)
     480:	01c12583          	lw	a1,28(sp)
# }
     484:	04c12083          	lw	ra,76(sp)
     488:	04412483          	lw	s1,68(sp)
     48c:	04012903          	lw	s2,64(sp)
     490:	03c12983          	lw	s3,60(sp)
     494:	03812a03          	lw	s4,56(sp)
     498:	05010113          	addi	sp,sp,80
#         action_sdcard_read(args);
     49c:	2e90006f          	j	f84 <action_sdcard_read(span<char>)>
#     } else if (string_equals_cstr(cmd, "sdw")) {
     4a0:	01012503          	lw	a0,16(sp)
     4a4:	01412583          	lw	a1,20(sp)
     4a8:	00002637          	lui	a2,0x2
     4ac:	c4c60613          	addi	a2,a2,-948 # 1c4c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x458>
     4b0:	c1dff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     4b4:	02050663          	beqz	a0,4e0 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x320>
# }
     4b8:	04812403          	lw	s0,72(sp)
#         action_sdcard_write(args);
     4bc:	01812503          	lw	a0,24(sp)
     4c0:	01c12583          	lw	a1,28(sp)
# }
     4c4:	04c12083          	lw	ra,76(sp)
     4c8:	04412483          	lw	s1,68(sp)
     4cc:	04012903          	lw	s2,64(sp)
     4d0:	03c12983          	lw	s3,60(sp)
     4d4:	03812a03          	lw	s4,56(sp)
     4d8:	05010113          	addi	sp,sp,80
#         action_sdcard_write(args);
     4dc:	3390006f          	j	1014 <action_sdcard_write(span<char>)>
#     } else if (string_equals_cstr(cmd, "q")) {
     4e0:	01012503          	lw	a0,16(sp)
     4e4:	01412583          	lw	a1,20(sp)
     4e8:	00002637          	lui	a2,0x2
     4ec:	c5060613          	addi	a2,a2,-944 # 1c50 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x45c>
     4f0:	bddff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     4f4:	00051863          	bnez	a0,504 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0x344>
#         uart_send_cstr("not understood\r\n\r\n");
     4f8:	00002537          	lui	a0,0x2
     4fc:	c5450513          	addi	a0,a0,-940 # 1c54 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x460>
     500:	d71ff06f          	j	270 <handle_input(unsigned char, cursor_buffer<char, 160u>&)+0xb0>
# }
     504:	04c12083          	lw	ra,76(sp)
     508:	04812403          	lw	s0,72(sp)
     50c:	04412483          	lw	s1,68(sp)
     510:	04012903          	lw	s2,64(sp)
     514:	03c12983          	lw	s3,60(sp)
     518:	03812a03          	lw	s4,56(sp)
     51c:	05010113          	addi	sp,sp,80
     520:	00008067          	ret

00000524 <print_location(unsigned char, unsigned char)>:
# 
# static auto print_location(location_id_t const lid,
#                            entity_id_t const eid_excluded_from_output) -> void {
     524:	fd010113          	addi	sp,sp,-48
     528:	02812423          	sw	s0,40(sp)
     52c:	03212023          	sw	s2,32(sp)
     530:	02112623          	sw	ra,44(sp)
     534:	02912223          	sw	s1,36(sp)
     538:	01312e23          	sw	s3,28(sp)
     53c:	01412c23          	sw	s4,24(sp)
     540:	01512a23          	sw	s5,20(sp)
     544:	01612823          	sw	s6,16(sp)
     548:	01712623          	sw	s7,12(sp)
     54c:	01812423          	sw	s8,8(sp)
#     return objects[id];
# }
# 
# static auto location_by_id(location_id_t const id) -> location& {
#     if constexpr (safe_arrays) {
#         if (id >= sizeof(locations) / sizeof(location)) {
     550:	00400713          	li	a4,4
#                            entity_id_t const eid_excluded_from_output) -> void {
     554:	00058913          	mv	s2,a1
     558:	00002437          	lui	s0,0x2
#         if (id >= sizeof(locations) / sizeof(location)) {
     55c:	10a76663          	bltu	a4,a0,668 <print_location(unsigned char, unsigned char)+0x144>
     560:	ffc40793          	addi	a5,s0,-4 # 1ffc <locations>
#             return locations[0];
#         }
#     }
#     return locations[id];
     564:	00251413          	slli	s0,a0,0x2
     568:	00a40433          	add	s0,s0,a0
     56c:	00341413          	slli	s0,s0,0x3
     570:	00a40433          	add	s0,s0,a0
     574:	00241413          	slli	s0,s0,0x2
     578:	00878433          	add	s0,a5,s0
#     uart_send_cstr("u r in ");
     57c:	00002537          	lui	a0,0x2
     580:	c6850513          	addi	a0,a0,-920 # 1c68 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x474>
     584:	7dd000ef          	jal	1560 <uart_send_cstr(char const*)>
#     uart_send_cstr(loc.name);
     588:	00042503          	lw	a0,0(s0)
     58c:	000029b7          	lui	s3,0x2
#         }
#         return data[pos.index];
#     }
# 
#     auto for_each(callable_returns_void<Type> auto&& f) const -> void {
#         for (size_t i = 0; i < len; ++i) {
     590:	00000493          	li	s1,0
     594:	7cd000ef          	jal	1560 <uart_send_cstr(char const*)>
#     uart_send_cstr("\r\nu c: ");
     598:	00002537          	lui	a0,0x2
     59c:	c7050513          	addi	a0,a0,-912 # 1c70 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x47c>
     5a0:	7c1000ef          	jal	1560 <uart_send_cstr(char const*)>
#                 uart_send_cstr(", ");
     5a4:	00002ab7          	lui	s5,0x2
#         if (id >= sizeof(objects) / sizeof(object)) {
     5a8:	00300b13          	li	s6,3
     5ac:	f6898993          	addi	s3,s3,-152 # 1f68 <objects>
     5b0:	09442783          	lw	a5,148(s0)
     5b4:	0af4ee63          	bltu	s1,a5,670 <print_location(unsigned char, unsigned char)+0x14c>
#         if (!counter) {
     5b8:	00049863          	bnez	s1,5c8 <print_location(unsigned char, unsigned char)+0xa4>
#             uart_send_cstr("nothing");
     5bc:	00002537          	lui	a0,0x2
     5c0:	c7c50513          	addi	a0,a0,-900 # 1c7c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x488>
     5c4:	79d000ef          	jal	1560 <uart_send_cstr(char const*)>
#         uart_send_cstr("\r\n");
     5c8:	000029b7          	lui	s3,0x2
     5cc:	c6498513          	addi	a0,s3,-924 # 1c64 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x470>
     5d0:	791000ef          	jal	1560 <uart_send_cstr(char const*)>
#         loc.entities.for_each([&counter, eid_excluded_from_output](let id) {
     5d4:	000024b7          	lui	s1,0x2
#         mut counter = 0;
     5d8:	00000793          	li	a5,0
     5dc:	00000c13          	li	s8,0
#         if (id >= sizeof(entities) / sizeof(entity)) {
     5e0:	00200a13          	li	s4,2
     5e4:	f7848493          	addi	s1,s1,-136 # 1f78 <entities>
#                 uart_send_cstr(", ");
     5e8:	00002ab7          	lui	s5,0x2
     5ec:	0a042703          	lw	a4,160(s0)
     5f0:	0aec6a63          	bltu	s8,a4,6a4 <print_location(unsigned char, unsigned char)+0x180>
#         if (counter != 0) {
     5f4:	00078863          	beqz	a5,604 <print_location(unsigned char, unsigned char)+0xe0>
#             uart_send_cstr(" is here\r\n");
     5f8:	00002537          	lui	a0,0x2
     5fc:	c8450513          	addi	a0,a0,-892 # 1c84 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x490>
     600:	761000ef          	jal	1560 <uart_send_cstr(char const*)>
#         uart_send_cstr("exits: ");
     604:	00002537          	lui	a0,0x2
     608:	c9050513          	addi	a0,a0,-880 # 1c90 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x49c>
     60c:	755000ef          	jal	1560 <uart_send_cstr(char const*)>
#         lse.for_each([&counter](let& lnk) {
     610:	00440913          	addi	s2,s0,4
     614:	00000493          	li	s1,0
#                 uart_send_cstr(", ");
     618:	00002a37          	lui	s4,0x2
     61c:	01042783          	lw	a5,16(s0)
     620:	0cf4ea63          	bltu	s1,a5,6f4 <print_location(unsigned char, unsigned char)+0x1d0>
#         if (counter == 0) {
     624:	00049863          	bnez	s1,634 <print_location(unsigned char, unsigned char)+0x110>
#             uart_send_cstr("none");
     628:	00002537          	lui	a0,0x2
     62c:	c9850513          	addi	a0,a0,-872 # 1c98 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x4a4>
     630:	731000ef          	jal	1560 <uart_send_cstr(char const*)>
# }
     634:	02812403          	lw	s0,40(sp)
     638:	02c12083          	lw	ra,44(sp)
     63c:	02412483          	lw	s1,36(sp)
     640:	02012903          	lw	s2,32(sp)
     644:	01812a03          	lw	s4,24(sp)
     648:	01412a83          	lw	s5,20(sp)
     64c:	01012b03          	lw	s6,16(sp)
     650:	00c12b83          	lw	s7,12(sp)
     654:	00812c03          	lw	s8,8(sp)
#         uart_send_cstr("\r\n");
     658:	c6498513          	addi	a0,s3,-924
# }
     65c:	01c12983          	lw	s3,28(sp)
     660:	03010113          	addi	sp,sp,48
#         uart_send_cstr("\r\n");
     664:	6fd0006f          	j	1560 <uart_send_cstr(char const*)>
     668:	ffc40413          	addi	s0,s0,-4
     66c:	f11ff06f          	j	57c <print_location(unsigned char, unsigned char)+0x58>
#             f(data[i]);
     670:	009407b3          	add	a5,s0,s1
     674:	0147ca03          	lbu	s4,20(a5)
#             if (counter++) {
     678:	00048663          	beqz	s1,684 <print_location(unsigned char, unsigned char)+0x160>
#                 uart_send_cstr(", ");
     67c:	c78a8513          	addi	a0,s5,-904 # 1c78 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x484>
     680:	6e1000ef          	jal	1560 <uart_send_cstr(char const*)>
#             return objects[0];
     684:	00098793          	mv	a5,s3
#         if (id >= sizeof(objects) / sizeof(object)) {
     688:	014b6663          	bltu	s6,s4,694 <print_location(unsigned char, unsigned char)+0x170>
#     return objects[id];
     68c:	002a1a13          	slli	s4,s4,0x2
     690:	014987b3          	add	a5,s3,s4
#             uart_send_cstr(object_by_id(id).name);
     694:	0007a503          	lw	a0,0(a5)
#         for (size_t i = 0; i < len; ++i) {
     698:	00148493          	addi	s1,s1,1
     69c:	6c5000ef          	jal	1560 <uart_send_cstr(char const*)>
     6a0:	f11ff06f          	j	5b0 <print_location(unsigned char, unsigned char)+0x8c>
#             f(data[i]);
     6a4:	01840733          	add	a4,s0,s8
     6a8:	09874b83          	lbu	s7,152(a4)
#             if (id == eid_excluded_from_output) {
     6ac:	05790063          	beq	s2,s7,6ec <print_location(unsigned char, unsigned char)+0x1c8>
#             if (counter++) {
     6b0:	00178b13          	addi	s6,a5,1
     6b4:	00078663          	beqz	a5,6c0 <print_location(unsigned char, unsigned char)+0x19c>
#                 uart_send_cstr(", ");
     6b8:	c78a8513          	addi	a0,s5,-904
     6bc:	6a5000ef          	jal	1560 <uart_send_cstr(char const*)>
#             return entities[0];
     6c0:	00048793          	mv	a5,s1
#         if (id >= sizeof(entities) / sizeof(entity)) {
     6c4:	017a6e63          	bltu	s4,s7,6e0 <print_location(unsigned char, unsigned char)+0x1bc>
#     return entities[id];
     6c8:	001b9793          	slli	a5,s7,0x1
     6cc:	017787b3          	add	a5,a5,s7
     6d0:	00279793          	slli	a5,a5,0x2
     6d4:	417787b3          	sub	a5,a5,s7
     6d8:	00279793          	slli	a5,a5,0x2
     6dc:	00f487b3          	add	a5,s1,a5
#             uart_send_cstr(entity_by_id(id).name);
     6e0:	0007a503          	lw	a0,0(a5)
     6e4:	67d000ef          	jal	1560 <uart_send_cstr(char const*)>
#             if (counter++) {
     6e8:	000b0793          	mv	a5,s6
#         for (size_t i = 0; i < len; ++i) {
     6ec:	001c0c13          	addi	s8,s8,1
     6f0:	efdff06f          	j	5ec <print_location(unsigned char, unsigned char)+0xc8>
     6f4:	00094a83          	lbu	s5,0(s2)
#             if (counter++) {
     6f8:	00048663          	beqz	s1,704 <print_location(unsigned char, unsigned char)+0x1e0>
#                 uart_send_cstr(", ");
     6fc:	c78a0513          	addi	a0,s4,-904 # 1c78 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x484>
     700:	661000ef          	jal	1560 <uart_send_cstr(char const*)>
#             uart_send_cstr(link_by_id(lnk.link));
     704:	000a8513          	mv	a0,s5
     708:	62d000ef          	jal	1534 <link_by_id(unsigned char)>
     70c:	655000ef          	jal	1560 <uart_send_cstr(char const*)>
     710:	00148493          	addi	s1,s1,1
     714:	00290913          	addi	s2,s2,2
     718:	f05ff06f          	j	61c <print_location(unsigned char, unsigned char)+0xf8>

0000071c <action_inventory(unsigned char)>:
# static auto action_inventory(entity_id_t const eid) -> void {
     71c:	fe010113          	addi	sp,sp,-32
     720:	00912a23          	sw	s1,20(sp)
     724:	00050493          	mv	s1,a0
#     uart_send_cstr("u have: ");
     728:	00002537          	lui	a0,0x2
     72c:	ca050513          	addi	a0,a0,-864 # 1ca0 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x4ac>
# static auto action_inventory(entity_id_t const eid) -> void {
     730:	00812c23          	sw	s0,24(sp)
     734:	00112e23          	sw	ra,28(sp)
     738:	01212823          	sw	s2,16(sp)
     73c:	01312623          	sw	s3,12(sp)
     740:	01412423          	sw	s4,8(sp)
     744:	01512223          	sw	s5,4(sp)
#     uart_send_cstr("u have: ");
     748:	619000ef          	jal	1560 <uart_send_cstr(char const*)>
#         if (id >= sizeof(entities) / sizeof(entity)) {
     74c:	00200713          	li	a4,2
     750:	00002437          	lui	s0,0x2
     754:	06976c63          	bltu	a4,s1,7cc <action_inventory(unsigned char)+0xb0>
     758:	f7840793          	addi	a5,s0,-136 # 1f78 <entities>
#     return entities[id];
     75c:	00149413          	slli	s0,s1,0x1
     760:	00940433          	add	s0,s0,s1
     764:	00241413          	slli	s0,s0,0x2
     768:	40940433          	sub	s0,s0,s1
     76c:	00241413          	slli	s0,s0,0x2
     770:	00878433          	add	s0,a5,s0
     774:	00002937          	lui	s2,0x2
     778:	00000493          	li	s1,0
#             uart_send_cstr(", ");
     77c:	00002a37          	lui	s4,0x2
#         if (id >= sizeof(objects) / sizeof(object)) {
     780:	00300a93          	li	s5,3
     784:	f6890913          	addi	s2,s2,-152 # 1f68 <objects>
     788:	02842783          	lw	a5,40(s0)
     78c:	04f4e463          	bltu	s1,a5,7d4 <action_inventory(unsigned char)+0xb8>
#     if (counter == 0) {
     790:	00049863          	bnez	s1,7a0 <action_inventory(unsigned char)+0x84>
#         uart_send_cstr("nothing");
     794:	00002537          	lui	a0,0x2
     798:	c7c50513          	addi	a0,a0,-900 # 1c7c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x488>
     79c:	5c5000ef          	jal	1560 <uart_send_cstr(char const*)>
# }
     7a0:	01812403          	lw	s0,24(sp)
     7a4:	01c12083          	lw	ra,28(sp)
     7a8:	01412483          	lw	s1,20(sp)
     7ac:	01012903          	lw	s2,16(sp)
     7b0:	00c12983          	lw	s3,12(sp)
     7b4:	00812a03          	lw	s4,8(sp)
     7b8:	00412a83          	lw	s5,4(sp)
#     uart_send_cstr("\r\n");
     7bc:	00002537          	lui	a0,0x2
     7c0:	c6450513          	addi	a0,a0,-924 # 1c64 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x470>
# }
     7c4:	02010113          	addi	sp,sp,32
#     uart_send_cstr("\r\n");
     7c8:	5990006f          	j	1560 <uart_send_cstr(char const*)>
     7cc:	f7840413          	addi	s0,s0,-136
     7d0:	fa5ff06f          	j	774 <action_inventory(unsigned char)+0x58>
#             f(data[i]);
     7d4:	009407b3          	add	a5,s0,s1
     7d8:	0087c983          	lbu	s3,8(a5)
#         if (counter++) {
     7dc:	00048663          	beqz	s1,7e8 <action_inventory(unsigned char)+0xcc>
#             uart_send_cstr(", ");
     7e0:	c78a0513          	addi	a0,s4,-904 # 1c78 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x484>
     7e4:	57d000ef          	jal	1560 <uart_send_cstr(char const*)>
#             return objects[0];
     7e8:	00090793          	mv	a5,s2
#         if (id >= sizeof(objects) / sizeof(object)) {
     7ec:	013ae663          	bltu	s5,s3,7f8 <action_inventory(unsigned char)+0xdc>
#     return objects[id];
     7f0:	00299993          	slli	s3,s3,0x2
     7f4:	013907b3          	add	a5,s2,s3
#         uart_send_cstr(object_by_id(id).name);
     7f8:	0007a503          	lw	a0,0(a5)
#         for (size_t i = 0; i < len; ++i) {
     7fc:	00148493          	addi	s1,s1,1
     800:	561000ef          	jal	1560 <uart_send_cstr(char const*)>
     804:	f85ff06f          	j	788 <action_inventory(unsigned char)+0x6c>

00000808 <action_take(unsigned char, span<char>)>:
# static auto action_take(entity_id_t const eid, string const args) -> void {
     808:	fb010113          	addi	sp,sp,-80
     80c:	04112623          	sw	ra,76(sp)
     810:	04812423          	sw	s0,72(sp)
     814:	04912223          	sw	s1,68(sp)
     818:	05212023          	sw	s2,64(sp)
     81c:	03312e23          	sw	s3,60(sp)
     820:	03412c23          	sw	s4,56(sp)
     824:	03512a23          	sw	s5,52(sp)
     828:	03612823          	sw	s6,48(sp)
     82c:	03712623          	sw	s7,44(sp)
     830:	03812423          	sw	s8,40(sp)
     834:	00b12423          	sw	a1,8(sp)
     838:	00c12623          	sw	a2,12(sp)
#     if (args.is_empty()) {
     83c:	02b61e63          	bne	a2,a1,878 <action_take(unsigned char, span<char>)+0x70>
#         uart_send_cstr("take what\r\n\r\n");
     840:	00002537          	lui	a0,0x2
     844:	cac50513          	addi	a0,a0,-852 # 1cac <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x4b8>
# }
     848:	04812403          	lw	s0,72(sp)
     84c:	04c12083          	lw	ra,76(sp)
     850:	04412483          	lw	s1,68(sp)
     854:	04012903          	lw	s2,64(sp)
     858:	03c12983          	lw	s3,60(sp)
     85c:	03812a03          	lw	s4,56(sp)
     860:	03412a83          	lw	s5,52(sp)
     864:	03012b03          	lw	s6,48(sp)
     868:	02c12b83          	lw	s7,44(sp)
     86c:	02812c03          	lw	s8,40(sp)
     870:	05010113          	addi	sp,sp,80
#         uart_send_cstr(" not here\r\n\r\n");
     874:	4ed0006f          	j	1560 <uart_send_cstr(char const*)>
     878:	000024b7          	lui	s1,0x2
#         if (id >= sizeof(entities) / sizeof(entity)) {
     87c:	00200713          	li	a4,2
     880:	f7848793          	addi	a5,s1,-136 # 1f78 <entities>
     884:	00058b13          	mv	s6,a1
     888:	00060a93          	mv	s5,a2
#             return entities[0];
     88c:	f7848493          	addi	s1,s1,-136
#         if (id >= sizeof(entities) / sizeof(entity)) {
     890:	00a76e63          	bltu	a4,a0,8ac <action_take(unsigned char, span<char>)+0xa4>
#     return entities[id];
     894:	00151493          	slli	s1,a0,0x1
     898:	00a484b3          	add	s1,s1,a0
     89c:	00249493          	slli	s1,s1,0x2
     8a0:	40a484b3          	sub	s1,s1,a0
     8a4:	00249493          	slli	s1,s1,0x2
     8a8:	009784b3          	add	s1,a5,s1
#     mut& lso = location_by_id(ent.location).objects;
     8ac:	0044c783          	lbu	a5,4(s1)
#         if (id >= sizeof(locations) / sizeof(location)) {
     8b0:	00002437          	lui	s0,0x2
     8b4:	00400693          	li	a3,4
     8b8:	ffc40713          	addi	a4,s0,-4 # 1ffc <locations>
#             return locations[0];
     8bc:	ffc40413          	addi	s0,s0,-4
#         if (id >= sizeof(locations) / sizeof(location)) {
     8c0:	00f6ee63          	bltu	a3,a5,8dc <action_take(unsigned char, span<char>)+0xd4>
#     return locations[id];
     8c4:	00279413          	slli	s0,a5,0x2
     8c8:	00f40433          	add	s0,s0,a5
     8cc:	00341413          	slli	s0,s0,0x3
     8d0:	00f40433          	add	s0,s0,a5
     8d4:	00241413          	slli	s0,s0,0x2
     8d8:	00870433          	add	s0,a4,s0
#     }
# 
#     auto for_each_until_false(callable_returns_bool<Type> auto&& f) const
#         -> position {
#         size_t i = 0;
#         for (; i < len; ++i) {
     8dc:	09442983          	lw	s3,148(s0)
     8e0:	00002bb7          	lui	s7,0x2
#         size_t i = 0;
     8e4:	00000a13          	li	s4,0
#         if (id >= sizeof(objects) / sizeof(object)) {
     8e8:	00300c13          	li	s8,3
     8ec:	f68b8b93          	addi	s7,s7,-152 # 1f68 <objects>
#         for (; i < len; ++i) {
     8f0:	033a1063          	bne	s4,s3,910 <action_take(unsigned char, span<char>)+0x108>
#     str.for_each([](let ch) { uart_send_char(ch); });
     8f4:	01810513          	addi	a0,sp,24
     8f8:	01612c23          	sw	s6,24(sp)
     8fc:	01512e23          	sw	s5,28(sp)
     900:	6f5000ef          	jal	17f4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
#         uart_send_cstr(" not here\r\n\r\n");
     904:	00002537          	lui	a0,0x2
     908:	cbc50513          	addi	a0,a0,-836 # 1cbc <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x4c8>
     90c:	f3dff06f          	j	848 <action_take(unsigned char, span<char>)+0x40>
#             if (!f(data[i])) {
     910:	01440933          	add	s2,s0,s4
     914:	01494783          	lbu	a5,20(s2)
#             return objects[0];
     918:	000b8713          	mv	a4,s7
#         if (id >= sizeof(objects) / sizeof(object)) {
     91c:	00fc6663          	bltu	s8,a5,928 <action_take(unsigned char, span<char>)+0x120>
#     return objects[id];
     920:	00279793          	slli	a5,a5,0x2
     924:	00fb8733          	add	a4,s7,a5
#         if (string_equals_cstr(args, object_by_id(id).name)) {
     928:	00072603          	lw	a2,0(a4)
     92c:	00812503          	lw	a0,8(sp)
     930:	00c12583          	lw	a1,12(sp)
     934:	f98ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     938:	00051663          	bnez	a0,944 <action_take(unsigned char, span<char>)+0x13c>
#         for (; i < len; ++i) {
     93c:	001a0a13          	addi	s4,s4,1
     940:	fb1ff06f          	j	8f0 <action_take(unsigned char, span<char>)+0xe8>
#                 return {};
     944:	00000713          	li	a4,0
#             if (pos.index >= len) {
     948:	013a7463          	bgeu	s4,s3,950 <action_take(unsigned char, span<char>)+0x148>
#         return data[pos.index];
     94c:	01494703          	lbu	a4,20(s2)
#             if (len == Size - 1) {
     950:	0284a783          	lw	a5,40(s1)
     954:	01f00693          	li	a3,31
     958:	02d78863          	beq	a5,a3,988 <action_take(unsigned char, span<char>)+0x180>
#         data[len] = elem;
     95c:	00f486b3          	add	a3,s1,a5
     960:	00e68423          	sb	a4,8(a3)
#         ++len;
     964:	00178793          	addi	a5,a5,1
     968:	02f4a423          	sw	a5,40(s1)
#             if (pos.index >= len) {
     96c:	013a7e63          	bgeu	s4,s3,988 <action_take(unsigned char, span<char>)+0x180>
#         --len;
     970:	fff98793          	addi	a5,s3,-1
     974:	08f42a23          	sw	a5,148(s0)
     978:	008989b3          	add	s3,s3,s0
     97c:	00090793          	mv	a5,s2
#         for (size_t i = pos.index; i < len; ++i) {
     980:	00178793          	addi	a5,a5,1
     984:	03379a63          	bne	a5,s3,9b8 <action_take(unsigned char, span<char>)+0x1b0>
# }
     988:	04c12083          	lw	ra,76(sp)
     98c:	04812403          	lw	s0,72(sp)
     990:	04412483          	lw	s1,68(sp)
     994:	04012903          	lw	s2,64(sp)
     998:	03c12983          	lw	s3,60(sp)
     99c:	03812a03          	lw	s4,56(sp)
     9a0:	03412a83          	lw	s5,52(sp)
     9a4:	03012b03          	lw	s6,48(sp)
     9a8:	02c12b83          	lw	s7,44(sp)
     9ac:	02812c03          	lw	s8,40(sp)
     9b0:	05010113          	addi	sp,sp,80
     9b4:	00008067          	ret
#             data[i] = data[i + 1];
     9b8:	0147c703          	lbu	a4,20(a5)
     9bc:	00e789a3          	sb	a4,19(a5)
#         for (size_t i = pos.index; i < len; ++i) {
     9c0:	fc1ff06f          	j	980 <action_take(unsigned char, span<char>)+0x178>

000009c4 <action_drop(unsigned char, span<char>)>:
# static auto action_drop(entity_id_t const eid, string const args) -> void {
     9c4:	fb010113          	addi	sp,sp,-80
     9c8:	04112623          	sw	ra,76(sp)
     9cc:	04812423          	sw	s0,72(sp)
     9d0:	04912223          	sw	s1,68(sp)
     9d4:	05212023          	sw	s2,64(sp)
     9d8:	03312e23          	sw	s3,60(sp)
     9dc:	03412c23          	sw	s4,56(sp)
     9e0:	03512a23          	sw	s5,52(sp)
     9e4:	03612823          	sw	s6,48(sp)
     9e8:	03712623          	sw	s7,44(sp)
     9ec:	00b12423          	sw	a1,8(sp)
     9f0:	00c12623          	sw	a2,12(sp)
#     if (args.size() == 0) {
     9f4:	02b61c63          	bne	a2,a1,a2c <action_drop(unsigned char, span<char>)+0x68>
#         uart_send_cstr("drop what\r\n\r\n");
     9f8:	00002537          	lui	a0,0x2
     9fc:	ccc50513          	addi	a0,a0,-820 # 1ccc <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x4d8>
# }
     a00:	04812403          	lw	s0,72(sp)
     a04:	04c12083          	lw	ra,76(sp)
     a08:	04412483          	lw	s1,68(sp)
     a0c:	04012903          	lw	s2,64(sp)
     a10:	03c12983          	lw	s3,60(sp)
     a14:	03812a03          	lw	s4,56(sp)
     a18:	03412a83          	lw	s5,52(sp)
     a1c:	03012b03          	lw	s6,48(sp)
     a20:	02c12b83          	lw	s7,44(sp)
     a24:	05010113          	addi	sp,sp,80
#         uart_send_cstr("\r\n\r\n");
     a28:	3390006f          	j	1560 <uart_send_cstr(char const*)>
     a2c:	00002437          	lui	s0,0x2
#         if (id >= sizeof(entities) / sizeof(entity)) {
     a30:	00200713          	li	a4,2
     a34:	f7840793          	addi	a5,s0,-136 # 1f78 <entities>
     a38:	00058a93          	mv	s5,a1
     a3c:	00060a13          	mv	s4,a2
#             return entities[0];
     a40:	f7840413          	addi	s0,s0,-136
#         if (id >= sizeof(entities) / sizeof(entity)) {
     a44:	00a76e63          	bltu	a4,a0,a60 <action_drop(unsigned char, span<char>)+0x9c>
#     return entities[id];
     a48:	00151413          	slli	s0,a0,0x1
     a4c:	00a40433          	add	s0,s0,a0
     a50:	00241413          	slli	s0,s0,0x2
     a54:	40a40433          	sub	s0,s0,a0
     a58:	00241413          	slli	s0,s0,0x2
     a5c:	00878433          	add	s0,a5,s0
#         for (; i < len; ++i) {
     a60:	02842903          	lw	s2,40(s0)
     a64:	00002b37          	lui	s6,0x2
#         size_t i = 0;
     a68:	00000993          	li	s3,0
#         if (id >= sizeof(objects) / sizeof(object)) {
     a6c:	00300b93          	li	s7,3
     a70:	f68b0b13          	addi	s6,s6,-152 # 1f68 <objects>
#         for (; i < len; ++i) {
     a74:	03299663          	bne	s3,s2,aa0 <action_drop(unsigned char, span<char>)+0xdc>
#         uart_send_cstr("u don't have ");
     a78:	00002537          	lui	a0,0x2
     a7c:	cdc50513          	addi	a0,a0,-804 # 1cdc <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x4e8>
     a80:	2e1000ef          	jal	1560 <uart_send_cstr(char const*)>
#     str.for_each([](let ch) { uart_send_char(ch); });
     a84:	01810513          	addi	a0,sp,24
     a88:	01512c23          	sw	s5,24(sp)
     a8c:	01412e23          	sw	s4,28(sp)
     a90:	565000ef          	jal	17f4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
#         uart_send_cstr("\r\n\r\n");
     a94:	00002537          	lui	a0,0x2
     a98:	86050513          	addi	a0,a0,-1952 # 1860 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x6c>
     a9c:	f65ff06f          	j	a00 <action_drop(unsigned char, span<char>)+0x3c>
#             if (!f(data[i])) {
     aa0:	013404b3          	add	s1,s0,s3
     aa4:	0084c783          	lbu	a5,8(s1)
#             return objects[0];
     aa8:	000b0713          	mv	a4,s6
#         if (id >= sizeof(objects) / sizeof(object)) {
     aac:	00fbe663          	bltu	s7,a5,ab8 <action_drop(unsigned char, span<char>)+0xf4>
#     return objects[id];
     ab0:	00279793          	slli	a5,a5,0x2
     ab4:	00fb0733          	add	a4,s6,a5
#         if (string_equals_cstr(args, object_by_id(id).name)) {
     ab8:	00072603          	lw	a2,0(a4)
     abc:	00812503          	lw	a0,8(sp)
     ac0:	00c12583          	lw	a1,12(sp)
     ac4:	e08ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     ac8:	00051663          	bnez	a0,ad4 <action_drop(unsigned char, span<char>)+0x110>
#         for (; i < len; ++i) {
     acc:	00198993          	addi	s3,s3,1
     ad0:	fa5ff06f          	j	a74 <action_drop(unsigned char, span<char>)+0xb0>
#     if (location_by_id(ent.location).objects.add(lso.at(pos))) {
     ad4:	00444703          	lbu	a4,4(s0)
#         if (id >= sizeof(locations) / sizeof(location)) {
     ad8:	000027b7          	lui	a5,0x2
     adc:	00400613          	li	a2,4
     ae0:	ffc78693          	addi	a3,a5,-4 # 1ffc <locations>
#             return locations[0];
     ae4:	ffc78793          	addi	a5,a5,-4
#         if (id >= sizeof(locations) / sizeof(location)) {
     ae8:	00e66e63          	bltu	a2,a4,b04 <action_drop(unsigned char, span<char>)+0x140>
#     return locations[id];
     aec:	00271793          	slli	a5,a4,0x2
     af0:	00e787b3          	add	a5,a5,a4
     af4:	00379793          	slli	a5,a5,0x3
     af8:	00e787b3          	add	a5,a5,a4
     afc:	00279793          	slli	a5,a5,0x2
     b00:	00f687b3          	add	a5,a3,a5
#                 return {};
     b04:	00000693          	li	a3,0
#             if (pos.index >= len) {
     b08:	0129f463          	bgeu	s3,s2,b10 <action_drop(unsigned char, span<char>)+0x14c>
#         return data[pos.index];
     b0c:	0084c683          	lbu	a3,8(s1)
#             if (len == Size - 1) {
     b10:	0947a703          	lw	a4,148(a5)
     b14:	07f00613          	li	a2,127
     b18:	02c70863          	beq	a4,a2,b48 <action_drop(unsigned char, span<char>)+0x184>
#         data[len] = elem;
     b1c:	00e78633          	add	a2,a5,a4
     b20:	00d60a23          	sb	a3,20(a2)
#         ++len;
     b24:	00170713          	addi	a4,a4,1
     b28:	08e7aa23          	sw	a4,148(a5)
#             if (pos.index >= len) {
     b2c:	0129fe63          	bgeu	s3,s2,b48 <action_drop(unsigned char, span<char>)+0x184>
#         --len;
     b30:	fff90793          	addi	a5,s2,-1
     b34:	02f42423          	sw	a5,40(s0)
     b38:	00890933          	add	s2,s2,s0
     b3c:	00048793          	mv	a5,s1
#         for (size_t i = pos.index; i < len; ++i) {
     b40:	00178793          	addi	a5,a5,1
     b44:	03279863          	bne	a5,s2,b74 <action_drop(unsigned char, span<char>)+0x1b0>
# }
     b48:	04c12083          	lw	ra,76(sp)
     b4c:	04812403          	lw	s0,72(sp)
     b50:	04412483          	lw	s1,68(sp)
     b54:	04012903          	lw	s2,64(sp)
     b58:	03c12983          	lw	s3,60(sp)
     b5c:	03812a03          	lw	s4,56(sp)
     b60:	03412a83          	lw	s5,52(sp)
     b64:	03012b03          	lw	s6,48(sp)
     b68:	02c12b83          	lw	s7,44(sp)
     b6c:	05010113          	addi	sp,sp,80
     b70:	00008067          	ret
#             data[i] = data[i + 1];
     b74:	0087c703          	lbu	a4,8(a5)
     b78:	00e783a3          	sb	a4,7(a5)
#         for (size_t i = pos.index; i < len; ++i) {
     b7c:	fc5ff06f          	j	b40 <action_drop(unsigned char, span<char>)+0x17c>

00000b80 <action_go(unsigned char, unsigned char)>:
#         if (id >= sizeof(entities) / sizeof(entity)) {
     b80:	000026b7          	lui	a3,0x2
     b84:	00200713          	li	a4,2
     b88:	f7868793          	addi	a5,a3,-136 # 1f78 <entities>
#             return entities[0];
     b8c:	f7868693          	addi	a3,a3,-136
#         if (id >= sizeof(entities) / sizeof(entity)) {
     b90:	00a76e63          	bltu	a4,a0,bac <action_go(unsigned char, unsigned char)+0x2c>
#     return entities[id];
     b94:	00151693          	slli	a3,a0,0x1
     b98:	00a686b3          	add	a3,a3,a0
     b9c:	00269693          	slli	a3,a3,0x2
     ba0:	40a686b3          	sub	a3,a3,a0
     ba4:	00269693          	slli	a3,a3,0x2
     ba8:	00d786b3          	add	a3,a5,a3
#     mut& loc = location_by_id(ent.location);
     bac:	0046c703          	lbu	a4,4(a3)
#         if (id >= sizeof(locations) / sizeof(location)) {
     bb0:	000027b7          	lui	a5,0x2
     bb4:	00400613          	li	a2,4
     bb8:	ffc78813          	addi	a6,a5,-4 # 1ffc <locations>
#             return locations[0];
     bbc:	ffc78793          	addi	a5,a5,-4
#         if (id >= sizeof(locations) / sizeof(location)) {
     bc0:	00e66e63          	bltu	a2,a4,bdc <action_go(unsigned char, unsigned char)+0x5c>
#     return locations[id];
     bc4:	00271793          	slli	a5,a4,0x2
     bc8:	00e787b3          	add	a5,a5,a4
     bcc:	00379793          	slli	a5,a5,0x3
     bd0:	00e787b3          	add	a5,a5,a4
     bd4:	00279793          	slli	a5,a5,0x2
     bd8:	00f807b3          	add	a5,a6,a5
#         for (; i < len; ++i) {
     bdc:	0107a883          	lw	a7,16(a5)
     be0:	00478613          	addi	a2,a5,4
#         size_t i = 0;
     be4:	00000713          	li	a4,0
#         for (; i < len; ++i) {
     be8:	01171863          	bne	a4,a7,bf8 <action_go(unsigned char, unsigned char)+0x78>
#         uart_send_cstr("cannot go there\r\n\r\n");
     bec:	00002537          	lui	a0,0x2
     bf0:	cec50513          	addi	a0,a0,-788 # 1cec <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x4f8>
     bf4:	16d0006f          	j	1560 <uart_send_cstr(char const*)>
#         if (lnk.link == link_id) {
     bf8:	00064303          	lbu	t1,0(a2)
     bfc:	00260613          	addi	a2,a2,2
     c00:	00b30663          	beq	t1,a1,c0c <action_go(unsigned char, unsigned char)+0x8c>
     c04:	00170713          	addi	a4,a4,1
     c08:	fe1ff06f          	j	be8 <action_go(unsigned char, unsigned char)+0x68>
#             if (pos.index >= len) {
     c0c:	07177863          	bgeu	a4,a7,c7c <action_go(unsigned char, unsigned char)+0xfc>
#         return data[pos.index];
     c10:	00171713          	slli	a4,a4,0x1
     c14:	00e78733          	add	a4,a5,a4
     c18:	00574603          	lbu	a2,5(a4)
#         if (id >= sizeof(locations) / sizeof(location)) {
     c1c:	00400593          	li	a1,4
#             return locations[0];
     c20:	00080713          	mv	a4,a6
#         if (id >= sizeof(locations) / sizeof(location)) {
     c24:	00c5ee63          	bltu	a1,a2,c40 <action_go(unsigned char, unsigned char)+0xc0>
#     return locations[id];
     c28:	00261713          	slli	a4,a2,0x2
     c2c:	00c70733          	add	a4,a4,a2
     c30:	00371713          	slli	a4,a4,0x3
     c34:	00c70733          	add	a4,a4,a2
     c38:	00271713          	slli	a4,a4,0x2
     c3c:	00e80733          	add	a4,a6,a4
#             if (len == Size - 1) {
     c40:	0a072583          	lw	a1,160(a4)
     c44:	00700813          	li	a6,7
     c48:	07058463          	beq	a1,a6,cb0 <action_go(unsigned char, unsigned char)+0x130>
#         data[len] = elem;
     c4c:	00b70833          	add	a6,a4,a1
     c50:	08a80c23          	sb	a0,152(a6)
#         ++len;
     c54:	00158593          	addi	a1,a1,1
     c58:	0ab72023          	sw	a1,160(a4)
#         for (size_t i = 0; i < len; ++i) {
     c5c:	00000813          	li	a6,0
     c60:	0a07a583          	lw	a1,160(a5)
     c64:	02b87a63          	bgeu	a6,a1,c98 <action_go(unsigned char, unsigned char)+0x118>
#             if (data[i] != elem) {
     c68:	01078733          	add	a4,a5,a6
     c6c:	09874883          	lbu	a7,152(a4)
     c70:	00a88a63          	beq	a7,a0,c84 <action_go(unsigned char, unsigned char)+0x104>
#         for (size_t i = 0; i < len; ++i) {
     c74:	00180813          	addi	a6,a6,1
     c78:	fe9ff06f          	j	c60 <action_go(unsigned char, unsigned char)+0xe0>
#                 return {};
     c7c:	00000613          	li	a2,0
     c80:	fa9ff06f          	j	c28 <action_go(unsigned char, unsigned char)+0xa8>
#             --len;
     c84:	fff58593          	addi	a1,a1,-1
     c88:	0ab7a023          	sw	a1,160(a5)
#             for (size_t j = i; j < len; ++j) {
     c8c:	00170513          	addi	a0,a4,1
     c90:	40f70733          	sub	a4,a4,a5
     c94:	00b76663          	bltu	a4,a1,ca0 <action_go(unsigned char, unsigned char)+0x120>
#         ent.location = lnk.location;
     c98:	00c68223          	sb	a2,4(a3)
     c9c:	00008067          	ret
#                 data[j] = data[j + 1];
     ca0:	09854703          	lbu	a4,152(a0)
     ca4:	08e50ba3          	sb	a4,151(a0)
     ca8:	00050713          	mv	a4,a0
     cac:	fe1ff06f          	j	c8c <action_go(unsigned char, unsigned char)+0x10c>
# }
     cb0:	00008067          	ret

00000cb4 <action_give(unsigned char, span<char>)>:
# static auto action_give(entity_id_t const eid, string const args) -> void {
     cb4:	f8010113          	addi	sp,sp,-128
     cb8:	06912a23          	sw	s1,116(sp)
     cbc:	00050493          	mv	s1,a0
#     let w1 = string_next_word(args);
     cc0:	03010513          	addi	a0,sp,48
# static auto action_give(entity_id_t const eid, string const args) -> void {
     cc4:	07212823          	sw	s2,112(sp)
     cc8:	07312623          	sw	s3,108(sp)
     ccc:	06112e23          	sw	ra,124(sp)
     cd0:	06812c23          	sw	s0,120(sp)
     cd4:	07412423          	sw	s4,104(sp)
     cd8:	07512223          	sw	s5,100(sp)
     cdc:	07612023          	sw	s6,96(sp)
     ce0:	05712e23          	sw	s7,92(sp)
     ce4:	05812c23          	sw	s8,88(sp)
     ce8:	05912a23          	sw	s9,84(sp)
     cec:	05a12823          	sw	s10,80(sp)
     cf0:	00b12423          	sw	a1,8(sp)
     cf4:	00c12623          	sw	a2,12(sp)
#     let w1 = string_next_word(args);
     cf8:	c3cff0ef          	jal	134 <string_next_word(span<char>)>
#     let obj_nm = w1.word;
     cfc:	03012903          	lw	s2,48(sp)
     d00:	03412983          	lw	s3,52(sp)
     d04:	01212c23          	sw	s2,24(sp)
     d08:	01312e23          	sw	s3,28(sp)
#     if (obj_nm.is_empty()) {
     d0c:	05299263          	bne	s3,s2,d50 <action_give(unsigned char, span<char>)+0x9c>
#         uart_send_cstr("give what\r\n\r\n");
     d10:	00002537          	lui	a0,0x2
     d14:	d0050513          	addi	a0,a0,-768 # 1d00 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x50c>
# }
     d18:	07812403          	lw	s0,120(sp)
     d1c:	07c12083          	lw	ra,124(sp)
     d20:	07412483          	lw	s1,116(sp)
     d24:	07012903          	lw	s2,112(sp)
     d28:	06c12983          	lw	s3,108(sp)
     d2c:	06812a03          	lw	s4,104(sp)
     d30:	06412a83          	lw	s5,100(sp)
     d34:	06012b03          	lw	s6,96(sp)
     d38:	05c12b83          	lw	s7,92(sp)
     d3c:	05812c03          	lw	s8,88(sp)
     d40:	05412c83          	lw	s9,84(sp)
     d44:	05012d03          	lw	s10,80(sp)
     d48:	08010113          	addi	sp,sp,128
#         uart_send_cstr(" is not here\r\n\r\n");
     d4c:	0150006f          	j	1560 <uart_send_cstr(char const*)>
#     let w2 = string_next_word(w1.rem);
     d50:	03812583          	lw	a1,56(sp)
     d54:	03c12603          	lw	a2,60(sp)
     d58:	04010513          	addi	a0,sp,64
     d5c:	bd8ff0ef          	jal	134 <string_next_word(span<char>)>
#     let to_ent_nm = w2.word;
     d60:	04012a83          	lw	s5,64(sp)
     d64:	04412b03          	lw	s6,68(sp)
     d68:	03512023          	sw	s5,32(sp)
     d6c:	03612223          	sw	s6,36(sp)
#     if (to_ent_nm.is_empty()) {
     d70:	015b1863          	bne	s6,s5,d80 <action_give(unsigned char, span<char>)+0xcc>
#         uart_send_cstr("give to whom\r\n\r\n");
     d74:	00002537          	lui	a0,0x2
     d78:	d1050513          	addi	a0,a0,-752 # 1d10 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x51c>
     d7c:	f9dff06f          	j	d18 <action_give(unsigned char, span<char>)+0x64>
#         if (id >= sizeof(entities) / sizeof(entity)) {
     d80:	00002437          	lui	s0,0x2
     d84:	00200793          	li	a5,2
     d88:	f7840a13          	addi	s4,s0,-136 # 1f78 <entities>
#             return entities[0];
     d8c:	f7840413          	addi	s0,s0,-136
#         if (id >= sizeof(entities) / sizeof(entity)) {
     d90:	0097ee63          	bltu	a5,s1,dac <action_give(unsigned char, span<char>)+0xf8>
#     return entities[id];
     d94:	00149413          	slli	s0,s1,0x1
     d98:	00940433          	add	s0,s0,s1
     d9c:	00241413          	slli	s0,s0,0x2
     da0:	40940433          	sub	s0,s0,s1
     da4:	00241413          	slli	s0,s0,0x2
     da8:	008a0433          	add	s0,s4,s0
#     let& loc = location_by_id(from_entity.location);
     dac:	00444783          	lbu	a5,4(s0)
#         if (id >= sizeof(locations) / sizeof(location)) {
     db0:	000024b7          	lui	s1,0x2
     db4:	00400693          	li	a3,4
     db8:	ffc48713          	addi	a4,s1,-4 # 1ffc <locations>
#             return locations[0];
     dbc:	ffc48493          	addi	s1,s1,-4
#         if (id >= sizeof(locations) / sizeof(location)) {
     dc0:	00f6ee63          	bltu	a3,a5,ddc <action_give(unsigned char, span<char>)+0x128>
#     return locations[id];
     dc4:	00279493          	slli	s1,a5,0x2
     dc8:	00f484b3          	add	s1,s1,a5
     dcc:	00349493          	slli	s1,s1,0x3
     dd0:	00f484b3          	add	s1,s1,a5
     dd4:	00249493          	slli	s1,s1,0x2
     dd8:	009704b3          	add	s1,a4,s1
#         for (; i < len; ++i) {
     ddc:	0a04ac03          	lw	s8,160(s1)
#         size_t i = 0;
     de0:	00000b93          	li	s7,0
#         if (id >= sizeof(entities) / sizeof(entity)) {
     de4:	00200d13          	li	s10,2
#         for (; i < len; ++i) {
     de8:	038b9063          	bne	s7,s8,e08 <action_give(unsigned char, span<char>)+0x154>
#     str.for_each([](let ch) { uart_send_char(ch); });
     dec:	02810513          	addi	a0,sp,40
     df0:	03512423          	sw	s5,40(sp)
     df4:	03612623          	sw	s6,44(sp)
     df8:	1fd000ef          	jal	17f4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
#         uart_send_cstr(" is not here\r\n\r\n");
     dfc:	00002537          	lui	a0,0x2
     e00:	d3c50513          	addi	a0,a0,-708 # 1d3c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x548>
     e04:	f15ff06f          	j	d18 <action_give(unsigned char, span<char>)+0x64>
#             if (!f(data[i])) {
     e08:	01748cb3          	add	s9,s1,s7
     e0c:	098cc703          	lbu	a4,152(s9)
#             return entities[0];
     e10:	000a0793          	mv	a5,s4
#         if (id >= sizeof(entities) / sizeof(entity)) {
     e14:	00ed6e63          	bltu	s10,a4,e30 <action_give(unsigned char, span<char>)+0x17c>
#     return entities[id];
     e18:	00171793          	slli	a5,a4,0x1
     e1c:	00e787b3          	add	a5,a5,a4
     e20:	00279793          	slli	a5,a5,0x2
     e24:	40e787b3          	sub	a5,a5,a4
     e28:	00279793          	slli	a5,a5,0x2
     e2c:	00fa07b3          	add	a5,s4,a5
#         if (string_equals_cstr(to_ent_nm, entity_by_id(id).name)) {
     e30:	0007a603          	lw	a2,0(a5)
     e34:	000a8513          	mv	a0,s5
     e38:	000b0593          	mv	a1,s6
     e3c:	03512023          	sw	s5,32(sp)
     e40:	03612223          	sw	s6,36(sp)
     e44:	a88ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     e48:	10051c63          	bnez	a0,f60 <action_give(unsigned char, span<char>)+0x2ac>
#         for (; i < len; ++i) {
     e4c:	001b8b93          	addi	s7,s7,1
     e50:	f99ff06f          	j	de8 <action_give(unsigned char, span<char>)+0x134>
#         return data[pos.index];
     e54:	098cc783          	lbu	a5,152(s9)
#         if (id >= sizeof(entities) / sizeof(entity)) {
     e58:	00200713          	li	a4,2
#             return entities[0];
     e5c:	000a0493          	mv	s1,s4
#         if (id >= sizeof(entities) / sizeof(entity)) {
     e60:	10f77463          	bgeu	a4,a5,f68 <action_give(unsigned char, span<char>)+0x2b4>
#         for (; i < len; ++i) {
     e64:	02842b83          	lw	s7,40(s0)
     e68:	00002b37          	lui	s6,0x2
#         size_t i = 0;
     e6c:	00000a93          	li	s5,0
#         if (id >= sizeof(objects) / sizeof(object)) {
     e70:	00300c13          	li	s8,3
     e74:	f68b0b13          	addi	s6,s6,-152 # 1f68 <objects>
#         for (; i < len; ++i) {
     e78:	037a9063          	bne	s5,s7,e98 <action_give(unsigned char, span<char>)+0x1e4>
#     str.for_each([](let ch) { uart_send_char(ch); });
     e7c:	02810513          	addi	a0,sp,40
     e80:	03212423          	sw	s2,40(sp)
     e84:	03312623          	sw	s3,44(sp)
     e88:	16d000ef          	jal	17f4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
#         uart_send_cstr(" not in inventory\r\n\r\n");
     e8c:	00002537          	lui	a0,0x2
     e90:	d2450513          	addi	a0,a0,-732 # 1d24 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x530>
     e94:	e85ff06f          	j	d18 <action_give(unsigned char, span<char>)+0x64>
#             if (!f(data[i])) {
     e98:	01540a33          	add	s4,s0,s5
     e9c:	008a4783          	lbu	a5,8(s4)
#             return objects[0];
     ea0:	000b0713          	mv	a4,s6
#         if (id >= sizeof(objects) / sizeof(object)) {
     ea4:	00fc6663          	bltu	s8,a5,eb0 <action_give(unsigned char, span<char>)+0x1fc>
#     return objects[id];
     ea8:	00279793          	slli	a5,a5,0x2
     eac:	00fb0733          	add	a4,s6,a5
#         if (string_equals_cstr(obj_nm, object_by_id(id).name)) {
     eb0:	00072603          	lw	a2,0(a4)
     eb4:	00090513          	mv	a0,s2
     eb8:	00098593          	mv	a1,s3
     ebc:	01212c23          	sw	s2,24(sp)
     ec0:	01312e23          	sw	s3,28(sp)
     ec4:	a08ff0ef          	jal	cc <string_equals_cstr(span<char>, char const*)>
     ec8:	00051c63          	bnez	a0,ee0 <action_give(unsigned char, span<char>)+0x22c>
#         for (; i < len; ++i) {
     ecc:	001a8a93          	addi	s5,s5,1
     ed0:	fa9ff06f          	j	e78 <action_give(unsigned char, span<char>)+0x1c4>
#             data[i] = data[i + 1];
     ed4:	0087c683          	lbu	a3,8(a5)
     ed8:	00d783a3          	sb	a3,7(a5)
#         for (size_t i = pos.index; i < len; ++i) {
     edc:	0440006f          	j	f20 <action_give(unsigned char, span<char>)+0x26c>
#                 return {};
     ee0:	00000713          	li	a4,0
#             if (pos.index >= len) {
     ee4:	017af463          	bgeu	s5,s7,eec <action_give(unsigned char, span<char>)+0x238>
#         return data[pos.index];
     ee8:	008a4703          	lbu	a4,8(s4)
#             if (len == Size - 1) {
     eec:	0284a783          	lw	a5,40(s1)
     ef0:	01f00693          	li	a3,31
     ef4:	02d78a63          	beq	a5,a3,f28 <action_give(unsigned char, span<char>)+0x274>
#         data[len] = elem;
     ef8:	00f486b3          	add	a3,s1,a5
     efc:	00e68423          	sb	a4,8(a3)
#         ++len;
     f00:	00178793          	addi	a5,a5,1
     f04:	02f4a423          	sw	a5,40(s1)
#             if (pos.index >= len) {
     f08:	02842703          	lw	a4,40(s0)
     f0c:	00eafe63          	bgeu	s5,a4,f28 <action_give(unsigned char, span<char>)+0x274>
#         --len;
     f10:	fff70793          	addi	a5,a4,-1
     f14:	02f42423          	sw	a5,40(s0)
     f18:	00e40733          	add	a4,s0,a4
     f1c:	000a0793          	mv	a5,s4
#         for (size_t i = pos.index; i < len; ++i) {
     f20:	00178793          	addi	a5,a5,1
     f24:	fae798e3          	bne	a5,a4,ed4 <action_give(unsigned char, span<char>)+0x220>
# }
     f28:	07c12083          	lw	ra,124(sp)
     f2c:	07812403          	lw	s0,120(sp)
     f30:	07412483          	lw	s1,116(sp)
     f34:	07012903          	lw	s2,112(sp)
     f38:	06c12983          	lw	s3,108(sp)
     f3c:	06812a03          	lw	s4,104(sp)
     f40:	06412a83          	lw	s5,100(sp)
     f44:	06012b03          	lw	s6,96(sp)
     f48:	05c12b83          	lw	s7,92(sp)
     f4c:	05812c03          	lw	s8,88(sp)
     f50:	05412c83          	lw	s9,84(sp)
     f54:	05012d03          	lw	s10,80(sp)
     f58:	08010113          	addi	sp,sp,128
     f5c:	00008067          	ret
#             if (pos.index >= len) {
     f60:	ef8beae3          	bltu	s7,s8,e54 <action_give(unsigned char, span<char>)+0x1a0>
#                 return {};
     f64:	00000793          	li	a5,0
#     return entities[id];
     f68:	00179493          	slli	s1,a5,0x1
     f6c:	00f484b3          	add	s1,s1,a5
     f70:	00249493          	slli	s1,s1,0x2
     f74:	40f484b3          	sub	s1,s1,a5
     f78:	00249493          	slli	s1,s1,0x2
     f7c:	009a04b3          	add	s1,s4,s1
     f80:	ee5ff06f          	j	e64 <action_give(unsigned char, span<char>)+0x1b0>

00000f84 <action_sdcard_read(span<char>)>:
# static auto action_sdcard_read(string const args) -> void {
     f84:	dd010113          	addi	sp,sp,-560
     f88:	00a12423          	sw	a0,8(sp)
     f8c:	00058613          	mv	a2,a1
     f90:	00b12623          	sw	a1,12(sp)
#     let w1 = string_next_word(args);
     f94:	00050593          	mv	a1,a0
     f98:	01010513          	addi	a0,sp,16
# static auto action_sdcard_read(string const args) -> void {
     f9c:	22112623          	sw	ra,556(sp)
     fa0:	22812423          	sw	s0,552(sp)
     fa4:	22912223          	sw	s1,548(sp)
     fa8:	23212023          	sw	s2,544(sp)
#     let w1 = string_next_word(args);
     fac:	988ff0ef          	jal	134 <string_next_word(span<char>)>
#     if (w1.word.is_empty()) {
     fb0:	01012503          	lw	a0,16(sp)
     fb4:	01412583          	lw	a1,20(sp)
     fb8:	02b51263          	bne	a0,a1,fdc <action_sdcard_read(span<char>)+0x58>
#         uart_send_cstr("<sector>\r\n");
     fbc:	00002537          	lui	a0,0x2
     fc0:	d5050513          	addi	a0,a0,-688 # 1d50 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x55c>
# }
     fc4:	22812403          	lw	s0,552(sp)
     fc8:	22c12083          	lw	ra,556(sp)
     fcc:	22412483          	lw	s1,548(sp)
     fd0:	22012903          	lw	s2,544(sp)
     fd4:	23010113          	addi	sp,sp,560
#     uart_send_cstr("\r\n");
     fd8:	5880006f          	j	1560 <uart_send_cstr(char const*)>
#     let sector = string_to_uint32(w1.word);
     fdc:	398000ef          	jal	1374 <string_to_uint32(span<char>)>
#     sdcard_read_blocking(sector, buf);
     fe0:	02010493          	addi	s1,sp,32
     fe4:	00048593          	mv	a1,s1
     fe8:	704000ef          	jal	16ec <sdcard_read_blocking(unsigned int, char*)>
#     for (mut i = 0u; i < sizeof(buf); ++i) {
     fec:	00000413          	li	s0,0
     ff0:	20000913          	li	s2,512
#         uart_send_char(buf[i]);
     ff4:	008487b3          	add	a5,s1,s0
     ff8:	0007c503          	lbu	a0,0(a5)
#     for (mut i = 0u; i < sizeof(buf); ++i) {
     ffc:	00140413          	addi	s0,s0,1
#         uart_send_char(buf[i]);
    1000:	584000ef          	jal	1584 <uart_send_char(char)>
#     for (mut i = 0u; i < sizeof(buf); ++i) {
    1004:	ff2418e3          	bne	s0,s2,ff4 <action_sdcard_read(span<char>)+0x70>
#     uart_send_cstr("\r\n");
    1008:	00002537          	lui	a0,0x2
    100c:	c6450513          	addi	a0,a0,-924 # 1c64 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x470>
    1010:	fb5ff06f          	j	fc4 <action_sdcard_read(span<char>)+0x40>

00001014 <action_sdcard_write(span<char>)>:
# static auto action_sdcard_write(string const args) -> void {
    1014:	dd010113          	addi	sp,sp,-560
    1018:	00a12423          	sw	a0,8(sp)
    101c:	00058613          	mv	a2,a1
    1020:	00b12623          	sw	a1,12(sp)
#     let w1 = string_next_word(args);
    1024:	00050593          	mv	a1,a0
    1028:	01010513          	addi	a0,sp,16
# static auto action_sdcard_write(string const args) -> void {
    102c:	22112623          	sw	ra,556(sp)
#     let w1 = string_next_word(args);
    1030:	904ff0ef          	jal	134 <string_next_word(span<char>)>
#     if (w1.word.is_empty()) {
    1034:	01012703          	lw	a4,16(sp)
    1038:	01412783          	lw	a5,20(sp)
    103c:	00f71c63          	bne	a4,a5,1054 <action_sdcard_write(span<char>)+0x40>
# }
    1040:	22c12083          	lw	ra,556(sp)
#         uart_send_cstr("<sector> <text>\r\n");
    1044:	00002537          	lui	a0,0x2
    1048:	d5c50513          	addi	a0,a0,-676 # 1d5c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x568>
# }
    104c:	23010113          	addi	sp,sp,560
#         uart_send_cstr("<sector> <text>\r\n");
    1050:	5100006f          	j	1560 <uart_send_cstr(char const*)>
#     int8_t buf[512]{};
    1054:	20000613          	li	a2,512
    1058:	00000593          	li	a1,0
    105c:	02010513          	addi	a0,sp,32
    1060:	6e4000ef          	jal	1744 <memset>
#         for (Type* it = begin_; it < end_; ++it) {
    1064:	01812783          	lw	a5,24(sp)
    1068:	01c12683          	lw	a3,28(sp)
#     mut* buf_ptr = buf;
    106c:	02010713          	addi	a4,sp,32
    1070:	02d7e263          	bltu	a5,a3,1094 <action_sdcard_write(span<char>)+0x80>
#     size_t const sector = string_to_uint32(w1.word);
    1074:	01412583          	lw	a1,20(sp)
    1078:	01012503          	lw	a0,16(sp)
    107c:	2f8000ef          	jal	1374 <string_to_uint32(span<char>)>
#     sdcard_write_blocking(sector, buf);
    1080:	02010593          	addi	a1,sp,32
    1084:	694000ef          	jal	1718 <sdcard_write_blocking(unsigned int, char const*)>
# }
    1088:	22c12083          	lw	ra,556(sp)
    108c:	23010113          	addi	sp,sp,560
    1090:	00008067          	ret
#         *buf_ptr = ch;
    1094:	0007c603          	lbu	a2,0(a5)
#         ++buf_ptr;
    1098:	00170713          	addi	a4,a4,1
    109c:	00178793          	addi	a5,a5,1
#         *buf_ptr = ch;
    10a0:	fec70fa3          	sb	a2,-1(a4)
    10a4:	fcdff06f          	j	1070 <action_sdcard_write(span<char>)+0x5c>

000010a8 <print_help()>:
#     uart_send_cstr(
    10a8:	00002537          	lui	a0,0x2
    10ac:	d7050513          	addi	a0,a0,-656 # 1d70 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x57c>
    10b0:	4b00006f          	j	1560 <uart_send_cstr(char const*)>

000010b4 <input(cursor_buffer<char, 160u>&)>:
# static auto input(command_buffer& cmd_buf) -> void {
    10b4:	fd010113          	addi	sp,sp,-48
    10b8:	02812423          	sw	s0,40(sp)
    10bc:	02912223          	sw	s1,36(sp)
    10c0:	01312e23          	sw	s3,28(sp)
    10c4:	01412c23          	sw	s4,24(sp)
    10c8:	01512a23          	sw	s5,20(sp)
    10cc:	01612823          	sw	s6,16(sp)
    10d0:	01712623          	sw	s7,12(sp)
    10d4:	01812423          	sw	s8,8(sp)
    10d8:	01912223          	sw	s9,4(sp)
    10dc:	01a12023          	sw	s10,0(sp)
    10e0:	02112623          	sw	ra,44(sp)
    10e4:	03212023          	sw	s2,32(sp)
#         switch (state) {
    10e8:	00100993          	li	s3,1
# static auto input(command_buffer& cmd_buf) -> void {
    10ec:	00050413          	mv	s0,a0
#             line_[i - 1] = line_[i];
#         }
#         --end_;
#     }
# 
#     auto reset() -> void { cursor_ = end_ = 0; }
    10f0:	0a052223          	sw	zero,164(a0)
    10f4:	0a052023          	sw	zero,160(a0)
#     mut escape_sequence_parameter = 0;
    10f8:	00000d13          	li	s10,0
#     mut state = input_state::NORMAL;
    10fc:	00000493          	li	s1,0
#         switch (state) {
    1100:	00200a13          	li	s4,2
#             if (ch >= '0' && ch <= '9') {
    1104:	00900a93          	li	s5,9
#                 switch (ch) {
    1108:	04400b13          	li	s6,68
#                         uart_send_cstr("\x1B[D");
    110c:	00002bb7          	lui	s7,0x2
#                 switch (ch) {
    1110:	07e00c13          	li	s8,126
#         for (size_t i = end_; i > cursor_; --i) {
    1114:	40a98cb3          	sub	s9,s3,a0
#         let ch = uart_read_char();
    1118:	480000ef          	jal	1598 <uart_read_char()>
#         led_set(uint32_t(~ch));
    111c:	fff54793          	not	a5,a0
    1120:	fef02e23          	sw	a5,-4(zero) # fffffffc <__bss_end+0xffffdcb0>
#         let ch = uart_read_char();
    1124:	00050913          	mv	s2,a0
#         switch (state) {
    1128:	17348263          	beq	s1,s3,128c <input(cursor_buffer<char, 160u>&)+0x1d8>
    112c:	17448863          	beq	s1,s4,129c <input(cursor_buffer<char, 160u>&)+0x1e8>
#             if (ch == 0x1B) {
    1130:	01b00793          	li	a5,27
    1134:	04f50263          	beq	a0,a5,1178 <input(cursor_buffer<char, 160u>&)+0xc4>
#             } else if (ch == char_backspace) {
    1138:	07f00793          	li	a5,127
    113c:	08f51663          	bne	a0,a5,11c8 <input(cursor_buffer<char, 160u>&)+0x114>
#         if (cursor_ == 0) {
    1140:	0a042783          	lw	a5,160(s0)
    1144:	00000493          	li	s1,0
    1148:	fc0788e3          	beqz	a5,1118 <input(cursor_buffer<char, 160u>&)+0x64>
#         if (cursor_ == end_) {
    114c:	0a442703          	lw	a4,164(s0)
#             --cursor_;
    1150:	fff78593          	addi	a1,a5,-1
#             --end_;
    1154:	fff70613          	addi	a2,a4,-1
#         if (cursor_ == end_) {
    1158:	02e78463          	beq	a5,a4,1180 <input(cursor_buffer<char, 160u>&)+0xcc>
    115c:	00f407b3          	add	a5,s0,a5
#         for (size_t i = cursor_ - 1; i < end_; ++i) {
    1160:	408786b3          	sub	a3,a5,s0
    1164:	fff68693          	addi	a3,a3,-1
    1168:	04e6e863          	bltu	a3,a4,11b8 <input(cursor_buffer<char, 160u>&)+0x104>
#         --cursor_;
    116c:	0ab42023          	sw	a1,160(s0)
#         --end_;
    1170:	0ac42223          	sw	a2,164(s0)
    1174:	0140006f          	j	1188 <input(cursor_buffer<char, 160u>&)+0xd4>
#                 state = input_state::ESCAPE;
    1178:	00100493          	li	s1,1
    117c:	f9dff06f          	j	1118 <input(cursor_buffer<char, 160u>&)+0x64>
#             --end_;
    1180:	0ac42223          	sw	a2,164(s0)
#             --cursor_;
    1184:	0ab42023          	sw	a1,160(s0)
#                     uart_send_char(ch);
    1188:	07f00513          	li	a0,127
    118c:	3f8000ef          	jal	1584 <uart_send_char(char)>
#                     cmd_buf.apply_on_elements_from_cursor_to_end(
    1190:	00040513          	mv	a0,s0
    1194:	618000ef          	jal	17ac <void cursor_buffer<char, 160u>::apply_on_elements_from_cursor_to_end<input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}>(input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
#                     uart_send_char(' ');
    1198:	02000513          	li	a0,32
    119c:	3e8000ef          	jal	1584 <uart_send_char(char)>
#                     uart_send_move_back(cmd_buf.elements_after_cursor_count() +
    11a0:	0a442783          	lw	a5,164(s0)
    11a4:	0a042503          	lw	a0,160(s0)
    11a8:	00178793          	addi	a5,a5,1
    11ac:	40a78533          	sub	a0,a5,a0
#                 uart_send_move_back(cmd_buf.elements_after_cursor_count());
    11b0:	2b8000ef          	jal	1468 <uart_send_move_back(unsigned int)>
    11b4:	11c0006f          	j	12d0 <input(cursor_buffer<char, 160u>&)+0x21c>
#             line_[i] = line_[i + 1];
    11b8:	0007c683          	lbu	a3,0(a5)
    11bc:	00178793          	addi	a5,a5,1
    11c0:	fed78f23          	sb	a3,-2(a5)
#         for (size_t i = cursor_ - 1; i < end_; ++i) {
    11c4:	f9dff06f          	j	1160 <input(cursor_buffer<char, 160u>&)+0xac>
#             } else if (ch == char_carriage_return || cmd_buf.is_full()) {
    11c8:	00d00713          	li	a4,13
#         if (cursor_ == end_) {
    11cc:	0a442783          	lw	a5,164(s0)
    11d0:	00e50663          	beq	a0,a4,11dc <input(cursor_buffer<char, 160u>&)+0x128>
    11d4:	09f00493          	li	s1,159
    11d8:	04979263          	bne	a5,s1,121c <input(cursor_buffer<char, 160u>&)+0x168>
# 
#     auto set_terminator() -> void { line_[end_] = {}; }
    11dc:	00f407b3          	add	a5,s0,a5
    11e0:	00078023          	sb	zero,0(a5)
# }
    11e4:	02c12083          	lw	ra,44(sp)
    11e8:	02812403          	lw	s0,40(sp)
    11ec:	02412483          	lw	s1,36(sp)
    11f0:	02012903          	lw	s2,32(sp)
    11f4:	01c12983          	lw	s3,28(sp)
    11f8:	01812a03          	lw	s4,24(sp)
    11fc:	01412a83          	lw	s5,20(sp)
    1200:	01012b03          	lw	s6,16(sp)
    1204:	00c12b83          	lw	s7,12(sp)
    1208:	00812c03          	lw	s8,8(sp)
    120c:	00412c83          	lw	s9,4(sp)
    1210:	00012d03          	lw	s10,0(sp)
    1214:	03010113          	addi	sp,sp,48
    1218:	00008067          	ret
#                 uart_send_char(ch);
    121c:	368000ef          	jal	1584 <uart_send_char(char)>
#         if (end_ == sizeof(line_) - 1) {
    1220:	0a442683          	lw	a3,164(s0)
    1224:	02968263          	beq	a3,s1,1248 <input(cursor_buffer<char, 160u>&)+0x194>
#         if (cursor_ == end_) {
    1228:	0a042703          	lw	a4,160(s0)
#             ++end_;
    122c:	00168593          	addi	a1,a3,1
    1230:	00d407b3          	add	a5,s0,a3
#             ++cursor_;
    1234:	00170613          	addi	a2,a4,1
#         if (cursor_ == end_) {
    1238:	02e69463          	bne	a3,a4,1260 <input(cursor_buffer<char, 160u>&)+0x1ac>
#             line_[cursor_] = ch;
    123c:	01278023          	sb	s2,0(a5)
#             ++cursor_;
    1240:	0ac42023          	sw	a2,160(s0)
#             ++end_;
    1244:	0ab42223          	sw	a1,164(s0)
#                 cmd_buf.apply_on_elements_from_cursor_to_end(
    1248:	00040513          	mv	a0,s0
    124c:	560000ef          	jal	17ac <void cursor_buffer<char, 160u>::apply_on_elements_from_cursor_to_end<input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}>(input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
#             f(line_[i]);
#         }
#     }
# 
#     auto elements_after_cursor_count() const -> size_t {
#         return end_ - cursor_;
    1250:	0a442503          	lw	a0,164(s0)
    1254:	0a042783          	lw	a5,160(s0)
#                 uart_send_move_back(cmd_buf.elements_after_cursor_count());
    1258:	40f50533          	sub	a0,a0,a5
    125c:	f55ff06f          	j	11b0 <input(cursor_buffer<char, 160u>&)+0xfc>
#         ++end_;
    1260:	0ab42223          	sw	a1,164(s0)
#         for (size_t i = end_; i > cursor_; --i) {
    1264:	00fc86b3          	add	a3,s9,a5
    1268:	00d76a63          	bltu	a4,a3,127c <input(cursor_buffer<char, 160u>&)+0x1c8>
#         line_[cursor_] = ch;
    126c:	00e40733          	add	a4,s0,a4
    1270:	01270023          	sb	s2,0(a4)
#         ++cursor_;
    1274:	0ac42023          	sw	a2,160(s0)
#         return true;
    1278:	fd1ff06f          	j	1248 <input(cursor_buffer<char, 160u>&)+0x194>
#             line_[i] = line_[i - 1];
    127c:	0007c683          	lbu	a3,0(a5)
    1280:	fff78793          	addi	a5,a5,-1
    1284:	00d78123          	sb	a3,2(a5)
#         for (size_t i = end_; i > cursor_; --i) {
    1288:	fddff06f          	j	1264 <input(cursor_buffer<char, 160u>&)+0x1b0>
#             if (ch == 0x5B) {
    128c:	fa550493          	addi	s1,a0,-91
    1290:	0014b493          	seqz	s1,s1
    1294:	00149493          	slli	s1,s1,0x1
    1298:	e81ff06f          	j	1118 <input(cursor_buffer<char, 160u>&)+0x64>
#             if (ch >= '0' && ch <= '9') {
    129c:	fd050713          	addi	a4,a0,-48
    12a0:	0ff77793          	zext.b	a5,a4
    12a4:	00faec63          	bltu	s5,a5,12bc <input(cursor_buffer<char, 160u>&)+0x208>
#                     escape_sequence_parameter * 10 + (ch - '0');
    12a8:	002d1793          	slli	a5,s10,0x2
    12ac:	01a787b3          	add	a5,a5,s10
    12b0:	00179793          	slli	a5,a5,0x1
#                 escape_sequence_parameter =
    12b4:	00f70d33          	add	s10,a4,a5
    12b8:	e61ff06f          	j	1118 <input(cursor_buffer<char, 160u>&)+0x64>
#                 switch (ch) {
    12bc:	01650e63          	beq	a0,s6,12d8 <input(cursor_buffer<char, 160u>&)+0x224>
    12c0:	05850a63          	beq	a0,s8,1314 <input(cursor_buffer<char, 160u>&)+0x260>
    12c4:	04300793          	li	a5,67
    12c8:	02f50663          	beq	a0,a5,12f4 <input(cursor_buffer<char, 160u>&)+0x240>
#                 escape_sequence_parameter = 0;
    12cc:	00000d13          	li	s10,0
#                 state = input_state::NORMAL;
    12d0:	00000493          	li	s1,0
    12d4:	e45ff06f          	j	1118 <input(cursor_buffer<char, 160u>&)+0x64>
#         if (cursor_ == 0) {
    12d8:	0a042783          	lw	a5,160(s0)
    12dc:	fe0788e3          	beqz	a5,12cc <input(cursor_buffer<char, 160u>&)+0x218>
#         --cursor_;
    12e0:	fff78793          	addi	a5,a5,-1
    12e4:	0af42023          	sw	a5,160(s0)
#                         uart_send_cstr("\x1B[D");
    12e8:	ea8b8513          	addi	a0,s7,-344 # 1ea8 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x6b4>
#                         uart_send_cstr("\x1B[C");
    12ec:	274000ef          	jal	1560 <uart_send_cstr(char const*)>
    12f0:	fddff06f          	j	12cc <input(cursor_buffer<char, 160u>&)+0x218>
#         if (cursor_ == end_) {
    12f4:	0a042783          	lw	a5,160(s0)
    12f8:	0a442703          	lw	a4,164(s0)
    12fc:	fce788e3          	beq	a5,a4,12cc <input(cursor_buffer<char, 160u>&)+0x218>
#         ++cursor_;
    1300:	00178793          	addi	a5,a5,1
    1304:	00002537          	lui	a0,0x2
    1308:	0af42023          	sw	a5,160(s0)
    130c:	eac50513          	addi	a0,a0,-340 # 1eac <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x6b8>
    1310:	fddff06f          	j	12ec <input(cursor_buffer<char, 160u>&)+0x238>
#                     if (escape_sequence_parameter == 3) {
    1314:	00300793          	li	a5,3
    1318:	fafd1ae3          	bne	s10,a5,12cc <input(cursor_buffer<char, 160u>&)+0x218>
#         if (cursor_ == end_) {
    131c:	0a042783          	lw	a5,160(s0)
    1320:	0a442703          	lw	a4,164(s0)
    1324:	00e78e63          	beq	a5,a4,1340 <input(cursor_buffer<char, 160u>&)+0x28c>
    1328:	00f407b3          	add	a5,s0,a5
#         for (size_t i = cursor_ + 1; i < end_; ++i) {
    132c:	00178793          	addi	a5,a5,1
    1330:	408786b3          	sub	a3,a5,s0
    1334:	02e6ea63          	bltu	a3,a4,1368 <input(cursor_buffer<char, 160u>&)+0x2b4>
#         --end_;
    1338:	fff70713          	addi	a4,a4,-1
    133c:	0ae42223          	sw	a4,164(s0)
#                         cmd_buf.apply_on_elements_from_cursor_to_end(
    1340:	00040513          	mv	a0,s0
    1344:	468000ef          	jal	17ac <void cursor_buffer<char, 160u>::apply_on_elements_from_cursor_to_end<input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}>(input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}&&) const [clone .isra.0]>
#                         uart_send_char(' ');
    1348:	02000513          	li	a0,32
    134c:	238000ef          	jal	1584 <uart_send_char(char)>
#                         uart_send_move_back(
    1350:	0a442783          	lw	a5,164(s0)
    1354:	0a042503          	lw	a0,160(s0)
    1358:	00178793          	addi	a5,a5,1
    135c:	40a78533          	sub	a0,a5,a0
    1360:	108000ef          	jal	1468 <uart_send_move_back(unsigned int)>
    1364:	f69ff06f          	j	12cc <input(cursor_buffer<char, 160u>&)+0x218>
#             line_[i - 1] = line_[i];
    1368:	0007c683          	lbu	a3,0(a5)
    136c:	fed78fa3          	sb	a3,-1(a5)
#         for (size_t i = cursor_ + 1; i < end_; ++i) {
    1370:	fbdff06f          	j	132c <input(cursor_buffer<char, 160u>&)+0x278>

00001374 <string_to_uint32(span<char>)>:
# static auto string_to_uint32(string const str) -> uint32_t {
    1374:	ff010113          	addi	sp,sp,-16
    1378:	00a12423          	sw	a0,8(sp)
#         Type* it = begin_;
    137c:	00050713          	mv	a4,a0
    1380:	00b12623          	sw	a1,12(sp)
#     mut num = 0u;
    1384:	00000513          	li	a0,0
#         if (ch <= '0' || ch >= '9') {
    1388:	00700613          	li	a2,7
#         for (; it < end_; ++it) {
    138c:	00b76663          	bltu	a4,a1,1398 <string_to_uint32(span<char>)+0x24>
# }
    1390:	01010113          	addi	sp,sp,16
    1394:	00008067          	ret
#             if (!f(*it)) {
    1398:	00074683          	lbu	a3,0(a4)
#         if (ch <= '0' || ch >= '9') {
    139c:	fcf68793          	addi	a5,a3,-49
    13a0:	0ff7f793          	zext.b	a5,a5
    13a4:	fef666e3          	bltu	a2,a5,1390 <string_to_uint32(span<char>)+0x1c>
#         num = num * 10 + uint32_t(ch - '0');
    13a8:	00251793          	slli	a5,a0,0x2
    13ac:	00a787b3          	add	a5,a5,a0
    13b0:	00179793          	slli	a5,a5,0x1
    13b4:	fd078793          	addi	a5,a5,-48
    13b8:	00d78533          	add	a0,a5,a3
#         for (; it < end_; ++it) {
    13bc:	00170713          	addi	a4,a4,1
    13c0:	fcdff06f          	j	138c <string_to_uint32(span<char>)+0x18>

000013c4 <uart_send_hex_uint32(unsigned int, bool)>:
#                                  bool const separate_half_words) -> void {
    13c4:	ff010113          	addi	sp,sp,-16
    13c8:	00812423          	sw	s0,8(sp)
    13cc:	00050413          	mv	s0,a0
#     uart_send_hex_byte(uint8_t(i >> 24));
    13d0:	01855513          	srli	a0,a0,0x18
#                                  bool const separate_half_words) -> void {
    13d4:	00912223          	sw	s1,4(sp)
    13d8:	00112623          	sw	ra,12(sp)
    13dc:	00058493          	mv	s1,a1
#     uart_send_hex_byte(uint8_t(i >> 24));
    13e0:	040000ef          	jal	1420 <uart_send_hex_byte(unsigned char)>
#     uart_send_hex_byte(uint8_t(i >> 16));
    13e4:	01045513          	srli	a0,s0,0x10
    13e8:	0ff57513          	zext.b	a0,a0
    13ec:	034000ef          	jal	1420 <uart_send_hex_byte(unsigned char)>
#     if (separate_half_words) {
    13f0:	00048663          	beqz	s1,13fc <uart_send_hex_uint32(unsigned int, bool)+0x38>
#         uart_send_char(':');
    13f4:	03a00513          	li	a0,58
    13f8:	18c000ef          	jal	1584 <uart_send_char(char)>
#     uart_send_hex_byte(uint8_t(i >> 8));
    13fc:	00845513          	srli	a0,s0,0x8
    1400:	0ff57513          	zext.b	a0,a0
    1404:	01c000ef          	jal	1420 <uart_send_hex_byte(unsigned char)>
#     uart_send_hex_byte(uint8_t(i));
    1408:	0ff47513          	zext.b	a0,s0
# }
    140c:	00812403          	lw	s0,8(sp)
    1410:	00c12083          	lw	ra,12(sp)
    1414:	00412483          	lw	s1,4(sp)
    1418:	01010113          	addi	sp,sp,16
#     uart_send_hex_byte(uint8_t(i));
    141c:	0040006f          	j	1420 <uart_send_hex_byte(unsigned char)>

00001420 <uart_send_hex_byte(unsigned char)>:
# static auto uart_send_hex_byte(uint8_t const ch) -> void {
    1420:	ff010113          	addi	sp,sp,-16
    1424:	00812423          	sw	s0,8(sp)
    1428:	00050413          	mv	s0,a0
#     uart_send_hex_nibble(ch >> 4);
    142c:	00455513          	srli	a0,a0,0x4
# static auto uart_send_hex_byte(uint8_t const ch) -> void {
    1430:	00112623          	sw	ra,12(sp)
#     uart_send_hex_nibble(ch >> 4);
    1434:	018000ef          	jal	144c <uart_send_hex_nibble(unsigned char)>
#     uart_send_hex_nibble(ch & 0x0f);
    1438:	00f47513          	andi	a0,s0,15
# }
    143c:	00812403          	lw	s0,8(sp)
    1440:	00c12083          	lw	ra,12(sp)
    1444:	01010113          	addi	sp,sp,16
#     uart_send_hex_nibble(ch & 0x0f);
    1448:	0040006f          	j	144c <uart_send_hex_nibble(unsigned char)>

0000144c <uart_send_hex_nibble(unsigned char)>:
#     if (nibble < 10) {
    144c:	00900793          	li	a5,9
    1450:	00a7e863          	bltu	a5,a0,1460 <uart_send_hex_nibble(unsigned char)+0x14>
#         uart_send_char('0' + char(nibble));
    1454:	03050513          	addi	a0,a0,48
#         uart_send_char('A' + char(nibble - 10));
    1458:	0ff57513          	zext.b	a0,a0
    145c:	1280006f          	j	1584 <uart_send_char(char)>
    1460:	03750513          	addi	a0,a0,55
    1464:	ff5ff06f          	j	1458 <uart_send_hex_nibble(unsigned char)+0xc>

00001468 <uart_send_move_back(unsigned int)>:
# static auto uart_send_move_back(size_t const n) -> void {
    1468:	ff010113          	addi	sp,sp,-16
    146c:	00812423          	sw	s0,8(sp)
    1470:	00912223          	sw	s1,4(sp)
    1474:	00112623          	sw	ra,12(sp)
    1478:	00050413          	mv	s0,a0
#     for (mut i = 0u; i < n; ++i) {
    147c:	00000493          	li	s1,0
    1480:	00849c63          	bne	s1,s0,1498 <uart_send_move_back(unsigned int)+0x30>
# }
    1484:	00c12083          	lw	ra,12(sp)
    1488:	00812403          	lw	s0,8(sp)
    148c:	00412483          	lw	s1,4(sp)
    1490:	01010113          	addi	sp,sp,16
    1494:	00008067          	ret
#         uart_send_char('\b');
    1498:	00800513          	li	a0,8
    149c:	0e8000ef          	jal	1584 <uart_send_char(char)>
#     for (mut i = 0u; i < n; ++i) {
    14a0:	00148493          	addi	s1,s1,1
    14a4:	fddff06f          	j	1480 <uart_send_move_back(unsigned int)+0x18>

000014a8 <entity_by_id(unsigned char)>:
#         if (id >= sizeof(entities) / sizeof(entity)) {
    14a8:	000027b7          	lui	a5,0x2
    14ac:	00200693          	li	a3,2
    14b0:	f7878713          	addi	a4,a5,-136 # 1f78 <entities>
    14b4:	02a6e063          	bltu	a3,a0,14d4 <entity_by_id(unsigned char)+0x2c>
#     return entities[id];
    14b8:	00151793          	slli	a5,a0,0x1
    14bc:	00a787b3          	add	a5,a5,a0
    14c0:	00279793          	slli	a5,a5,0x2
    14c4:	40a78533          	sub	a0,a5,a0
    14c8:	00251513          	slli	a0,a0,0x2
    14cc:	00a70533          	add	a0,a4,a0
    14d0:	00008067          	ret
#             return entities[0];
    14d4:	f7878513          	addi	a0,a5,-136
# }
    14d8:	00008067          	ret

000014dc <object_by_id(unsigned char)>:
#         if (id >= sizeof(objects) / sizeof(object)) {
    14dc:	000027b7          	lui	a5,0x2
    14e0:	00300693          	li	a3,3
    14e4:	f6878713          	addi	a4,a5,-152 # 1f68 <objects>
    14e8:	00a6e863          	bltu	a3,a0,14f8 <object_by_id(unsigned char)+0x1c>
#     return objects[id];
    14ec:	00251513          	slli	a0,a0,0x2
    14f0:	00a70533          	add	a0,a4,a0
    14f4:	00008067          	ret
#             return objects[0];
    14f8:	f6878513          	addi	a0,a5,-152
# }
    14fc:	00008067          	ret

00001500 <location_by_id(unsigned char)>:
#         if (id >= sizeof(locations) / sizeof(location)) {
    1500:	000027b7          	lui	a5,0x2
    1504:	00400693          	li	a3,4
    1508:	ffc78713          	addi	a4,a5,-4 # 1ffc <locations>
    150c:	02a6e063          	bltu	a3,a0,152c <location_by_id(unsigned char)+0x2c>
#     return locations[id];
    1510:	00251793          	slli	a5,a0,0x2
    1514:	00a787b3          	add	a5,a5,a0
    1518:	00379793          	slli	a5,a5,0x3
    151c:	00a78533          	add	a0,a5,a0
    1520:	00251513          	slli	a0,a0,0x2
    1524:	00a70533          	add	a0,a4,a0
    1528:	00008067          	ret
#             return locations[0];
    152c:	ffc78513          	addi	a0,a5,-4
# }
    1530:	00008067          	ret

00001534 <link_by_id(unsigned char)>:
# 
# static auto link_by_id(link_id_t const id) -> cstr {
#     if constexpr (safe_arrays) {
#         if (id >= sizeof(links) / sizeof(cstr)) {
    1534:	000027b7          	lui	a5,0x2
    1538:	00600713          	li	a4,6
    153c:	33078793          	addi	a5,a5,816 # 2330 <links>
    1540:	00a77663          	bgeu	a4,a0,154c <link_by_id(unsigned char)+0x18>
#             return links[0];
#         }
#     }
#     return links[id];
    1544:	0007a503          	lw	a0,0(a5)
# }
    1548:	00008067          	ret
#     return links[id];
    154c:	00251513          	slli	a0,a0,0x2
    1550:	00a787b3          	add	a5,a5,a0
    1554:	ff1ff06f          	j	1544 <link_by_id(unsigned char)+0x10>

00001558 <led_set(unsigned int)>:
    1558:	fea02e23          	sw	a0,-4(zero) # fffffffc <__bss_end+0xffffdcb0>
    155c:	00008067          	ret

00001560 <uart_send_cstr(char const*)>:
#         while (*UART_OUT != -1)
    1560:	fff00713          	li	a4,-1
#     while (*str) {
    1564:	00054783          	lbu	a5,0(a0)
    1568:	00079463          	bnez	a5,1570 <uart_send_cstr(char const*)+0x10>
# }
    156c:	00008067          	ret
#         while (*UART_OUT != -1)
    1570:	ff802683          	lw	a3,-8(zero) # fffffff8 <__bss_end+0xffffdcac>
    1574:	fee69ee3          	bne	a3,a4,1570 <uart_send_cstr(char const*)+0x10>
#         *UART_OUT = *str++;
    1578:	00150513          	addi	a0,a0,1
    157c:	fef02c23          	sw	a5,-8(zero) # fffffff8 <__bss_end+0xffffdcac>
    1580:	fe5ff06f          	j	1564 <uart_send_cstr(char const*)+0x4>

00001584 <uart_send_char(char)>:
#     while (*UART_OUT != -1)
    1584:	fff00793          	li	a5,-1
    1588:	ff802703          	lw	a4,-8(zero) # fffffff8 <__bss_end+0xffffdcac>
    158c:	fef71ee3          	bne	a4,a5,1588 <uart_send_char(char)+0x4>
#     *UART_OUT = ch;
    1590:	fea02c23          	sw	a0,-8(zero) # fffffff8 <__bss_end+0xffffdcac>
# }
    1594:	00008067          	ret

00001598 <uart_read_char()>:
#     while ((ch = *UART_IN) == -1)
    1598:	fff00793          	li	a5,-1
    159c:	ff402503          	lw	a0,-12(zero) # fffffff4 <__bss_end+0xffffdca8>
    15a0:	fef50ee3          	beq	a0,a5,159c <uart_read_char()+0x4>
# }
    15a4:	0ff57513          	zext.b	a0,a0
    15a8:	00008067          	ret

000015ac <action_mem_test()>:
#     uart_send_cstr("testing memory (write)\r\n");
    15ac:	00002537          	lui	a0,0x2
# static auto action_mem_test() -> void {
    15b0:	ff010113          	addi	sp,sp,-16
#     uart_send_cstr("testing memory (write)\r\n");
    15b4:	eb050513          	addi	a0,a0,-336 # 1eb0 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x6bc>
# static auto action_mem_test() -> void {
    15b8:	00812423          	sw	s0,8(sp)
    15bc:	00112623          	sw	ra,12(sp)
#     char* ptr = &__heap_start;
    15c0:	00002437          	lui	s0,0x2
# static auto action_mem_test() -> void {
    15c4:	00912223          	sw	s1,4(sp)
    15c8:	01212023          	sw	s2,0(sp)
#     uart_send_cstr("testing memory (write)\r\n");
    15cc:	f95ff0ef          	jal	1560 <uart_send_cstr(char const*)>
#     char* ptr = &__heap_start;
    15d0:	34c40713          	addi	a4,s0,844 # 234c <__bss_end>
#     char ch = 0;
    15d4:	00000793          	li	a5,0
    15d8:	34c40413          	addi	s0,s0,844
#     while (ptr < end) {
    15dc:	007f06b7          	lui	a3,0x7f0
    15e0:	04d76263          	bltu	a4,a3,1624 <action_mem_test()+0x78>
#     uart_send_cstr("testing memory (read)\r\n");
    15e4:	00002537          	lui	a0,0x2
    15e8:	ecc50513          	addi	a0,a0,-308 # 1ecc <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x6d8>
    15ec:	f75ff0ef          	jal	1560 <uart_send_cstr(char const*)>
#     bool failed = false;
    15f0:	00000793          	li	a5,0
#     ch = 0;
    15f4:	00000493          	li	s1,0
#     while (ptr < end) {
    15f8:	007f0937          	lui	s2,0x7f0
    15fc:	03246e63          	bltu	s0,s2,1638 <action_mem_test()+0x8c>
#     if (failed) {
    1600:	0a078063          	beqz	a5,16a0 <action_mem_test()+0xf4>
#         uart_send_cstr("testing memory FAILED\r\n");
    1604:	00002537          	lui	a0,0x2
    1608:	efc50513          	addi	a0,a0,-260 # 1efc <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x708>
# }
    160c:	00812403          	lw	s0,8(sp)
    1610:	00c12083          	lw	ra,12(sp)
    1614:	00412483          	lw	s1,4(sp)
    1618:	00012903          	lw	s2,0(sp)
    161c:	01010113          	addi	sp,sp,16
#         uart_send_cstr("testing memory succeeded\r\n");
    1620:	f41ff06f          	j	1560 <uart_send_cstr(char const*)>
#         *ptr = ch;
    1624:	00f70023          	sb	a5,0(a4)
#         ++ch;
    1628:	00178793          	addi	a5,a5,1
#         ++ptr;
    162c:	00170713          	addi	a4,a4,1
#         ++ch;
    1630:	0ff7f793          	zext.b	a5,a5
    1634:	fadff06f          	j	15e0 <action_mem_test()+0x34>
#         if (*ptr != ch) [[unlikely]] {
    1638:	00044703          	lbu	a4,0(s0)
    163c:	04970a63          	beq	a4,s1,1690 <action_mem_test()+0xe4>
#             uart_send_cstr("at ");
    1640:	00002537          	lui	a0,0x2
    1644:	ee450513          	addi	a0,a0,-284 # 1ee4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x6f0>
    1648:	f19ff0ef          	jal	1560 <uart_send_cstr(char const*)>
#             uart_send_hex_uint32(uint32_t(ptr), true);
    164c:	00100593          	li	a1,1
    1650:	00040513          	mv	a0,s0
    1654:	d71ff0ef          	jal	13c4 <uart_send_hex_uint32(unsigned int, bool)>
#             uart_send_cstr(" expected ");
    1658:	00002537          	lui	a0,0x2
    165c:	ee850513          	addi	a0,a0,-280 # 1ee8 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x6f4>
    1660:	f01ff0ef          	jal	1560 <uart_send_cstr(char const*)>
#             uart_send_hex_byte(ch);
    1664:	00048513          	mv	a0,s1
    1668:	db9ff0ef          	jal	1420 <uart_send_hex_byte(unsigned char)>
#             uart_send_cstr(" got ");
    166c:	00002537          	lui	a0,0x2
    1670:	ef450513          	addi	a0,a0,-268 # 1ef4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x700>
    1674:	eedff0ef          	jal	1560 <uart_send_cstr(char const*)>
#             uart_send_hex_byte(*ptr);
    1678:	00044503          	lbu	a0,0(s0)
    167c:	da5ff0ef          	jal	1420 <uart_send_hex_byte(unsigned char)>
#             uart_send_cstr("\r\n");
    1680:	00002537          	lui	a0,0x2
    1684:	c6450513          	addi	a0,a0,-924 # 1c64 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x470>
    1688:	ed9ff0ef          	jal	1560 <uart_send_cstr(char const*)>
#             failed = true;
    168c:	00100793          	li	a5,1
#         ++ch;
    1690:	00148493          	addi	s1,s1,1
#         ++ptr;
    1694:	00140413          	addi	s0,s0,1
#         ++ch;
    1698:	0ff4f493          	zext.b	s1,s1
    169c:	f61ff06f          	j	15fc <action_mem_test()+0x50>
#         uart_send_cstr("testing memory succeeded\r\n");
    16a0:	00002537          	lui	a0,0x2
    16a4:	f1450513          	addi	a0,a0,-236 # 1f14 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x720>
    16a8:	f65ff06f          	j	160c <action_mem_test()+0x60>

000016ac <action_sdcard_status()>:
# static auto action_sdcard_status() -> void {
    16ac:	ff010113          	addi	sp,sp,-16
    16b0:	00812423          	sw	s0,8(sp)
#     uart_send_cstr("SDCARD_STATUS: 0x");
    16b4:	00002537          	lui	a0,0x2
#     uint32_t const status = *SDCARD_STATUS;
    16b8:	fe402403          	lw	s0,-28(zero) # ffffffe4 <__bss_end+0xffffdc98>
#     uart_send_cstr("SDCARD_STATUS: 0x");
    16bc:	f3050513          	addi	a0,a0,-208 # 1f30 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x73c>
# static auto action_sdcard_status() -> void {
    16c0:	00112623          	sw	ra,12(sp)
#     uart_send_cstr("SDCARD_STATUS: 0x");
    16c4:	e9dff0ef          	jal	1560 <uart_send_cstr(char const*)>
#     uart_send_hex_uint32(status, true);
    16c8:	00040513          	mv	a0,s0
    16cc:	00100593          	li	a1,1
    16d0:	cf5ff0ef          	jal	13c4 <uart_send_hex_uint32(unsigned int, bool)>
# }
    16d4:	00812403          	lw	s0,8(sp)
    16d8:	00c12083          	lw	ra,12(sp)
#     uart_send_cstr("\r\n");
    16dc:	00002537          	lui	a0,0x2
    16e0:	c6450513          	addi	a0,a0,-924 # 1c64 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x470>
# }
    16e4:	01010113          	addi	sp,sp,16
#     uart_send_cstr("\r\n");
    16e8:	e79ff06f          	j	1560 <uart_send_cstr(char const*)>

000016ec <sdcard_read_blocking(unsigned int, char*)>:
#     while (*SDCARD_BUSY)
    16ec:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdca4>
    16f0:	fe079ee3          	bnez	a5,16ec <sdcard_read_blocking(unsigned int, char*)>
#     *SDCARD_READ_SECTOR = sector;
    16f4:	fea02623          	sw	a0,-20(zero) # ffffffec <__bss_end+0xffffdca0>
#     while (*SDCARD_BUSY)
    16f8:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdca4>
    16fc:	fe079ee3          	bnez	a5,16f8 <sdcard_read_blocking(unsigned int, char*)+0xc>
    1700:	20058793          	addi	a5,a1,512
#         *buffer512B = char(*SDCARD_NEXT_BYTE);
    1704:	fe802703          	lw	a4,-24(zero) # ffffffe8 <__bss_end+0xffffdc9c>
#         ++buffer512B;
    1708:	00158593          	addi	a1,a1,1
#         *buffer512B = char(*SDCARD_NEXT_BYTE);
    170c:	fee58fa3          	sb	a4,-1(a1)
#     for (size_t i = 0; i < 512; ++i) {
    1710:	feb79ae3          	bne	a5,a1,1704 <sdcard_read_blocking(unsigned int, char*)+0x18>
# }
    1714:	00008067          	ret

00001718 <sdcard_write_blocking(unsigned int, char const*)>:
#     while (*SDCARD_BUSY)
    1718:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdca4>
    171c:	fe079ee3          	bnez	a5,1718 <sdcard_write_blocking(unsigned int, char const*)>
    1720:	20058793          	addi	a5,a1,512
#         *SDCARD_NEXT_BYTE = *buffer512B;
    1724:	0005c703          	lbu	a4,0(a1)
#         ++buffer512B;
    1728:	00158593          	addi	a1,a1,1
#         *SDCARD_NEXT_BYTE = *buffer512B;
    172c:	fee02423          	sw	a4,-24(zero) # ffffffe8 <__bss_end+0xffffdc9c>
#     for (size_t i = 0; i < 512; ++i) {
    1730:	feb79ae3          	bne	a5,a1,1724 <sdcard_write_blocking(unsigned int, char const*)+0xc>
#     *SDCARD_WRITE_SECTOR = sector;
    1734:	fea02023          	sw	a0,-32(zero) # ffffffe0 <__bss_end+0xffffdc94>
#     while (*SDCARD_BUSY)
    1738:	ff002783          	lw	a5,-16(zero) # fffffff0 <__bss_end+0xffffdca4>
    173c:	fe079ee3          	bnez	a5,1738 <sdcard_write_blocking(unsigned int, char const*)+0x20>
# }
    1740:	00008067          	ret

00001744 <memset>:
#     while (n--) {
    1744:	00c50633          	add	a2,a0,a2
#     char* ptr = reinterpret_cast<char*>(str);
    1748:	00050793          	mv	a5,a0
#     while (n--) {
    174c:	00c79463          	bne	a5,a2,1754 <memset+0x10>
# }
    1750:	00008067          	ret
#         *ptr = char(ch);
    1754:	00b78023          	sb	a1,0(a5)
#         ++ptr;
    1758:	00178793          	addi	a5,a5,1
    175c:	ff1ff06f          	j	174c <memset+0x8>

00001760 <memcpy>:
#     char* p1 = reinterpret_cast<char*>(dst);
#     char const* p2 = reinterpret_cast<char const*>(src);
#     while (n--) {
    1760:	00000793          	li	a5,0
    1764:	00f61463          	bne	a2,a5,176c <memcpy+0xc>
#         *p1 = *p2;
#         ++p1;
#         ++p2;
#     }
#     return dst;
# }
    1768:	00008067          	ret
#         *p1 = *p2;
    176c:	00f58733          	add	a4,a1,a5
    1770:	00074683          	lbu	a3,0(a4)
    1774:	00f50733          	add	a4,a0,a5
    1778:	00178793          	addi	a5,a5,1
    177c:	00d70023          	sb	a3,0(a4)
#         ++p2;
    1780:	fe5ff06f          	j	1764 <memcpy+0x4>

00001784 <initiate_bss()>:
# 
# // zero bss section
# static auto initiate_bss() -> void {
#     memset(&__bss_start, 0, &__bss_end - &__bss_start);
    1784:	00002537          	lui	a0,0x2
    1788:	000027b7          	lui	a5,0x2
    178c:	34c50613          	addi	a2,a0,844 # 234c <__bss_end>
    1790:	34c78793          	addi	a5,a5,844 # 234c <__bss_end>
    1794:	40c78633          	sub	a2,a5,a2
    1798:	00000593          	li	a1,0
    179c:	34c50513          	addi	a0,a0,844
    17a0:	fa5ff06f          	j	1744 <memset>

000017a4 <initiate_statics()>:
# }
# 
# static auto initiate_statics() -> void {}
    17a4:	00008067          	ret

000017a8 <exit(int)>:
# 
# static auto exit(int code) -> void {}
    17a8:	00008067          	ret

000017ac <void cursor_buffer<char, 160u>::apply_on_elements_from_cursor_to_end<input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}>(input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}&&) const [clone .isra.0]>:
#     auto apply_on_elements_from_cursor_to_end(
    17ac:	ff010113          	addi	sp,sp,-16
    17b0:	00912223          	sw	s1,4(sp)
#         for (size_t i = cursor_; i < end_; ++i) {
    17b4:	0a052483          	lw	s1,160(a0)
#     auto apply_on_elements_from_cursor_to_end(
    17b8:	00812423          	sw	s0,8(sp)
    17bc:	00112623          	sw	ra,12(sp)
    17c0:	00050413          	mv	s0,a0
#         for (size_t i = cursor_; i < end_; ++i) {
    17c4:	0a442783          	lw	a5,164(s0)
    17c8:	00f4ec63          	bltu	s1,a5,17e0 <void cursor_buffer<char, 160u>::apply_on_elements_from_cursor_to_end<input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}>(input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x34>
#     }
    17cc:	00c12083          	lw	ra,12(sp)
    17d0:	00812403          	lw	s0,8(sp)
    17d4:	00412483          	lw	s1,4(sp)
    17d8:	01010113          	addi	sp,sp,16
    17dc:	00008067          	ret
#             f(line_[i]);
    17e0:	009407b3          	add	a5,s0,s1
#                         [](let c) { uart_send_char(c); });
    17e4:	0007c503          	lbu	a0,0(a5)
#         for (size_t i = cursor_; i < end_; ++i) {
    17e8:	00148493          	addi	s1,s1,1
    17ec:	d99ff0ef          	jal	1584 <uart_send_char(char)>
    17f0:	fd5ff06f          	j	17c4 <void cursor_buffer<char, 160u>::apply_on_elements_from_cursor_to_end<input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}>(input(cursor_buffer<char, 160u>&)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x18>

000017f4 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]>:
#     auto for_each(callable_returns_void<Type> auto&& f) const -> void {
    17f4:	ff010113          	addi	sp,sp,-16
    17f8:	00812423          	sw	s0,8(sp)
#         for (Type* it = begin_; it < end_; ++it) {
    17fc:	00052403          	lw	s0,0(a0)
#     auto for_each(callable_returns_void<Type> auto&& f) const -> void {
    1800:	00912223          	sw	s1,4(sp)
    1804:	00112623          	sw	ra,12(sp)
    1808:	00050493          	mv	s1,a0
#         for (Type* it = begin_; it < end_; ++it) {
    180c:	0044a783          	lw	a5,4(s1)
    1810:	00f46c63          	bltu	s0,a5,1828 <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x34>
#     }
    1814:	00c12083          	lw	ra,12(sp)
    1818:	00812403          	lw	s0,8(sp)
    181c:	00412483          	lw	s1,4(sp)
    1820:	01010113          	addi	sp,sp,16
    1824:	00008067          	ret
#     str.for_each([](let ch) { uart_send_char(ch); });
    1828:	00044503          	lbu	a0,0(s0)
#         for (Type* it = begin_; it < end_; ++it) {
    182c:	00140413          	addi	s0,s0,1
    1830:	d55ff0ef          	jal	1584 <uart_send_char(char)>
    1834:	fd9ff06f          	j	180c <void span<char>::for_each<string_print(span<char>)::{lambda(auto:1)#1}>(string_print(span<char>)::{lambda(auto:1)#1}&&) const [clone .isra.0]+0x18>
