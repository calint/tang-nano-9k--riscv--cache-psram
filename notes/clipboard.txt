# revert changes to last commit
git reset --hard HEAD

# commit and push
git add . && git commit -m "." && git push

# tag with date and time
TAG=$(date "+%Y-%m-%d--%H-%M") && git tag $TAG && git push origin $TAG

# in case the ttyUSBx hangs
sudo modprobe -r xhci_pci && sleep 5 && sudo modprobe xhci_pci

-------------------------------------------------------------
//
// One line description of the module
//
`timescale 100ps / 100ps
//
`default_nettype none
//`define DBG

module my_module #(
  parameter Width = 80,
  parameter Height = 24
) (
  input              clk_i,
  input              rst_ni,
  input              req_valid_i,
  input  [Width-1:0] req_data_i,
  output             req_ready_o,
  ...
);

  logic [Width-1:0] req_data_masked;

  submodule u_submodule (
    .clk_i,
    .rst_ni,
    .req_valid_i,
    .req_data_i (req_data_masked),
    .req_ready_o(req_ready),
    ...
  );

  always_comb begin
    req_data_masked = req_data_i;
    case (fsm_state_q)
      ST_IDLE: begin
        req_data_masked = req_data_i & MASK_IDLE;
        ...
  end

  ...

endmodule

`undef DBG
`default_nettype wire

-------------------------------------------------------------

openFPGALoader -b tangnano9k --external-flash test.txt

-------------------------------------------------------------

start Gowin EDA on Arch Linux:
LD_PRELOAD=/usr/lib/libfreetype.so ~/apps/gowin/IDE/bin/gw_ide

-------------------------------------------------------------

template <typename T, typename U> struct is_same {
  static constexpr bool value = false;
};

template <typename T> struct is_same<T, T> {
  static constexpr bool value = true;
};

template <typename T, typename U>
constexpr bool is_same_v = is_same<T, U>::value;

template <typename F, typename T>
concept function_one_arg_returns_bool =
    requires(F f, T arg) { requires is_same_v<decltype(f(arg)), bool>; };
...
  auto for_each_until_false(function_one_arg_returns_bool<Type> auto &&f) const
      -> void {
    for (size_t i = 0; i < len; ++i) {
      if (!f(data[i])) {
        return;
      }
    }
  }
...

IO_LOC  "rst_n" 4;
IO_PORT "rst_n" IO_TYPE=LVCMOS18 PULL_MODE=UP;

IO_LOC  "clk" 52;
IO_PORT "clk" IO_TYPE=LVCMOS33 PULL_MODE=UP;

IO_LOC  "btn1" 3;
IO_PORT "btn1" IO_TYPE=LVCMOS18;

IO_LOC  "led[0]" 10;
IO_PORT "led[0]" DRIVE=8 IO_TYPE=LVCMOS18 PULL_MODE=UP;

IO_LOC  "led[1]" 11;
IO_PORT "led[1]" DRIVE=8 IO_TYPE=LVCMOS18 PULL_MODE=UP;

IO_LOC  "led[2]" 13;
IO_PORT "led[2]" DRIVE=8 IO_TYPE=LVCMOS18 PULL_MODE=UP;

IO_LOC  "led[3]" 14;
IO_PORT "led[3]" DRIVE=8 IO_TYPE=LVCMOS18 PULL_MODE=UP;

IO_LOC  "led[4]" 15;
IO_PORT "led[4]" DRIVE=8 IO_TYPE=LVCMOS18 PULL_MODE=UP;

IO_LOC  "led[5]" 16;
IO_PORT "led[5]" DRIVE=8 IO_TYPE=LVCMOS18 PULL_MODE=UP;

IO_LOC  "uart_tx" 17;
IO_PORT "uart_tx" DRIVE=8 IO_TYPE=LVCMOS33 PULL_MODE=UP;

IO_LOC  "uart_rx" 18;
IO_PORT "uart_rx" IO_TYPE=LVCMOS33 PULL_MODE=UP;

IO_LOC "flash_clk" 59;
IO_PORT "flash_clk" IO_TYPE=LVCMOS33;

IO_LOC "flash_miso" 62;
IO_PORT "flash_miso" IO_TYPE=LVCMOS33;

IO_LOC "flash_mosi" 61;
IO_PORT "flash_mosi" IO_TYPE=LVCMOS33;

IO_LOC "flash_cs" 60;
IO_PORT "flash_cs" IO_TYPE=LVCMOS33;
 ----------------------
 